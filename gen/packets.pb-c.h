/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: packets.proto */

#ifndef PROTOBUF_C_packets_2eproto__INCLUDED
#define PROTOBUF_C_packets_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protobuf-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protobuf-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protobuf-c.
#endif

#include "buf/validate/validate.pb-c.h"

typedef struct VersionPacket VersionPacket;
typedef struct LoginPacket LoginPacket;
typedef struct MessagePacket MessagePacket;
typedef struct AffirmPacket AffirmPacket;
typedef struct ErrorPacket ErrorPacket;
typedef struct UniversalPacket UniversalPacket;


/* --- enums --- */

typedef enum _AffirmationType {
  AFFIRMATION_TYPE__AFFIRM_LOGIN = 0,
  AFFIRMATION_TYPE__AFFIRM_MESSAGE = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(AFFIRMATION_TYPE)
} AffirmationType;

/* --- messages --- */

struct  VersionPacket
{
  ProtobufCMessage base;
  protobuf_c_boolean has_major_ver;
  uint32_t major_ver;
  protobuf_c_boolean has_minor_ver;
  uint32_t minor_ver;
  protobuf_c_boolean has_patch_ver;
  uint32_t patch_ver;
  protobuf_c_boolean has_protocol_extension;
  uint32_t protocol_extension;
};
#define VERSION_PACKET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&version_packet__descriptor) \
, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  LoginPacket
{
  ProtobufCMessage base;
  char *user_identifier;
  char *user_password;
};
#define LOGIN_PACKET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&login_packet__descriptor) \
, NULL, NULL }


struct  MessagePacket
{
  ProtobufCMessage base;
  size_t n_identifiers;
  char **identifiers;
  char *channel_id;
  char *message;
};
#define MESSAGE_PACKET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&message_packet__descriptor) \
, 0,NULL, NULL, NULL }


struct  AffirmPacket
{
  ProtobufCMessage base;
  protobuf_c_boolean has_type;
  AffirmationType type;
};
#define AFFIRM_PACKET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&affirm_packet__descriptor) \
, 0, AFFIRMATION_TYPE__AFFIRM_LOGIN }


struct  ErrorPacket
{
  ProtobufCMessage base;
  char *user_identifier;
  char *error;
};
#define ERROR_PACKET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&error_packet__descriptor) \
, NULL, NULL }


typedef enum {
  UNIVERSAL_PACKET__PAYLOAD__NOT_SET = 0,
  UNIVERSAL_PACKET__PAYLOAD_VERSION = 1,
  UNIVERSAL_PACKET__PAYLOAD_ERROR = 2,
  UNIVERSAL_PACKET__PAYLOAD_LOGIN = 3,
  UNIVERSAL_PACKET__PAYLOAD_MSG = 4,
  UNIVERSAL_PACKET__PAYLOAD_AFFIRM = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(UNIVERSAL_PACKET__PAYLOAD__CASE)
} UniversalPacket__PayloadCase;

struct  UniversalPacket
{
  ProtobufCMessage base;
  UniversalPacket__PayloadCase payload_case;
  union {
    AffirmPacket *affirm;
    ErrorPacket *error;
    LoginPacket *login;
    MessagePacket *msg;
    VersionPacket *version;
  };
};
#define UNIVERSAL_PACKET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&universal_packet__descriptor) \
, UNIVERSAL_PACKET__PAYLOAD__NOT_SET, {0} }


/* VersionPacket methods */
void   version_packet__init
                     (VersionPacket         *message);
size_t version_packet__get_packed_size
                     (const VersionPacket   *message);
size_t version_packet__pack
                     (const VersionPacket   *message,
                      uint8_t             *out);
size_t version_packet__pack_to_buffer
                     (const VersionPacket   *message,
                      ProtobufCBuffer     *buffer);
VersionPacket *
       version_packet__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   version_packet__free_unpacked
                     (VersionPacket *message,
                      ProtobufCAllocator *allocator);
/* LoginPacket methods */
void   login_packet__init
                     (LoginPacket         *message);
size_t login_packet__get_packed_size
                     (const LoginPacket   *message);
size_t login_packet__pack
                     (const LoginPacket   *message,
                      uint8_t             *out);
size_t login_packet__pack_to_buffer
                     (const LoginPacket   *message,
                      ProtobufCBuffer     *buffer);
LoginPacket *
       login_packet__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   login_packet__free_unpacked
                     (LoginPacket *message,
                      ProtobufCAllocator *allocator);
/* MessagePacket methods */
void   message_packet__init
                     (MessagePacket         *message);
size_t message_packet__get_packed_size
                     (const MessagePacket   *message);
size_t message_packet__pack
                     (const MessagePacket   *message,
                      uint8_t             *out);
size_t message_packet__pack_to_buffer
                     (const MessagePacket   *message,
                      ProtobufCBuffer     *buffer);
MessagePacket *
       message_packet__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   message_packet__free_unpacked
                     (MessagePacket *message,
                      ProtobufCAllocator *allocator);
/* AffirmPacket methods */
void   affirm_packet__init
                     (AffirmPacket         *message);
size_t affirm_packet__get_packed_size
                     (const AffirmPacket   *message);
size_t affirm_packet__pack
                     (const AffirmPacket   *message,
                      uint8_t             *out);
size_t affirm_packet__pack_to_buffer
                     (const AffirmPacket   *message,
                      ProtobufCBuffer     *buffer);
AffirmPacket *
       affirm_packet__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   affirm_packet__free_unpacked
                     (AffirmPacket *message,
                      ProtobufCAllocator *allocator);
/* ErrorPacket methods */
void   error_packet__init
                     (ErrorPacket         *message);
size_t error_packet__get_packed_size
                     (const ErrorPacket   *message);
size_t error_packet__pack
                     (const ErrorPacket   *message,
                      uint8_t             *out);
size_t error_packet__pack_to_buffer
                     (const ErrorPacket   *message,
                      ProtobufCBuffer     *buffer);
ErrorPacket *
       error_packet__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   error_packet__free_unpacked
                     (ErrorPacket *message,
                      ProtobufCAllocator *allocator);
/* UniversalPacket methods */
void   universal_packet__init
                     (UniversalPacket         *message);
size_t universal_packet__get_packed_size
                     (const UniversalPacket   *message);
size_t universal_packet__pack
                     (const UniversalPacket   *message,
                      uint8_t             *out);
size_t universal_packet__pack_to_buffer
                     (const UniversalPacket   *message,
                      ProtobufCBuffer     *buffer);
UniversalPacket *
       universal_packet__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   universal_packet__free_unpacked
                     (UniversalPacket *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*VersionPacket_Closure)
                 (const VersionPacket *message,
                  void *closure_data);
typedef void (*LoginPacket_Closure)
                 (const LoginPacket *message,
                  void *closure_data);
typedef void (*MessagePacket_Closure)
                 (const MessagePacket *message,
                  void *closure_data);
typedef void (*AffirmPacket_Closure)
                 (const AffirmPacket *message,
                  void *closure_data);
typedef void (*ErrorPacket_Closure)
                 (const ErrorPacket *message,
                  void *closure_data);
typedef void (*UniversalPacket_Closure)
                 (const UniversalPacket *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    affirmation_type__descriptor;
extern const ProtobufCMessageDescriptor version_packet__descriptor;
extern const ProtobufCMessageDescriptor login_packet__descriptor;
extern const ProtobufCMessageDescriptor message_packet__descriptor;
extern const ProtobufCMessageDescriptor affirm_packet__descriptor;
extern const ProtobufCMessageDescriptor error_packet__descriptor;
extern const ProtobufCMessageDescriptor universal_packet__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_packets_2eproto__INCLUDED */

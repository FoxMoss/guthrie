// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: buf/validate/validate.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_buf_2fvalidate_2fvalidate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_buf_2fvalidate_2fvalidate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_buf_2fvalidate_2fvalidate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_buf_2fvalidate_2fvalidate_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[31]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_buf_2fvalidate_2fvalidate_2eproto;
namespace buf {
namespace validate {
class AnyRules;
class AnyRulesDefaultTypeInternal;
extern AnyRulesDefaultTypeInternal _AnyRules_default_instance_;
class BoolRules;
class BoolRulesDefaultTypeInternal;
extern BoolRulesDefaultTypeInternal _BoolRules_default_instance_;
class BytesRules;
class BytesRulesDefaultTypeInternal;
extern BytesRulesDefaultTypeInternal _BytesRules_default_instance_;
class DoubleRules;
class DoubleRulesDefaultTypeInternal;
extern DoubleRulesDefaultTypeInternal _DoubleRules_default_instance_;
class DurationRules;
class DurationRulesDefaultTypeInternal;
extern DurationRulesDefaultTypeInternal _DurationRules_default_instance_;
class EnumRules;
class EnumRulesDefaultTypeInternal;
extern EnumRulesDefaultTypeInternal _EnumRules_default_instance_;
class FieldPath;
class FieldPathDefaultTypeInternal;
extern FieldPathDefaultTypeInternal _FieldPath_default_instance_;
class FieldPathElement;
class FieldPathElementDefaultTypeInternal;
extern FieldPathElementDefaultTypeInternal _FieldPathElement_default_instance_;
class FieldRules;
class FieldRulesDefaultTypeInternal;
extern FieldRulesDefaultTypeInternal _FieldRules_default_instance_;
class Fixed32Rules;
class Fixed32RulesDefaultTypeInternal;
extern Fixed32RulesDefaultTypeInternal _Fixed32Rules_default_instance_;
class Fixed64Rules;
class Fixed64RulesDefaultTypeInternal;
extern Fixed64RulesDefaultTypeInternal _Fixed64Rules_default_instance_;
class FloatRules;
class FloatRulesDefaultTypeInternal;
extern FloatRulesDefaultTypeInternal _FloatRules_default_instance_;
class Int32Rules;
class Int32RulesDefaultTypeInternal;
extern Int32RulesDefaultTypeInternal _Int32Rules_default_instance_;
class Int64Rules;
class Int64RulesDefaultTypeInternal;
extern Int64RulesDefaultTypeInternal _Int64Rules_default_instance_;
class MapRules;
class MapRulesDefaultTypeInternal;
extern MapRulesDefaultTypeInternal _MapRules_default_instance_;
class MessageOneofRule;
class MessageOneofRuleDefaultTypeInternal;
extern MessageOneofRuleDefaultTypeInternal _MessageOneofRule_default_instance_;
class MessageRules;
class MessageRulesDefaultTypeInternal;
extern MessageRulesDefaultTypeInternal _MessageRules_default_instance_;
class OneofRules;
class OneofRulesDefaultTypeInternal;
extern OneofRulesDefaultTypeInternal _OneofRules_default_instance_;
class PredefinedRules;
class PredefinedRulesDefaultTypeInternal;
extern PredefinedRulesDefaultTypeInternal _PredefinedRules_default_instance_;
class RepeatedRules;
class RepeatedRulesDefaultTypeInternal;
extern RepeatedRulesDefaultTypeInternal _RepeatedRules_default_instance_;
class Rule;
class RuleDefaultTypeInternal;
extern RuleDefaultTypeInternal _Rule_default_instance_;
class SFixed32Rules;
class SFixed32RulesDefaultTypeInternal;
extern SFixed32RulesDefaultTypeInternal _SFixed32Rules_default_instance_;
class SFixed64Rules;
class SFixed64RulesDefaultTypeInternal;
extern SFixed64RulesDefaultTypeInternal _SFixed64Rules_default_instance_;
class SInt32Rules;
class SInt32RulesDefaultTypeInternal;
extern SInt32RulesDefaultTypeInternal _SInt32Rules_default_instance_;
class SInt64Rules;
class SInt64RulesDefaultTypeInternal;
extern SInt64RulesDefaultTypeInternal _SInt64Rules_default_instance_;
class StringRules;
class StringRulesDefaultTypeInternal;
extern StringRulesDefaultTypeInternal _StringRules_default_instance_;
class TimestampRules;
class TimestampRulesDefaultTypeInternal;
extern TimestampRulesDefaultTypeInternal _TimestampRules_default_instance_;
class UInt32Rules;
class UInt32RulesDefaultTypeInternal;
extern UInt32RulesDefaultTypeInternal _UInt32Rules_default_instance_;
class UInt64Rules;
class UInt64RulesDefaultTypeInternal;
extern UInt64RulesDefaultTypeInternal _UInt64Rules_default_instance_;
class Violation;
class ViolationDefaultTypeInternal;
extern ViolationDefaultTypeInternal _Violation_default_instance_;
class Violations;
class ViolationsDefaultTypeInternal;
extern ViolationsDefaultTypeInternal _Violations_default_instance_;
}  // namespace validate
}  // namespace buf
PROTOBUF_NAMESPACE_OPEN
template<> ::buf::validate::AnyRules* Arena::CreateMaybeMessage<::buf::validate::AnyRules>(Arena*);
template<> ::buf::validate::BoolRules* Arena::CreateMaybeMessage<::buf::validate::BoolRules>(Arena*);
template<> ::buf::validate::BytesRules* Arena::CreateMaybeMessage<::buf::validate::BytesRules>(Arena*);
template<> ::buf::validate::DoubleRules* Arena::CreateMaybeMessage<::buf::validate::DoubleRules>(Arena*);
template<> ::buf::validate::DurationRules* Arena::CreateMaybeMessage<::buf::validate::DurationRules>(Arena*);
template<> ::buf::validate::EnumRules* Arena::CreateMaybeMessage<::buf::validate::EnumRules>(Arena*);
template<> ::buf::validate::FieldPath* Arena::CreateMaybeMessage<::buf::validate::FieldPath>(Arena*);
template<> ::buf::validate::FieldPathElement* Arena::CreateMaybeMessage<::buf::validate::FieldPathElement>(Arena*);
template<> ::buf::validate::FieldRules* Arena::CreateMaybeMessage<::buf::validate::FieldRules>(Arena*);
template<> ::buf::validate::Fixed32Rules* Arena::CreateMaybeMessage<::buf::validate::Fixed32Rules>(Arena*);
template<> ::buf::validate::Fixed64Rules* Arena::CreateMaybeMessage<::buf::validate::Fixed64Rules>(Arena*);
template<> ::buf::validate::FloatRules* Arena::CreateMaybeMessage<::buf::validate::FloatRules>(Arena*);
template<> ::buf::validate::Int32Rules* Arena::CreateMaybeMessage<::buf::validate::Int32Rules>(Arena*);
template<> ::buf::validate::Int64Rules* Arena::CreateMaybeMessage<::buf::validate::Int64Rules>(Arena*);
template<> ::buf::validate::MapRules* Arena::CreateMaybeMessage<::buf::validate::MapRules>(Arena*);
template<> ::buf::validate::MessageOneofRule* Arena::CreateMaybeMessage<::buf::validate::MessageOneofRule>(Arena*);
template<> ::buf::validate::MessageRules* Arena::CreateMaybeMessage<::buf::validate::MessageRules>(Arena*);
template<> ::buf::validate::OneofRules* Arena::CreateMaybeMessage<::buf::validate::OneofRules>(Arena*);
template<> ::buf::validate::PredefinedRules* Arena::CreateMaybeMessage<::buf::validate::PredefinedRules>(Arena*);
template<> ::buf::validate::RepeatedRules* Arena::CreateMaybeMessage<::buf::validate::RepeatedRules>(Arena*);
template<> ::buf::validate::Rule* Arena::CreateMaybeMessage<::buf::validate::Rule>(Arena*);
template<> ::buf::validate::SFixed32Rules* Arena::CreateMaybeMessage<::buf::validate::SFixed32Rules>(Arena*);
template<> ::buf::validate::SFixed64Rules* Arena::CreateMaybeMessage<::buf::validate::SFixed64Rules>(Arena*);
template<> ::buf::validate::SInt32Rules* Arena::CreateMaybeMessage<::buf::validate::SInt32Rules>(Arena*);
template<> ::buf::validate::SInt64Rules* Arena::CreateMaybeMessage<::buf::validate::SInt64Rules>(Arena*);
template<> ::buf::validate::StringRules* Arena::CreateMaybeMessage<::buf::validate::StringRules>(Arena*);
template<> ::buf::validate::TimestampRules* Arena::CreateMaybeMessage<::buf::validate::TimestampRules>(Arena*);
template<> ::buf::validate::UInt32Rules* Arena::CreateMaybeMessage<::buf::validate::UInt32Rules>(Arena*);
template<> ::buf::validate::UInt64Rules* Arena::CreateMaybeMessage<::buf::validate::UInt64Rules>(Arena*);
template<> ::buf::validate::Violation* Arena::CreateMaybeMessage<::buf::validate::Violation>(Arena*);
template<> ::buf::validate::Violations* Arena::CreateMaybeMessage<::buf::validate::Violations>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace buf {
namespace validate {

enum Ignore : int {
  IGNORE_UNSPECIFIED = 0,
  IGNORE_IF_UNPOPULATED = 1,
  IGNORE_IF_DEFAULT_VALUE = 2,
  IGNORE_ALWAYS = 3
};
bool Ignore_IsValid(int value);
constexpr Ignore Ignore_MIN = IGNORE_UNSPECIFIED;
constexpr Ignore Ignore_MAX = IGNORE_ALWAYS;
constexpr int Ignore_ARRAYSIZE = Ignore_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Ignore_descriptor();
template<typename T>
inline const std::string& Ignore_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Ignore>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Ignore_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Ignore_descriptor(), enum_t_value);
}
inline bool Ignore_Parse(
    const std::string& name, Ignore* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Ignore>(
    Ignore_descriptor(), name, value);
}
enum KnownRegex : int {
  KNOWN_REGEX_UNSPECIFIED = 0,
  KNOWN_REGEX_HTTP_HEADER_NAME = 1,
  KNOWN_REGEX_HTTP_HEADER_VALUE = 2
};
bool KnownRegex_IsValid(int value);
constexpr KnownRegex KnownRegex_MIN = KNOWN_REGEX_UNSPECIFIED;
constexpr KnownRegex KnownRegex_MAX = KNOWN_REGEX_HTTP_HEADER_VALUE;
constexpr int KnownRegex_ARRAYSIZE = KnownRegex_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KnownRegex_descriptor();
template<typename T>
inline const std::string& KnownRegex_Name(T enum_t_value) {
  static_assert(::std::is_same<T, KnownRegex>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function KnownRegex_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    KnownRegex_descriptor(), enum_t_value);
}
inline bool KnownRegex_Parse(
    const std::string& name, KnownRegex* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<KnownRegex>(
    KnownRegex_descriptor(), name, value);
}
// ===================================================================

class Rule PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:buf.validate.Rule) */ {
 public:
  inline Rule() : Rule(nullptr) {};
  virtual ~Rule();

  Rule(const Rule& from);
  Rule(Rule&& from) noexcept
    : Rule() {
    *this = ::std::move(from);
  }

  inline Rule& operator=(const Rule& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rule& operator=(Rule&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Rule& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rule* internal_default_instance() {
    return reinterpret_cast<const Rule*>(
               &_Rule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Rule& a, Rule& b) {
    a.Swap(&b);
  }
  inline void Swap(Rule* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Rule* New() const final {
    return CreateMaybeMessage<Rule>(nullptr);
  }

  Rule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Rule>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Rule& from);
  void MergeFrom(const Rule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rule* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "buf.validate.Rule";
  }
  protected:
  explicit Rule(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_buf_2fvalidate_2fvalidate_2eproto);
    return ::descriptor_table_buf_2fvalidate_2fvalidate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kMessageFieldNumber = 2,
    kExpressionFieldNumber = 3,
  };
  // optional string id = 1[json_name = "id"];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional string message = 2[json_name = "message"];
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // optional string expression = 3[json_name = "expression"];
  bool has_expression() const;
  private:
  bool _internal_has_expression() const;
  public:
  void clear_expression();
  const std::string& expression() const;
  void set_expression(const std::string& value);
  void set_expression(std::string&& value);
  void set_expression(const char* value);
  void set_expression(const char* value, size_t size);
  std::string* mutable_expression();
  std::string* release_expression();
  void set_allocated_expression(std::string* expression);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_expression();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_expression(
      std::string* expression);
  private:
  const std::string& _internal_expression() const;
  void _internal_set_expression(const std::string& value);
  std::string* _internal_mutable_expression();
  public:

  // @@protoc_insertion_point(class_scope:buf.validate.Rule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr expression_;
  friend struct ::TableStruct_buf_2fvalidate_2fvalidate_2eproto;
};
// -------------------------------------------------------------------

class MessageRules PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:buf.validate.MessageRules) */ {
 public:
  inline MessageRules() : MessageRules(nullptr) {};
  virtual ~MessageRules();

  MessageRules(const MessageRules& from);
  MessageRules(MessageRules&& from) noexcept
    : MessageRules() {
    *this = ::std::move(from);
  }

  inline MessageRules& operator=(const MessageRules& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageRules& operator=(MessageRules&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageRules& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageRules* internal_default_instance() {
    return reinterpret_cast<const MessageRules*>(
               &_MessageRules_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MessageRules& a, MessageRules& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageRules* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageRules* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageRules* New() const final {
    return CreateMaybeMessage<MessageRules>(nullptr);
  }

  MessageRules* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageRules>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageRules& from);
  void MergeFrom(const MessageRules& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageRules* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "buf.validate.MessageRules";
  }
  protected:
  explicit MessageRules(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_buf_2fvalidate_2fvalidate_2eproto);
    return ::descriptor_table_buf_2fvalidate_2fvalidate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCelFieldNumber = 3,
    kOneofFieldNumber = 4,
    kDisabledFieldNumber = 1,
  };
  // repeated .buf.validate.Rule cel = 3[json_name = "cel"];
  int cel_size() const;
  private:
  int _internal_cel_size() const;
  public:
  void clear_cel();
  ::buf::validate::Rule* mutable_cel(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::buf::validate::Rule >*
      mutable_cel();
  private:
  const ::buf::validate::Rule& _internal_cel(int index) const;
  ::buf::validate::Rule* _internal_add_cel();
  public:
  const ::buf::validate::Rule& cel(int index) const;
  ::buf::validate::Rule* add_cel();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::buf::validate::Rule >&
      cel() const;

  // repeated .buf.validate.MessageOneofRule oneof = 4[json_name = "oneof"];
  int oneof_size() const;
  private:
  int _internal_oneof_size() const;
  public:
  void clear_oneof();
  ::buf::validate::MessageOneofRule* mutable_oneof(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::buf::validate::MessageOneofRule >*
      mutable_oneof();
  private:
  const ::buf::validate::MessageOneofRule& _internal_oneof(int index) const;
  ::buf::validate::MessageOneofRule* _internal_add_oneof();
  public:
  const ::buf::validate::MessageOneofRule& oneof(int index) const;
  ::buf::validate::MessageOneofRule* add_oneof();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::buf::validate::MessageOneofRule >&
      oneof() const;

  // optional bool disabled = 1[json_name = "disabled"];
  bool has_disabled() const;
  private:
  bool _internal_has_disabled() const;
  public:
  void clear_disabled();
  bool disabled() const;
  void set_disabled(bool value);
  private:
  bool _internal_disabled() const;
  void _internal_set_disabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:buf.validate.MessageRules)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::buf::validate::Rule > cel_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::buf::validate::MessageOneofRule > oneof_;
  bool disabled_;
  friend struct ::TableStruct_buf_2fvalidate_2fvalidate_2eproto;
};
// -------------------------------------------------------------------

class MessageOneofRule PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:buf.validate.MessageOneofRule) */ {
 public:
  inline MessageOneofRule() : MessageOneofRule(nullptr) {};
  virtual ~MessageOneofRule();

  MessageOneofRule(const MessageOneofRule& from);
  MessageOneofRule(MessageOneofRule&& from) noexcept
    : MessageOneofRule() {
    *this = ::std::move(from);
  }

  inline MessageOneofRule& operator=(const MessageOneofRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageOneofRule& operator=(MessageOneofRule&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageOneofRule& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageOneofRule* internal_default_instance() {
    return reinterpret_cast<const MessageOneofRule*>(
               &_MessageOneofRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MessageOneofRule& a, MessageOneofRule& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageOneofRule* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageOneofRule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageOneofRule* New() const final {
    return CreateMaybeMessage<MessageOneofRule>(nullptr);
  }

  MessageOneofRule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageOneofRule>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageOneofRule& from);
  void MergeFrom(const MessageOneofRule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageOneofRule* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "buf.validate.MessageOneofRule";
  }
  protected:
  explicit MessageOneofRule(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_buf_2fvalidate_2fvalidate_2eproto);
    return ::descriptor_table_buf_2fvalidate_2fvalidate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 1,
    kRequiredFieldNumber = 2,
  };
  // repeated string fields = 1[json_name = "fields"];
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  const std::string& fields(int index) const;
  std::string* mutable_fields(int index);
  void set_fields(int index, const std::string& value);
  void set_fields(int index, std::string&& value);
  void set_fields(int index, const char* value);
  void set_fields(int index, const char* value, size_t size);
  std::string* add_fields();
  void add_fields(const std::string& value);
  void add_fields(std::string&& value);
  void add_fields(const char* value);
  void add_fields(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& fields() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_fields();
  private:
  const std::string& _internal_fields(int index) const;
  std::string* _internal_add_fields();
  public:

  // optional bool required = 2[json_name = "required"];
  bool has_required() const;
  private:
  bool _internal_has_required() const;
  public:
  void clear_required();
  bool required() const;
  void set_required(bool value);
  private:
  bool _internal_required() const;
  void _internal_set_required(bool value);
  public:

  // @@protoc_insertion_point(class_scope:buf.validate.MessageOneofRule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> fields_;
  bool required_;
  friend struct ::TableStruct_buf_2fvalidate_2fvalidate_2eproto;
};
// -------------------------------------------------------------------

class OneofRules PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:buf.validate.OneofRules) */ {
 public:
  inline OneofRules() : OneofRules(nullptr) {};
  virtual ~OneofRules();

  OneofRules(const OneofRules& from);
  OneofRules(OneofRules&& from) noexcept
    : OneofRules() {
    *this = ::std::move(from);
  }

  inline OneofRules& operator=(const OneofRules& from) {
    CopyFrom(from);
    return *this;
  }
  inline OneofRules& operator=(OneofRules&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OneofRules& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OneofRules* internal_default_instance() {
    return reinterpret_cast<const OneofRules*>(
               &_OneofRules_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(OneofRules& a, OneofRules& b) {
    a.Swap(&b);
  }
  inline void Swap(OneofRules* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OneofRules* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OneofRules* New() const final {
    return CreateMaybeMessage<OneofRules>(nullptr);
  }

  OneofRules* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OneofRules>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OneofRules& from);
  void MergeFrom(const OneofRules& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OneofRules* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "buf.validate.OneofRules";
  }
  protected:
  explicit OneofRules(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_buf_2fvalidate_2fvalidate_2eproto);
    return ::descriptor_table_buf_2fvalidate_2fvalidate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequiredFieldNumber = 1,
  };
  // optional bool required = 1[json_name = "required"];
  bool has_required() const;
  private:
  bool _internal_has_required() const;
  public:
  void clear_required();
  bool required() const;
  void set_required(bool value);
  private:
  bool _internal_required() const;
  void _internal_set_required(bool value);
  public:

  // @@protoc_insertion_point(class_scope:buf.validate.OneofRules)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool required_;
  friend struct ::TableStruct_buf_2fvalidate_2fvalidate_2eproto;
};
// -------------------------------------------------------------------

class FieldRules PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:buf.validate.FieldRules) */ {
 public:
  inline FieldRules() : FieldRules(nullptr) {};
  virtual ~FieldRules();

  FieldRules(const FieldRules& from);
  FieldRules(FieldRules&& from) noexcept
    : FieldRules() {
    *this = ::std::move(from);
  }

  inline FieldRules& operator=(const FieldRules& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldRules& operator=(FieldRules&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FieldRules& default_instance();

  enum TypeCase {
    kFloat = 1,
    kDouble = 2,
    kInt32 = 3,
    kInt64 = 4,
    kUint32 = 5,
    kUint64 = 6,
    kSint32 = 7,
    kSint64 = 8,
    kFixed32 = 9,
    kFixed64 = 10,
    kSfixed32 = 11,
    kSfixed64 = 12,
    kBool = 13,
    kString = 14,
    kBytes = 15,
    kEnum = 16,
    kRepeated = 18,
    kMap = 19,
    kAny = 20,
    kDuration = 21,
    kTimestamp = 22,
    TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FieldRules* internal_default_instance() {
    return reinterpret_cast<const FieldRules*>(
               &_FieldRules_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FieldRules& a, FieldRules& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldRules* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FieldRules* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FieldRules* New() const final {
    return CreateMaybeMessage<FieldRules>(nullptr);
  }

  FieldRules* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FieldRules>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FieldRules& from);
  void MergeFrom(const FieldRules& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldRules* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "buf.validate.FieldRules";
  }
  protected:
  explicit FieldRules(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_buf_2fvalidate_2fvalidate_2eproto);
    return ::descriptor_table_buf_2fvalidate_2fvalidate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCelFieldNumber = 23,
    kRequiredFieldNumber = 25,
    kIgnoreFieldNumber = 27,
    kFloatFieldNumber = 1,
    kDoubleFieldNumber = 2,
    kInt32FieldNumber = 3,
    kInt64FieldNumber = 4,
    kUint32FieldNumber = 5,
    kUint64FieldNumber = 6,
    kSint32FieldNumber = 7,
    kSint64FieldNumber = 8,
    kFixed32FieldNumber = 9,
    kFixed64FieldNumber = 10,
    kSfixed32FieldNumber = 11,
    kSfixed64FieldNumber = 12,
    kBoolFieldNumber = 13,
    kStringFieldNumber = 14,
    kBytesFieldNumber = 15,
    kEnumFieldNumber = 16,
    kRepeatedFieldNumber = 18,
    kMapFieldNumber = 19,
    kAnyFieldNumber = 20,
    kDurationFieldNumber = 21,
    kTimestampFieldNumber = 22,
  };
  // repeated .buf.validate.Rule cel = 23[json_name = "cel"];
  int cel_size() const;
  private:
  int _internal_cel_size() const;
  public:
  void clear_cel();
  ::buf::validate::Rule* mutable_cel(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::buf::validate::Rule >*
      mutable_cel();
  private:
  const ::buf::validate::Rule& _internal_cel(int index) const;
  ::buf::validate::Rule* _internal_add_cel();
  public:
  const ::buf::validate::Rule& cel(int index) const;
  ::buf::validate::Rule* add_cel();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::buf::validate::Rule >&
      cel() const;

  // optional bool required = 25[json_name = "required"];
  bool has_required() const;
  private:
  bool _internal_has_required() const;
  public:
  void clear_required();
  bool required() const;
  void set_required(bool value);
  private:
  bool _internal_required() const;
  void _internal_set_required(bool value);
  public:

  // optional .buf.validate.Ignore ignore = 27[json_name = "ignore"];
  bool has_ignore() const;
  private:
  bool _internal_has_ignore() const;
  public:
  void clear_ignore();
  ::buf::validate::Ignore ignore() const;
  void set_ignore(::buf::validate::Ignore value);
  private:
  ::buf::validate::Ignore _internal_ignore() const;
  void _internal_set_ignore(::buf::validate::Ignore value);
  public:

  // .buf.validate.FloatRules float = 1[json_name = "float"];
  bool has_float_() const;
  private:
  bool _internal_has_float_() const;
  public:
  void clear_float_();
  const ::buf::validate::FloatRules& float_() const;
  ::buf::validate::FloatRules* release_float_();
  ::buf::validate::FloatRules* mutable_float_();
  void set_allocated_float_(::buf::validate::FloatRules* float_);
  private:
  const ::buf::validate::FloatRules& _internal_float_() const;
  ::buf::validate::FloatRules* _internal_mutable_float_();
  public:
  void unsafe_arena_set_allocated_float_(
      ::buf::validate::FloatRules* float_);
  ::buf::validate::FloatRules* unsafe_arena_release_float_();

  // .buf.validate.DoubleRules double = 2[json_name = "double"];
  bool has_double_() const;
  private:
  bool _internal_has_double_() const;
  public:
  void clear_double_();
  const ::buf::validate::DoubleRules& double_() const;
  ::buf::validate::DoubleRules* release_double_();
  ::buf::validate::DoubleRules* mutable_double_();
  void set_allocated_double_(::buf::validate::DoubleRules* double_);
  private:
  const ::buf::validate::DoubleRules& _internal_double_() const;
  ::buf::validate::DoubleRules* _internal_mutable_double_();
  public:
  void unsafe_arena_set_allocated_double_(
      ::buf::validate::DoubleRules* double_);
  ::buf::validate::DoubleRules* unsafe_arena_release_double_();

  // .buf.validate.Int32Rules int32 = 3[json_name = "int32"];
  bool has_int32() const;
  private:
  bool _internal_has_int32() const;
  public:
  void clear_int32();
  const ::buf::validate::Int32Rules& int32() const;
  ::buf::validate::Int32Rules* release_int32();
  ::buf::validate::Int32Rules* mutable_int32();
  void set_allocated_int32(::buf::validate::Int32Rules* int32);
  private:
  const ::buf::validate::Int32Rules& _internal_int32() const;
  ::buf::validate::Int32Rules* _internal_mutable_int32();
  public:
  void unsafe_arena_set_allocated_int32(
      ::buf::validate::Int32Rules* int32);
  ::buf::validate::Int32Rules* unsafe_arena_release_int32();

  // .buf.validate.Int64Rules int64 = 4[json_name = "int64"];
  bool has_int64() const;
  private:
  bool _internal_has_int64() const;
  public:
  void clear_int64();
  const ::buf::validate::Int64Rules& int64() const;
  ::buf::validate::Int64Rules* release_int64();
  ::buf::validate::Int64Rules* mutable_int64();
  void set_allocated_int64(::buf::validate::Int64Rules* int64);
  private:
  const ::buf::validate::Int64Rules& _internal_int64() const;
  ::buf::validate::Int64Rules* _internal_mutable_int64();
  public:
  void unsafe_arena_set_allocated_int64(
      ::buf::validate::Int64Rules* int64);
  ::buf::validate::Int64Rules* unsafe_arena_release_int64();

  // .buf.validate.UInt32Rules uint32 = 5[json_name = "uint32"];
  bool has_uint32() const;
  private:
  bool _internal_has_uint32() const;
  public:
  void clear_uint32();
  const ::buf::validate::UInt32Rules& uint32() const;
  ::buf::validate::UInt32Rules* release_uint32();
  ::buf::validate::UInt32Rules* mutable_uint32();
  void set_allocated_uint32(::buf::validate::UInt32Rules* uint32);
  private:
  const ::buf::validate::UInt32Rules& _internal_uint32() const;
  ::buf::validate::UInt32Rules* _internal_mutable_uint32();
  public:
  void unsafe_arena_set_allocated_uint32(
      ::buf::validate::UInt32Rules* uint32);
  ::buf::validate::UInt32Rules* unsafe_arena_release_uint32();

  // .buf.validate.UInt64Rules uint64 = 6[json_name = "uint64"];
  bool has_uint64() const;
  private:
  bool _internal_has_uint64() const;
  public:
  void clear_uint64();
  const ::buf::validate::UInt64Rules& uint64() const;
  ::buf::validate::UInt64Rules* release_uint64();
  ::buf::validate::UInt64Rules* mutable_uint64();
  void set_allocated_uint64(::buf::validate::UInt64Rules* uint64);
  private:
  const ::buf::validate::UInt64Rules& _internal_uint64() const;
  ::buf::validate::UInt64Rules* _internal_mutable_uint64();
  public:
  void unsafe_arena_set_allocated_uint64(
      ::buf::validate::UInt64Rules* uint64);
  ::buf::validate::UInt64Rules* unsafe_arena_release_uint64();

  // .buf.validate.SInt32Rules sint32 = 7[json_name = "sint32"];
  bool has_sint32() const;
  private:
  bool _internal_has_sint32() const;
  public:
  void clear_sint32();
  const ::buf::validate::SInt32Rules& sint32() const;
  ::buf::validate::SInt32Rules* release_sint32();
  ::buf::validate::SInt32Rules* mutable_sint32();
  void set_allocated_sint32(::buf::validate::SInt32Rules* sint32);
  private:
  const ::buf::validate::SInt32Rules& _internal_sint32() const;
  ::buf::validate::SInt32Rules* _internal_mutable_sint32();
  public:
  void unsafe_arena_set_allocated_sint32(
      ::buf::validate::SInt32Rules* sint32);
  ::buf::validate::SInt32Rules* unsafe_arena_release_sint32();

  // .buf.validate.SInt64Rules sint64 = 8[json_name = "sint64"];
  bool has_sint64() const;
  private:
  bool _internal_has_sint64() const;
  public:
  void clear_sint64();
  const ::buf::validate::SInt64Rules& sint64() const;
  ::buf::validate::SInt64Rules* release_sint64();
  ::buf::validate::SInt64Rules* mutable_sint64();
  void set_allocated_sint64(::buf::validate::SInt64Rules* sint64);
  private:
  const ::buf::validate::SInt64Rules& _internal_sint64() const;
  ::buf::validate::SInt64Rules* _internal_mutable_sint64();
  public:
  void unsafe_arena_set_allocated_sint64(
      ::buf::validate::SInt64Rules* sint64);
  ::buf::validate::SInt64Rules* unsafe_arena_release_sint64();

  // .buf.validate.Fixed32Rules fixed32 = 9[json_name = "fixed32"];
  bool has_fixed32() const;
  private:
  bool _internal_has_fixed32() const;
  public:
  void clear_fixed32();
  const ::buf::validate::Fixed32Rules& fixed32() const;
  ::buf::validate::Fixed32Rules* release_fixed32();
  ::buf::validate::Fixed32Rules* mutable_fixed32();
  void set_allocated_fixed32(::buf::validate::Fixed32Rules* fixed32);
  private:
  const ::buf::validate::Fixed32Rules& _internal_fixed32() const;
  ::buf::validate::Fixed32Rules* _internal_mutable_fixed32();
  public:
  void unsafe_arena_set_allocated_fixed32(
      ::buf::validate::Fixed32Rules* fixed32);
  ::buf::validate::Fixed32Rules* unsafe_arena_release_fixed32();

  // .buf.validate.Fixed64Rules fixed64 = 10[json_name = "fixed64"];
  bool has_fixed64() const;
  private:
  bool _internal_has_fixed64() const;
  public:
  void clear_fixed64();
  const ::buf::validate::Fixed64Rules& fixed64() const;
  ::buf::validate::Fixed64Rules* release_fixed64();
  ::buf::validate::Fixed64Rules* mutable_fixed64();
  void set_allocated_fixed64(::buf::validate::Fixed64Rules* fixed64);
  private:
  const ::buf::validate::Fixed64Rules& _internal_fixed64() const;
  ::buf::validate::Fixed64Rules* _internal_mutable_fixed64();
  public:
  void unsafe_arena_set_allocated_fixed64(
      ::buf::validate::Fixed64Rules* fixed64);
  ::buf::validate::Fixed64Rules* unsafe_arena_release_fixed64();

  // .buf.validate.SFixed32Rules sfixed32 = 11[json_name = "sfixed32"];
  bool has_sfixed32() const;
  private:
  bool _internal_has_sfixed32() const;
  public:
  void clear_sfixed32();
  const ::buf::validate::SFixed32Rules& sfixed32() const;
  ::buf::validate::SFixed32Rules* release_sfixed32();
  ::buf::validate::SFixed32Rules* mutable_sfixed32();
  void set_allocated_sfixed32(::buf::validate::SFixed32Rules* sfixed32);
  private:
  const ::buf::validate::SFixed32Rules& _internal_sfixed32() const;
  ::buf::validate::SFixed32Rules* _internal_mutable_sfixed32();
  public:
  void unsafe_arena_set_allocated_sfixed32(
      ::buf::validate::SFixed32Rules* sfixed32);
  ::buf::validate::SFixed32Rules* unsafe_arena_release_sfixed32();

  // .buf.validate.SFixed64Rules sfixed64 = 12[json_name = "sfixed64"];
  bool has_sfixed64() const;
  private:
  bool _internal_has_sfixed64() const;
  public:
  void clear_sfixed64();
  const ::buf::validate::SFixed64Rules& sfixed64() const;
  ::buf::validate::SFixed64Rules* release_sfixed64();
  ::buf::validate::SFixed64Rules* mutable_sfixed64();
  void set_allocated_sfixed64(::buf::validate::SFixed64Rules* sfixed64);
  private:
  const ::buf::validate::SFixed64Rules& _internal_sfixed64() const;
  ::buf::validate::SFixed64Rules* _internal_mutable_sfixed64();
  public:
  void unsafe_arena_set_allocated_sfixed64(
      ::buf::validate::SFixed64Rules* sfixed64);
  ::buf::validate::SFixed64Rules* unsafe_arena_release_sfixed64();

  // .buf.validate.BoolRules bool = 13[json_name = "bool"];
  bool has_bool_() const;
  private:
  bool _internal_has_bool_() const;
  public:
  void clear_bool_();
  const ::buf::validate::BoolRules& bool_() const;
  ::buf::validate::BoolRules* release_bool_();
  ::buf::validate::BoolRules* mutable_bool_();
  void set_allocated_bool_(::buf::validate::BoolRules* bool_);
  private:
  const ::buf::validate::BoolRules& _internal_bool_() const;
  ::buf::validate::BoolRules* _internal_mutable_bool_();
  public:
  void unsafe_arena_set_allocated_bool_(
      ::buf::validate::BoolRules* bool_);
  ::buf::validate::BoolRules* unsafe_arena_release_bool_();

  // .buf.validate.StringRules string = 14[json_name = "string"];
  bool has_string() const;
  private:
  bool _internal_has_string() const;
  public:
  void clear_string();
  const ::buf::validate::StringRules& string() const;
  ::buf::validate::StringRules* release_string();
  ::buf::validate::StringRules* mutable_string();
  void set_allocated_string(::buf::validate::StringRules* string);
  private:
  const ::buf::validate::StringRules& _internal_string() const;
  ::buf::validate::StringRules* _internal_mutable_string();
  public:
  void unsafe_arena_set_allocated_string(
      ::buf::validate::StringRules* string);
  ::buf::validate::StringRules* unsafe_arena_release_string();

  // .buf.validate.BytesRules bytes = 15[json_name = "bytes"];
  bool has_bytes() const;
  private:
  bool _internal_has_bytes() const;
  public:
  void clear_bytes();
  const ::buf::validate::BytesRules& bytes() const;
  ::buf::validate::BytesRules* release_bytes();
  ::buf::validate::BytesRules* mutable_bytes();
  void set_allocated_bytes(::buf::validate::BytesRules* bytes);
  private:
  const ::buf::validate::BytesRules& _internal_bytes() const;
  ::buf::validate::BytesRules* _internal_mutable_bytes();
  public:
  void unsafe_arena_set_allocated_bytes(
      ::buf::validate::BytesRules* bytes);
  ::buf::validate::BytesRules* unsafe_arena_release_bytes();

  // .buf.validate.EnumRules enum = 16[json_name = "enum"];
  bool has_enum_() const;
  private:
  bool _internal_has_enum_() const;
  public:
  void clear_enum_();
  const ::buf::validate::EnumRules& enum_() const;
  ::buf::validate::EnumRules* release_enum_();
  ::buf::validate::EnumRules* mutable_enum_();
  void set_allocated_enum_(::buf::validate::EnumRules* enum_);
  private:
  const ::buf::validate::EnumRules& _internal_enum_() const;
  ::buf::validate::EnumRules* _internal_mutable_enum_();
  public:
  void unsafe_arena_set_allocated_enum_(
      ::buf::validate::EnumRules* enum_);
  ::buf::validate::EnumRules* unsafe_arena_release_enum_();

  // .buf.validate.RepeatedRules repeated = 18[json_name = "repeated"];
  bool has_repeated() const;
  private:
  bool _internal_has_repeated() const;
  public:
  void clear_repeated();
  const ::buf::validate::RepeatedRules& repeated() const;
  ::buf::validate::RepeatedRules* release_repeated();
  ::buf::validate::RepeatedRules* mutable_repeated();
  void set_allocated_repeated(::buf::validate::RepeatedRules* repeated);
  private:
  const ::buf::validate::RepeatedRules& _internal_repeated() const;
  ::buf::validate::RepeatedRules* _internal_mutable_repeated();
  public:
  void unsafe_arena_set_allocated_repeated(
      ::buf::validate::RepeatedRules* repeated);
  ::buf::validate::RepeatedRules* unsafe_arena_release_repeated();

  // .buf.validate.MapRules map = 19[json_name = "map"];
  bool has_map() const;
  private:
  bool _internal_has_map() const;
  public:
  void clear_map();
  const ::buf::validate::MapRules& map() const;
  ::buf::validate::MapRules* release_map();
  ::buf::validate::MapRules* mutable_map();
  void set_allocated_map(::buf::validate::MapRules* map);
  private:
  const ::buf::validate::MapRules& _internal_map() const;
  ::buf::validate::MapRules* _internal_mutable_map();
  public:
  void unsafe_arena_set_allocated_map(
      ::buf::validate::MapRules* map);
  ::buf::validate::MapRules* unsafe_arena_release_map();

  // .buf.validate.AnyRules any = 20[json_name = "any"];
  bool has_any() const;
  private:
  bool _internal_has_any() const;
  public:
  void clear_any();
  const ::buf::validate::AnyRules& any() const;
  ::buf::validate::AnyRules* release_any();
  ::buf::validate::AnyRules* mutable_any();
  void set_allocated_any(::buf::validate::AnyRules* any);
  private:
  const ::buf::validate::AnyRules& _internal_any() const;
  ::buf::validate::AnyRules* _internal_mutable_any();
  public:
  void unsafe_arena_set_allocated_any(
      ::buf::validate::AnyRules* any);
  ::buf::validate::AnyRules* unsafe_arena_release_any();

  // .buf.validate.DurationRules duration = 21[json_name = "duration"];
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  const ::buf::validate::DurationRules& duration() const;
  ::buf::validate::DurationRules* release_duration();
  ::buf::validate::DurationRules* mutable_duration();
  void set_allocated_duration(::buf::validate::DurationRules* duration);
  private:
  const ::buf::validate::DurationRules& _internal_duration() const;
  ::buf::validate::DurationRules* _internal_mutable_duration();
  public:
  void unsafe_arena_set_allocated_duration(
      ::buf::validate::DurationRules* duration);
  ::buf::validate::DurationRules* unsafe_arena_release_duration();

  // .buf.validate.TimestampRules timestamp = 22[json_name = "timestamp"];
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const ::buf::validate::TimestampRules& timestamp() const;
  ::buf::validate::TimestampRules* release_timestamp();
  ::buf::validate::TimestampRules* mutable_timestamp();
  void set_allocated_timestamp(::buf::validate::TimestampRules* timestamp);
  private:
  const ::buf::validate::TimestampRules& _internal_timestamp() const;
  ::buf::validate::TimestampRules* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      ::buf::validate::TimestampRules* timestamp);
  ::buf::validate::TimestampRules* unsafe_arena_release_timestamp();

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:buf.validate.FieldRules)
 private:
  class _Internal;
  void set_has_float_();
  void set_has_double_();
  void set_has_int32();
  void set_has_int64();
  void set_has_uint32();
  void set_has_uint64();
  void set_has_sint32();
  void set_has_sint64();
  void set_has_fixed32();
  void set_has_fixed64();
  void set_has_sfixed32();
  void set_has_sfixed64();
  void set_has_bool_();
  void set_has_string();
  void set_has_bytes();
  void set_has_enum_();
  void set_has_repeated();
  void set_has_map();
  void set_has_any();
  void set_has_duration();
  void set_has_timestamp();

  inline bool has_type() const;
  inline void clear_has_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::buf::validate::Rule > cel_;
  bool required_;
  int ignore_;
  union TypeUnion {
    TypeUnion() {}
    ::buf::validate::FloatRules* float__;
    ::buf::validate::DoubleRules* double__;
    ::buf::validate::Int32Rules* int32_;
    ::buf::validate::Int64Rules* int64_;
    ::buf::validate::UInt32Rules* uint32_;
    ::buf::validate::UInt64Rules* uint64_;
    ::buf::validate::SInt32Rules* sint32_;
    ::buf::validate::SInt64Rules* sint64_;
    ::buf::validate::Fixed32Rules* fixed32_;
    ::buf::validate::Fixed64Rules* fixed64_;
    ::buf::validate::SFixed32Rules* sfixed32_;
    ::buf::validate::SFixed64Rules* sfixed64_;
    ::buf::validate::BoolRules* bool__;
    ::buf::validate::StringRules* string_;
    ::buf::validate::BytesRules* bytes_;
    ::buf::validate::EnumRules* enum__;
    ::buf::validate::RepeatedRules* repeated_;
    ::buf::validate::MapRules* map_;
    ::buf::validate::AnyRules* any_;
    ::buf::validate::DurationRules* duration_;
    ::buf::validate::TimestampRules* timestamp_;
  } type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_buf_2fvalidate_2fvalidate_2eproto;
};
// -------------------------------------------------------------------

class PredefinedRules PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:buf.validate.PredefinedRules) */ {
 public:
  inline PredefinedRules() : PredefinedRules(nullptr) {};
  virtual ~PredefinedRules();

  PredefinedRules(const PredefinedRules& from);
  PredefinedRules(PredefinedRules&& from) noexcept
    : PredefinedRules() {
    *this = ::std::move(from);
  }

  inline PredefinedRules& operator=(const PredefinedRules& from) {
    CopyFrom(from);
    return *this;
  }
  inline PredefinedRules& operator=(PredefinedRules&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PredefinedRules& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PredefinedRules* internal_default_instance() {
    return reinterpret_cast<const PredefinedRules*>(
               &_PredefinedRules_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PredefinedRules& a, PredefinedRules& b) {
    a.Swap(&b);
  }
  inline void Swap(PredefinedRules* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PredefinedRules* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PredefinedRules* New() const final {
    return CreateMaybeMessage<PredefinedRules>(nullptr);
  }

  PredefinedRules* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PredefinedRules>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PredefinedRules& from);
  void MergeFrom(const PredefinedRules& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PredefinedRules* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "buf.validate.PredefinedRules";
  }
  protected:
  explicit PredefinedRules(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_buf_2fvalidate_2fvalidate_2eproto);
    return ::descriptor_table_buf_2fvalidate_2fvalidate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCelFieldNumber = 1,
  };
  // repeated .buf.validate.Rule cel = 1[json_name = "cel"];
  int cel_size() const;
  private:
  int _internal_cel_size() const;
  public:
  void clear_cel();
  ::buf::validate::Rule* mutable_cel(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::buf::validate::Rule >*
      mutable_cel();
  private:
  const ::buf::validate::Rule& _internal_cel(int index) const;
  ::buf::validate::Rule* _internal_add_cel();
  public:
  const ::buf::validate::Rule& cel(int index) const;
  ::buf::validate::Rule* add_cel();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::buf::validate::Rule >&
      cel() const;

  // @@protoc_insertion_point(class_scope:buf.validate.PredefinedRules)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::buf::validate::Rule > cel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_buf_2fvalidate_2fvalidate_2eproto;
};
// -------------------------------------------------------------------

class FloatRules PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:buf.validate.FloatRules) */ {
 public:
  inline FloatRules() : FloatRules(nullptr) {};
  virtual ~FloatRules();

  FloatRules(const FloatRules& from);
  FloatRules(FloatRules&& from) noexcept
    : FloatRules() {
    *this = ::std::move(from);
  }

  inline FloatRules& operator=(const FloatRules& from) {
    CopyFrom(from);
    return *this;
  }
  inline FloatRules& operator=(FloatRules&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FloatRules& default_instance();

  enum LessThanCase {
    kLt = 2,
    kLte = 3,
    LESS_THAN_NOT_SET = 0,
  };

  enum GreaterThanCase {
    kGt = 4,
    kGte = 5,
    GREATER_THAN_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FloatRules* internal_default_instance() {
    return reinterpret_cast<const FloatRules*>(
               &_FloatRules_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(FloatRules& a, FloatRules& b) {
    a.Swap(&b);
  }
  inline void Swap(FloatRules* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FloatRules* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FloatRules* New() const final {
    return CreateMaybeMessage<FloatRules>(nullptr);
  }

  FloatRules* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FloatRules>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FloatRules& from);
  void MergeFrom(const FloatRules& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FloatRules* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "buf.validate.FloatRules";
  }
  protected:
  explicit FloatRules(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_buf_2fvalidate_2fvalidate_2eproto);
    return ::descriptor_table_buf_2fvalidate_2fvalidate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInFieldNumber = 6,
    kNotInFieldNumber = 7,
    kExampleFieldNumber = 9,
    kConstFieldNumber = 1,
    kFiniteFieldNumber = 8,
    kLtFieldNumber = 2,
    kLteFieldNumber = 3,
    kGtFieldNumber = 4,
    kGteFieldNumber = 5,
  };
  // repeated float in = 6[json_name = "in", (.buf.validate.predefined) = {
  int in_size() const;
  private:
  int _internal_in_size() const;
  public:
  void clear_in();
  private:
  float _internal_in(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_in() const;
  void _internal_add_in(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_in();
  public:
  float in(int index) const;
  void set_in(int index, float value);
  void add_in(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_in();

  // repeated float not_in = 7[json_name = "notIn", (.buf.validate.predefined) = {
  int not_in_size() const;
  private:
  int _internal_not_in_size() const;
  public:
  void clear_not_in();
  private:
  float _internal_not_in(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_not_in() const;
  void _internal_add_not_in(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_not_in();
  public:
  float not_in(int index) const;
  void set_not_in(int index, float value);
  void add_not_in(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      not_in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_not_in();

  // repeated float example = 9[json_name = "example", (.buf.validate.predefined) = {
  int example_size() const;
  private:
  int _internal_example_size() const;
  public:
  void clear_example();
  private:
  float _internal_example(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_example() const;
  void _internal_add_example(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_example();
  public:
  float example(int index) const;
  void set_example(int index, float value);
  void add_example(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      example() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_example();

  // optional float const = 1[json_name = "const", (.buf.validate.predefined) = {
  bool has_const_() const;
  private:
  bool _internal_has_const_() const;
  public:
  void clear_const_();
  float const_() const;
  void set_const_(float value);
  private:
  float _internal_const_() const;
  void _internal_set_const_(float value);
  public:

  // optional bool finite = 8[json_name = "finite", (.buf.validate.predefined) = {
  bool has_finite() const;
  private:
  bool _internal_has_finite() const;
  public:
  void clear_finite();
  bool finite() const;
  void set_finite(bool value);
  private:
  bool _internal_finite() const;
  void _internal_set_finite(bool value);
  public:

  // float lt = 2[json_name = "lt", (.buf.validate.predefined) = {
  bool has_lt() const;
  private:
  bool _internal_has_lt() const;
  public:
  void clear_lt();
  float lt() const;
  void set_lt(float value);
  private:
  float _internal_lt() const;
  void _internal_set_lt(float value);
  public:

  // float lte = 3[json_name = "lte", (.buf.validate.predefined) = {
  bool has_lte() const;
  private:
  bool _internal_has_lte() const;
  public:
  void clear_lte();
  float lte() const;
  void set_lte(float value);
  private:
  float _internal_lte() const;
  void _internal_set_lte(float value);
  public:

  // float gt = 4[json_name = "gt", (.buf.validate.predefined) = {
  bool has_gt() const;
  private:
  bool _internal_has_gt() const;
  public:
  void clear_gt();
  float gt() const;
  void set_gt(float value);
  private:
  float _internal_gt() const;
  void _internal_set_gt(float value);
  public:

  // float gte = 5[json_name = "gte", (.buf.validate.predefined) = {
  bool has_gte() const;
  private:
  bool _internal_has_gte() const;
  public:
  void clear_gte();
  float gte() const;
  void set_gte(float value);
  private:
  float _internal_gte() const;
  void _internal_set_gte(float value);
  public:

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(FloatRules)
  void clear_less_than();
  LessThanCase less_than_case() const;
  void clear_greater_than();
  GreaterThanCase greater_than_case() const;
  // @@protoc_insertion_point(class_scope:buf.validate.FloatRules)
 private:
  class _Internal;
  void set_has_lt();
  void set_has_lte();
  void set_has_gt();
  void set_has_gte();

  inline bool has_less_than() const;
  inline void clear_has_less_than();

  inline bool has_greater_than() const;
  inline void clear_has_greater_than();

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > in_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > not_in_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > example_;
  float const__;
  bool finite_;
  union LessThanUnion {
    LessThanUnion() {}
    float lt_;
    float lte_;
  } less_than_;
  union GreaterThanUnion {
    GreaterThanUnion() {}
    float gt_;
    float gte_;
  } greater_than_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_buf_2fvalidate_2fvalidate_2eproto;
};
// -------------------------------------------------------------------

class DoubleRules PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:buf.validate.DoubleRules) */ {
 public:
  inline DoubleRules() : DoubleRules(nullptr) {};
  virtual ~DoubleRules();

  DoubleRules(const DoubleRules& from);
  DoubleRules(DoubleRules&& from) noexcept
    : DoubleRules() {
    *this = ::std::move(from);
  }

  inline DoubleRules& operator=(const DoubleRules& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoubleRules& operator=(DoubleRules&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DoubleRules& default_instance();

  enum LessThanCase {
    kLt = 2,
    kLte = 3,
    LESS_THAN_NOT_SET = 0,
  };

  enum GreaterThanCase {
    kGt = 4,
    kGte = 5,
    GREATER_THAN_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DoubleRules* internal_default_instance() {
    return reinterpret_cast<const DoubleRules*>(
               &_DoubleRules_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DoubleRules& a, DoubleRules& b) {
    a.Swap(&b);
  }
  inline void Swap(DoubleRules* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DoubleRules* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DoubleRules* New() const final {
    return CreateMaybeMessage<DoubleRules>(nullptr);
  }

  DoubleRules* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoubleRules>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoubleRules& from);
  void MergeFrom(const DoubleRules& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoubleRules* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "buf.validate.DoubleRules";
  }
  protected:
  explicit DoubleRules(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_buf_2fvalidate_2fvalidate_2eproto);
    return ::descriptor_table_buf_2fvalidate_2fvalidate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInFieldNumber = 6,
    kNotInFieldNumber = 7,
    kExampleFieldNumber = 9,
    kConstFieldNumber = 1,
    kFiniteFieldNumber = 8,
    kLtFieldNumber = 2,
    kLteFieldNumber = 3,
    kGtFieldNumber = 4,
    kGteFieldNumber = 5,
  };
  // repeated double in = 6[json_name = "in", (.buf.validate.predefined) = {
  int in_size() const;
  private:
  int _internal_in_size() const;
  public:
  void clear_in();
  private:
  double _internal_in(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_in() const;
  void _internal_add_in(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_in();
  public:
  double in(int index) const;
  void set_in(int index, double value);
  void add_in(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_in();

  // repeated double not_in = 7[json_name = "notIn", (.buf.validate.predefined) = {
  int not_in_size() const;
  private:
  int _internal_not_in_size() const;
  public:
  void clear_not_in();
  private:
  double _internal_not_in(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_not_in() const;
  void _internal_add_not_in(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_not_in();
  public:
  double not_in(int index) const;
  void set_not_in(int index, double value);
  void add_not_in(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      not_in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_not_in();

  // repeated double example = 9[json_name = "example", (.buf.validate.predefined) = {
  int example_size() const;
  private:
  int _internal_example_size() const;
  public:
  void clear_example();
  private:
  double _internal_example(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_example() const;
  void _internal_add_example(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_example();
  public:
  double example(int index) const;
  void set_example(int index, double value);
  void add_example(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      example() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_example();

  // optional double const = 1[json_name = "const", (.buf.validate.predefined) = {
  bool has_const_() const;
  private:
  bool _internal_has_const_() const;
  public:
  void clear_const_();
  double const_() const;
  void set_const_(double value);
  private:
  double _internal_const_() const;
  void _internal_set_const_(double value);
  public:

  // optional bool finite = 8[json_name = "finite", (.buf.validate.predefined) = {
  bool has_finite() const;
  private:
  bool _internal_has_finite() const;
  public:
  void clear_finite();
  bool finite() const;
  void set_finite(bool value);
  private:
  bool _internal_finite() const;
  void _internal_set_finite(bool value);
  public:

  // double lt = 2[json_name = "lt", (.buf.validate.predefined) = {
  bool has_lt() const;
  private:
  bool _internal_has_lt() const;
  public:
  void clear_lt();
  double lt() const;
  void set_lt(double value);
  private:
  double _internal_lt() const;
  void _internal_set_lt(double value);
  public:

  // double lte = 3[json_name = "lte", (.buf.validate.predefined) = {
  bool has_lte() const;
  private:
  bool _internal_has_lte() const;
  public:
  void clear_lte();
  double lte() const;
  void set_lte(double value);
  private:
  double _internal_lte() const;
  void _internal_set_lte(double value);
  public:

  // double gt = 4[json_name = "gt", (.buf.validate.predefined) = {
  bool has_gt() const;
  private:
  bool _internal_has_gt() const;
  public:
  void clear_gt();
  double gt() const;
  void set_gt(double value);
  private:
  double _internal_gt() const;
  void _internal_set_gt(double value);
  public:

  // double gte = 5[json_name = "gte", (.buf.validate.predefined) = {
  bool has_gte() const;
  private:
  bool _internal_has_gte() const;
  public:
  void clear_gte();
  double gte() const;
  void set_gte(double value);
  private:
  double _internal_gte() const;
  void _internal_set_gte(double value);
  public:

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(DoubleRules)
  void clear_less_than();
  LessThanCase less_than_case() const;
  void clear_greater_than();
  GreaterThanCase greater_than_case() const;
  // @@protoc_insertion_point(class_scope:buf.validate.DoubleRules)
 private:
  class _Internal;
  void set_has_lt();
  void set_has_lte();
  void set_has_gt();
  void set_has_gte();

  inline bool has_less_than() const;
  inline void clear_has_less_than();

  inline bool has_greater_than() const;
  inline void clear_has_greater_than();

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > in_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > not_in_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > example_;
  double const__;
  bool finite_;
  union LessThanUnion {
    LessThanUnion() {}
    double lt_;
    double lte_;
  } less_than_;
  union GreaterThanUnion {
    GreaterThanUnion() {}
    double gt_;
    double gte_;
  } greater_than_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_buf_2fvalidate_2fvalidate_2eproto;
};
// -------------------------------------------------------------------

class Int32Rules PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:buf.validate.Int32Rules) */ {
 public:
  inline Int32Rules() : Int32Rules(nullptr) {};
  virtual ~Int32Rules();

  Int32Rules(const Int32Rules& from);
  Int32Rules(Int32Rules&& from) noexcept
    : Int32Rules() {
    *this = ::std::move(from);
  }

  inline Int32Rules& operator=(const Int32Rules& from) {
    CopyFrom(from);
    return *this;
  }
  inline Int32Rules& operator=(Int32Rules&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Int32Rules& default_instance();

  enum LessThanCase {
    kLt = 2,
    kLte = 3,
    LESS_THAN_NOT_SET = 0,
  };

  enum GreaterThanCase {
    kGt = 4,
    kGte = 5,
    GREATER_THAN_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Int32Rules* internal_default_instance() {
    return reinterpret_cast<const Int32Rules*>(
               &_Int32Rules_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Int32Rules& a, Int32Rules& b) {
    a.Swap(&b);
  }
  inline void Swap(Int32Rules* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Int32Rules* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Int32Rules* New() const final {
    return CreateMaybeMessage<Int32Rules>(nullptr);
  }

  Int32Rules* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Int32Rules>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Int32Rules& from);
  void MergeFrom(const Int32Rules& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Int32Rules* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "buf.validate.Int32Rules";
  }
  protected:
  explicit Int32Rules(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_buf_2fvalidate_2fvalidate_2eproto);
    return ::descriptor_table_buf_2fvalidate_2fvalidate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInFieldNumber = 6,
    kNotInFieldNumber = 7,
    kExampleFieldNumber = 8,
    kConstFieldNumber = 1,
    kLtFieldNumber = 2,
    kLteFieldNumber = 3,
    kGtFieldNumber = 4,
    kGteFieldNumber = 5,
  };
  // repeated int32 in = 6[json_name = "in", (.buf.validate.predefined) = {
  int in_size() const;
  private:
  int _internal_in_size() const;
  public:
  void clear_in();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_in(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_in() const;
  void _internal_add_in(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_in();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 in(int index) const;
  void set_in(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_in(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_in();

  // repeated int32 not_in = 7[json_name = "notIn", (.buf.validate.predefined) = {
  int not_in_size() const;
  private:
  int _internal_not_in_size() const;
  public:
  void clear_not_in();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_not_in(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_not_in() const;
  void _internal_add_not_in(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_not_in();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 not_in(int index) const;
  void set_not_in(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_not_in(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      not_in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_not_in();

  // repeated int32 example = 8[json_name = "example", (.buf.validate.predefined) = {
  int example_size() const;
  private:
  int _internal_example_size() const;
  public:
  void clear_example();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_example(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_example() const;
  void _internal_add_example(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_example();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 example(int index) const;
  void set_example(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_example(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      example() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_example();

  // optional int32 const = 1[json_name = "const", (.buf.validate.predefined) = {
  bool has_const_() const;
  private:
  bool _internal_has_const_() const;
  public:
  void clear_const_();
  ::PROTOBUF_NAMESPACE_ID::int32 const_() const;
  void set_const_(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_const_() const;
  void _internal_set_const_(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 lt = 2[json_name = "lt", (.buf.validate.predefined) = {
  bool has_lt() const;
  private:
  bool _internal_has_lt() const;
  public:
  void clear_lt();
  ::PROTOBUF_NAMESPACE_ID::int32 lt() const;
  void set_lt(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lt() const;
  void _internal_set_lt(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 lte = 3[json_name = "lte", (.buf.validate.predefined) = {
  bool has_lte() const;
  private:
  bool _internal_has_lte() const;
  public:
  void clear_lte();
  ::PROTOBUF_NAMESPACE_ID::int32 lte() const;
  void set_lte(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lte() const;
  void _internal_set_lte(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gt = 4[json_name = "gt", (.buf.validate.predefined) = {
  bool has_gt() const;
  private:
  bool _internal_has_gt() const;
  public:
  void clear_gt();
  ::PROTOBUF_NAMESPACE_ID::int32 gt() const;
  void set_gt(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gt() const;
  void _internal_set_gt(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gte = 5[json_name = "gte", (.buf.validate.predefined) = {
  bool has_gte() const;
  private:
  bool _internal_has_gte() const;
  public:
  void clear_gte();
  ::PROTOBUF_NAMESPACE_ID::int32 gte() const;
  void set_gte(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gte() const;
  void _internal_set_gte(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Int32Rules)
  void clear_less_than();
  LessThanCase less_than_case() const;
  void clear_greater_than();
  GreaterThanCase greater_than_case() const;
  // @@protoc_insertion_point(class_scope:buf.validate.Int32Rules)
 private:
  class _Internal;
  void set_has_lt();
  void set_has_lte();
  void set_has_gt();
  void set_has_gte();

  inline bool has_less_than() const;
  inline void clear_has_less_than();

  inline bool has_greater_than() const;
  inline void clear_has_greater_than();

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > in_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > not_in_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > example_;
  ::PROTOBUF_NAMESPACE_ID::int32 const__;
  union LessThanUnion {
    LessThanUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int32 lt_;
    ::PROTOBUF_NAMESPACE_ID::int32 lte_;
  } less_than_;
  union GreaterThanUnion {
    GreaterThanUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int32 gt_;
    ::PROTOBUF_NAMESPACE_ID::int32 gte_;
  } greater_than_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_buf_2fvalidate_2fvalidate_2eproto;
};
// -------------------------------------------------------------------

class Int64Rules PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:buf.validate.Int64Rules) */ {
 public:
  inline Int64Rules() : Int64Rules(nullptr) {};
  virtual ~Int64Rules();

  Int64Rules(const Int64Rules& from);
  Int64Rules(Int64Rules&& from) noexcept
    : Int64Rules() {
    *this = ::std::move(from);
  }

  inline Int64Rules& operator=(const Int64Rules& from) {
    CopyFrom(from);
    return *this;
  }
  inline Int64Rules& operator=(Int64Rules&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Int64Rules& default_instance();

  enum LessThanCase {
    kLt = 2,
    kLte = 3,
    LESS_THAN_NOT_SET = 0,
  };

  enum GreaterThanCase {
    kGt = 4,
    kGte = 5,
    GREATER_THAN_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Int64Rules* internal_default_instance() {
    return reinterpret_cast<const Int64Rules*>(
               &_Int64Rules_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Int64Rules& a, Int64Rules& b) {
    a.Swap(&b);
  }
  inline void Swap(Int64Rules* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Int64Rules* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Int64Rules* New() const final {
    return CreateMaybeMessage<Int64Rules>(nullptr);
  }

  Int64Rules* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Int64Rules>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Int64Rules& from);
  void MergeFrom(const Int64Rules& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Int64Rules* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "buf.validate.Int64Rules";
  }
  protected:
  explicit Int64Rules(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_buf_2fvalidate_2fvalidate_2eproto);
    return ::descriptor_table_buf_2fvalidate_2fvalidate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInFieldNumber = 6,
    kNotInFieldNumber = 7,
    kExampleFieldNumber = 9,
    kConstFieldNumber = 1,
    kLtFieldNumber = 2,
    kLteFieldNumber = 3,
    kGtFieldNumber = 4,
    kGteFieldNumber = 5,
  };
  // repeated int64 in = 6[json_name = "in", (.buf.validate.predefined) = {
  int in_size() const;
  private:
  int _internal_in_size() const;
  public:
  void clear_in();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_in(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_in() const;
  void _internal_add_in(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_in();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 in(int index) const;
  void set_in(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_in(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_in();

  // repeated int64 not_in = 7[json_name = "notIn", (.buf.validate.predefined) = {
  int not_in_size() const;
  private:
  int _internal_not_in_size() const;
  public:
  void clear_not_in();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_not_in(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_not_in() const;
  void _internal_add_not_in(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_not_in();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 not_in(int index) const;
  void set_not_in(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_not_in(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      not_in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_not_in();

  // repeated int64 example = 9[json_name = "example", (.buf.validate.predefined) = {
  int example_size() const;
  private:
  int _internal_example_size() const;
  public:
  void clear_example();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_example(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_example() const;
  void _internal_add_example(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_example();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 example(int index) const;
  void set_example(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_example(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      example() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_example();

  // optional int64 const = 1[json_name = "const", (.buf.validate.predefined) = {
  bool has_const_() const;
  private:
  bool _internal_has_const_() const;
  public:
  void clear_const_();
  ::PROTOBUF_NAMESPACE_ID::int64 const_() const;
  void set_const_(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_const_() const;
  void _internal_set_const_(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 lt = 2[json_name = "lt", (.buf.validate.predefined) = {
  bool has_lt() const;
  private:
  bool _internal_has_lt() const;
  public:
  void clear_lt();
  ::PROTOBUF_NAMESPACE_ID::int64 lt() const;
  void set_lt(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_lt() const;
  void _internal_set_lt(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 lte = 3[json_name = "lte", (.buf.validate.predefined) = {
  bool has_lte() const;
  private:
  bool _internal_has_lte() const;
  public:
  void clear_lte();
  ::PROTOBUF_NAMESPACE_ID::int64 lte() const;
  void set_lte(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_lte() const;
  void _internal_set_lte(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 gt = 4[json_name = "gt", (.buf.validate.predefined) = {
  bool has_gt() const;
  private:
  bool _internal_has_gt() const;
  public:
  void clear_gt();
  ::PROTOBUF_NAMESPACE_ID::int64 gt() const;
  void set_gt(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_gt() const;
  void _internal_set_gt(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 gte = 5[json_name = "gte", (.buf.validate.predefined) = {
  bool has_gte() const;
  private:
  bool _internal_has_gte() const;
  public:
  void clear_gte();
  ::PROTOBUF_NAMESPACE_ID::int64 gte() const;
  void set_gte(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_gte() const;
  void _internal_set_gte(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Int64Rules)
  void clear_less_than();
  LessThanCase less_than_case() const;
  void clear_greater_than();
  GreaterThanCase greater_than_case() const;
  // @@protoc_insertion_point(class_scope:buf.validate.Int64Rules)
 private:
  class _Internal;
  void set_has_lt();
  void set_has_lte();
  void set_has_gt();
  void set_has_gte();

  inline bool has_less_than() const;
  inline void clear_has_less_than();

  inline bool has_greater_than() const;
  inline void clear_has_greater_than();

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > in_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > not_in_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > example_;
  ::PROTOBUF_NAMESPACE_ID::int64 const__;
  union LessThanUnion {
    LessThanUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int64 lt_;
    ::PROTOBUF_NAMESPACE_ID::int64 lte_;
  } less_than_;
  union GreaterThanUnion {
    GreaterThanUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int64 gt_;
    ::PROTOBUF_NAMESPACE_ID::int64 gte_;
  } greater_than_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_buf_2fvalidate_2fvalidate_2eproto;
};
// -------------------------------------------------------------------

class UInt32Rules PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:buf.validate.UInt32Rules) */ {
 public:
  inline UInt32Rules() : UInt32Rules(nullptr) {};
  virtual ~UInt32Rules();

  UInt32Rules(const UInt32Rules& from);
  UInt32Rules(UInt32Rules&& from) noexcept
    : UInt32Rules() {
    *this = ::std::move(from);
  }

  inline UInt32Rules& operator=(const UInt32Rules& from) {
    CopyFrom(from);
    return *this;
  }
  inline UInt32Rules& operator=(UInt32Rules&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UInt32Rules& default_instance();

  enum LessThanCase {
    kLt = 2,
    kLte = 3,
    LESS_THAN_NOT_SET = 0,
  };

  enum GreaterThanCase {
    kGt = 4,
    kGte = 5,
    GREATER_THAN_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UInt32Rules* internal_default_instance() {
    return reinterpret_cast<const UInt32Rules*>(
               &_UInt32Rules_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(UInt32Rules& a, UInt32Rules& b) {
    a.Swap(&b);
  }
  inline void Swap(UInt32Rules* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UInt32Rules* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UInt32Rules* New() const final {
    return CreateMaybeMessage<UInt32Rules>(nullptr);
  }

  UInt32Rules* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UInt32Rules>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UInt32Rules& from);
  void MergeFrom(const UInt32Rules& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UInt32Rules* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "buf.validate.UInt32Rules";
  }
  protected:
  explicit UInt32Rules(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_buf_2fvalidate_2fvalidate_2eproto);
    return ::descriptor_table_buf_2fvalidate_2fvalidate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInFieldNumber = 6,
    kNotInFieldNumber = 7,
    kExampleFieldNumber = 8,
    kConstFieldNumber = 1,
    kLtFieldNumber = 2,
    kLteFieldNumber = 3,
    kGtFieldNumber = 4,
    kGteFieldNumber = 5,
  };
  // repeated uint32 in = 6[json_name = "in", (.buf.validate.predefined) = {
  int in_size() const;
  private:
  int _internal_in_size() const;
  public:
  void clear_in();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_in(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_in() const;
  void _internal_add_in(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_in();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 in(int index) const;
  void set_in(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_in(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_in();

  // repeated uint32 not_in = 7[json_name = "notIn", (.buf.validate.predefined) = {
  int not_in_size() const;
  private:
  int _internal_not_in_size() const;
  public:
  void clear_not_in();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_not_in(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_not_in() const;
  void _internal_add_not_in(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_not_in();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 not_in(int index) const;
  void set_not_in(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_not_in(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      not_in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_not_in();

  // repeated uint32 example = 8[json_name = "example", (.buf.validate.predefined) = {
  int example_size() const;
  private:
  int _internal_example_size() const;
  public:
  void clear_example();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_example(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_example() const;
  void _internal_add_example(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_example();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 example(int index) const;
  void set_example(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_example(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      example() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_example();

  // optional uint32 const = 1[json_name = "const", (.buf.validate.predefined) = {
  bool has_const_() const;
  private:
  bool _internal_has_const_() const;
  public:
  void clear_const_();
  ::PROTOBUF_NAMESPACE_ID::uint32 const_() const;
  void set_const_(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_const_() const;
  void _internal_set_const_(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 lt = 2[json_name = "lt", (.buf.validate.predefined) = {
  bool has_lt() const;
  private:
  bool _internal_has_lt() const;
  public:
  void clear_lt();
  ::PROTOBUF_NAMESPACE_ID::uint32 lt() const;
  void set_lt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lt() const;
  void _internal_set_lt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 lte = 3[json_name = "lte", (.buf.validate.predefined) = {
  bool has_lte() const;
  private:
  bool _internal_has_lte() const;
  public:
  void clear_lte();
  ::PROTOBUF_NAMESPACE_ID::uint32 lte() const;
  void set_lte(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lte() const;
  void _internal_set_lte(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 gt = 4[json_name = "gt", (.buf.validate.predefined) = {
  bool has_gt() const;
  private:
  bool _internal_has_gt() const;
  public:
  void clear_gt();
  ::PROTOBUF_NAMESPACE_ID::uint32 gt() const;
  void set_gt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gt() const;
  void _internal_set_gt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 gte = 5[json_name = "gte", (.buf.validate.predefined) = {
  bool has_gte() const;
  private:
  bool _internal_has_gte() const;
  public:
  void clear_gte();
  ::PROTOBUF_NAMESPACE_ID::uint32 gte() const;
  void set_gte(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gte() const;
  void _internal_set_gte(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(UInt32Rules)
  void clear_less_than();
  LessThanCase less_than_case() const;
  void clear_greater_than();
  GreaterThanCase greater_than_case() const;
  // @@protoc_insertion_point(class_scope:buf.validate.UInt32Rules)
 private:
  class _Internal;
  void set_has_lt();
  void set_has_lte();
  void set_has_gt();
  void set_has_gte();

  inline bool has_less_than() const;
  inline void clear_has_less_than();

  inline bool has_greater_than() const;
  inline void clear_has_greater_than();

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > in_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > not_in_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > example_;
  ::PROTOBUF_NAMESPACE_ID::uint32 const__;
  union LessThanUnion {
    LessThanUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint32 lt_;
    ::PROTOBUF_NAMESPACE_ID::uint32 lte_;
  } less_than_;
  union GreaterThanUnion {
    GreaterThanUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint32 gt_;
    ::PROTOBUF_NAMESPACE_ID::uint32 gte_;
  } greater_than_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_buf_2fvalidate_2fvalidate_2eproto;
};
// -------------------------------------------------------------------

class UInt64Rules PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:buf.validate.UInt64Rules) */ {
 public:
  inline UInt64Rules() : UInt64Rules(nullptr) {};
  virtual ~UInt64Rules();

  UInt64Rules(const UInt64Rules& from);
  UInt64Rules(UInt64Rules&& from) noexcept
    : UInt64Rules() {
    *this = ::std::move(from);
  }

  inline UInt64Rules& operator=(const UInt64Rules& from) {
    CopyFrom(from);
    return *this;
  }
  inline UInt64Rules& operator=(UInt64Rules&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UInt64Rules& default_instance();

  enum LessThanCase {
    kLt = 2,
    kLte = 3,
    LESS_THAN_NOT_SET = 0,
  };

  enum GreaterThanCase {
    kGt = 4,
    kGte = 5,
    GREATER_THAN_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UInt64Rules* internal_default_instance() {
    return reinterpret_cast<const UInt64Rules*>(
               &_UInt64Rules_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(UInt64Rules& a, UInt64Rules& b) {
    a.Swap(&b);
  }
  inline void Swap(UInt64Rules* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UInt64Rules* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UInt64Rules* New() const final {
    return CreateMaybeMessage<UInt64Rules>(nullptr);
  }

  UInt64Rules* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UInt64Rules>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UInt64Rules& from);
  void MergeFrom(const UInt64Rules& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UInt64Rules* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "buf.validate.UInt64Rules";
  }
  protected:
  explicit UInt64Rules(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_buf_2fvalidate_2fvalidate_2eproto);
    return ::descriptor_table_buf_2fvalidate_2fvalidate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInFieldNumber = 6,
    kNotInFieldNumber = 7,
    kExampleFieldNumber = 8,
    kConstFieldNumber = 1,
    kLtFieldNumber = 2,
    kLteFieldNumber = 3,
    kGtFieldNumber = 4,
    kGteFieldNumber = 5,
  };
  // repeated uint64 in = 6[json_name = "in", (.buf.validate.predefined) = {
  int in_size() const;
  private:
  int _internal_in_size() const;
  public:
  void clear_in();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_in(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_in() const;
  void _internal_add_in(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_in();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 in(int index) const;
  void set_in(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_in(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_in();

  // repeated uint64 not_in = 7[json_name = "notIn", (.buf.validate.predefined) = {
  int not_in_size() const;
  private:
  int _internal_not_in_size() const;
  public:
  void clear_not_in();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_not_in(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_not_in() const;
  void _internal_add_not_in(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_not_in();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 not_in(int index) const;
  void set_not_in(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_not_in(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      not_in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_not_in();

  // repeated uint64 example = 8[json_name = "example", (.buf.validate.predefined) = {
  int example_size() const;
  private:
  int _internal_example_size() const;
  public:
  void clear_example();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_example(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_example() const;
  void _internal_add_example(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_example();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 example(int index) const;
  void set_example(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_example(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      example() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_example();

  // optional uint64 const = 1[json_name = "const", (.buf.validate.predefined) = {
  bool has_const_() const;
  private:
  bool _internal_has_const_() const;
  public:
  void clear_const_();
  ::PROTOBUF_NAMESPACE_ID::uint64 const_() const;
  void set_const_(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_const_() const;
  void _internal_set_const_(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 lt = 2[json_name = "lt", (.buf.validate.predefined) = {
  bool has_lt() const;
  private:
  bool _internal_has_lt() const;
  public:
  void clear_lt();
  ::PROTOBUF_NAMESPACE_ID::uint64 lt() const;
  void set_lt(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lt() const;
  void _internal_set_lt(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 lte = 3[json_name = "lte", (.buf.validate.predefined) = {
  bool has_lte() const;
  private:
  bool _internal_has_lte() const;
  public:
  void clear_lte();
  ::PROTOBUF_NAMESPACE_ID::uint64 lte() const;
  void set_lte(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lte() const;
  void _internal_set_lte(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 gt = 4[json_name = "gt", (.buf.validate.predefined) = {
  bool has_gt() const;
  private:
  bool _internal_has_gt() const;
  public:
  void clear_gt();
  ::PROTOBUF_NAMESPACE_ID::uint64 gt() const;
  void set_gt(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_gt() const;
  void _internal_set_gt(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 gte = 5[json_name = "gte", (.buf.validate.predefined) = {
  bool has_gte() const;
  private:
  bool _internal_has_gte() const;
  public:
  void clear_gte();
  ::PROTOBUF_NAMESPACE_ID::uint64 gte() const;
  void set_gte(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_gte() const;
  void _internal_set_gte(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(UInt64Rules)
  void clear_less_than();
  LessThanCase less_than_case() const;
  void clear_greater_than();
  GreaterThanCase greater_than_case() const;
  // @@protoc_insertion_point(class_scope:buf.validate.UInt64Rules)
 private:
  class _Internal;
  void set_has_lt();
  void set_has_lte();
  void set_has_gt();
  void set_has_gte();

  inline bool has_less_than() const;
  inline void clear_has_less_than();

  inline bool has_greater_than() const;
  inline void clear_has_greater_than();

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > in_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > not_in_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > example_;
  ::PROTOBUF_NAMESPACE_ID::uint64 const__;
  union LessThanUnion {
    LessThanUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint64 lt_;
    ::PROTOBUF_NAMESPACE_ID::uint64 lte_;
  } less_than_;
  union GreaterThanUnion {
    GreaterThanUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint64 gt_;
    ::PROTOBUF_NAMESPACE_ID::uint64 gte_;
  } greater_than_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_buf_2fvalidate_2fvalidate_2eproto;
};
// -------------------------------------------------------------------

class SInt32Rules PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:buf.validate.SInt32Rules) */ {
 public:
  inline SInt32Rules() : SInt32Rules(nullptr) {};
  virtual ~SInt32Rules();

  SInt32Rules(const SInt32Rules& from);
  SInt32Rules(SInt32Rules&& from) noexcept
    : SInt32Rules() {
    *this = ::std::move(from);
  }

  inline SInt32Rules& operator=(const SInt32Rules& from) {
    CopyFrom(from);
    return *this;
  }
  inline SInt32Rules& operator=(SInt32Rules&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SInt32Rules& default_instance();

  enum LessThanCase {
    kLt = 2,
    kLte = 3,
    LESS_THAN_NOT_SET = 0,
  };

  enum GreaterThanCase {
    kGt = 4,
    kGte = 5,
    GREATER_THAN_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SInt32Rules* internal_default_instance() {
    return reinterpret_cast<const SInt32Rules*>(
               &_SInt32Rules_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SInt32Rules& a, SInt32Rules& b) {
    a.Swap(&b);
  }
  inline void Swap(SInt32Rules* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SInt32Rules* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SInt32Rules* New() const final {
    return CreateMaybeMessage<SInt32Rules>(nullptr);
  }

  SInt32Rules* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SInt32Rules>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SInt32Rules& from);
  void MergeFrom(const SInt32Rules& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SInt32Rules* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "buf.validate.SInt32Rules";
  }
  protected:
  explicit SInt32Rules(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_buf_2fvalidate_2fvalidate_2eproto);
    return ::descriptor_table_buf_2fvalidate_2fvalidate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInFieldNumber = 6,
    kNotInFieldNumber = 7,
    kExampleFieldNumber = 8,
    kConstFieldNumber = 1,
    kLtFieldNumber = 2,
    kLteFieldNumber = 3,
    kGtFieldNumber = 4,
    kGteFieldNumber = 5,
  };
  // repeated sint32 in = 6[json_name = "in", (.buf.validate.predefined) = {
  int in_size() const;
  private:
  int _internal_in_size() const;
  public:
  void clear_in();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_in(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_in() const;
  void _internal_add_in(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_in();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 in(int index) const;
  void set_in(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_in(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_in();

  // repeated sint32 not_in = 7[json_name = "notIn", (.buf.validate.predefined) = {
  int not_in_size() const;
  private:
  int _internal_not_in_size() const;
  public:
  void clear_not_in();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_not_in(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_not_in() const;
  void _internal_add_not_in(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_not_in();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 not_in(int index) const;
  void set_not_in(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_not_in(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      not_in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_not_in();

  // repeated sint32 example = 8[json_name = "example", (.buf.validate.predefined) = {
  int example_size() const;
  private:
  int _internal_example_size() const;
  public:
  void clear_example();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_example(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_example() const;
  void _internal_add_example(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_example();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 example(int index) const;
  void set_example(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_example(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      example() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_example();

  // optional sint32 const = 1[json_name = "const", (.buf.validate.predefined) = {
  bool has_const_() const;
  private:
  bool _internal_has_const_() const;
  public:
  void clear_const_();
  ::PROTOBUF_NAMESPACE_ID::int32 const_() const;
  void set_const_(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_const_() const;
  void _internal_set_const_(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 lt = 2[json_name = "lt", (.buf.validate.predefined) = {
  bool has_lt() const;
  private:
  bool _internal_has_lt() const;
  public:
  void clear_lt();
  ::PROTOBUF_NAMESPACE_ID::int32 lt() const;
  void set_lt(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lt() const;
  void _internal_set_lt(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 lte = 3[json_name = "lte", (.buf.validate.predefined) = {
  bool has_lte() const;
  private:
  bool _internal_has_lte() const;
  public:
  void clear_lte();
  ::PROTOBUF_NAMESPACE_ID::int32 lte() const;
  void set_lte(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lte() const;
  void _internal_set_lte(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 gt = 4[json_name = "gt", (.buf.validate.predefined) = {
  bool has_gt() const;
  private:
  bool _internal_has_gt() const;
  public:
  void clear_gt();
  ::PROTOBUF_NAMESPACE_ID::int32 gt() const;
  void set_gt(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gt() const;
  void _internal_set_gt(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 gte = 5[json_name = "gte", (.buf.validate.predefined) = {
  bool has_gte() const;
  private:
  bool _internal_has_gte() const;
  public:
  void clear_gte();
  ::PROTOBUF_NAMESPACE_ID::int32 gte() const;
  void set_gte(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gte() const;
  void _internal_set_gte(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(SInt32Rules)
  void clear_less_than();
  LessThanCase less_than_case() const;
  void clear_greater_than();
  GreaterThanCase greater_than_case() const;
  // @@protoc_insertion_point(class_scope:buf.validate.SInt32Rules)
 private:
  class _Internal;
  void set_has_lt();
  void set_has_lte();
  void set_has_gt();
  void set_has_gte();

  inline bool has_less_than() const;
  inline void clear_has_less_than();

  inline bool has_greater_than() const;
  inline void clear_has_greater_than();

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > in_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > not_in_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > example_;
  ::PROTOBUF_NAMESPACE_ID::int32 const__;
  union LessThanUnion {
    LessThanUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int32 lt_;
    ::PROTOBUF_NAMESPACE_ID::int32 lte_;
  } less_than_;
  union GreaterThanUnion {
    GreaterThanUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int32 gt_;
    ::PROTOBUF_NAMESPACE_ID::int32 gte_;
  } greater_than_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_buf_2fvalidate_2fvalidate_2eproto;
};
// -------------------------------------------------------------------

class SInt64Rules PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:buf.validate.SInt64Rules) */ {
 public:
  inline SInt64Rules() : SInt64Rules(nullptr) {};
  virtual ~SInt64Rules();

  SInt64Rules(const SInt64Rules& from);
  SInt64Rules(SInt64Rules&& from) noexcept
    : SInt64Rules() {
    *this = ::std::move(from);
  }

  inline SInt64Rules& operator=(const SInt64Rules& from) {
    CopyFrom(from);
    return *this;
  }
  inline SInt64Rules& operator=(SInt64Rules&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SInt64Rules& default_instance();

  enum LessThanCase {
    kLt = 2,
    kLte = 3,
    LESS_THAN_NOT_SET = 0,
  };

  enum GreaterThanCase {
    kGt = 4,
    kGte = 5,
    GREATER_THAN_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SInt64Rules* internal_default_instance() {
    return reinterpret_cast<const SInt64Rules*>(
               &_SInt64Rules_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SInt64Rules& a, SInt64Rules& b) {
    a.Swap(&b);
  }
  inline void Swap(SInt64Rules* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SInt64Rules* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SInt64Rules* New() const final {
    return CreateMaybeMessage<SInt64Rules>(nullptr);
  }

  SInt64Rules* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SInt64Rules>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SInt64Rules& from);
  void MergeFrom(const SInt64Rules& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SInt64Rules* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "buf.validate.SInt64Rules";
  }
  protected:
  explicit SInt64Rules(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_buf_2fvalidate_2fvalidate_2eproto);
    return ::descriptor_table_buf_2fvalidate_2fvalidate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInFieldNumber = 6,
    kNotInFieldNumber = 7,
    kExampleFieldNumber = 8,
    kConstFieldNumber = 1,
    kLtFieldNumber = 2,
    kLteFieldNumber = 3,
    kGtFieldNumber = 4,
    kGteFieldNumber = 5,
  };
  // repeated sint64 in = 6[json_name = "in", (.buf.validate.predefined) = {
  int in_size() const;
  private:
  int _internal_in_size() const;
  public:
  void clear_in();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_in(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_in() const;
  void _internal_add_in(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_in();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 in(int index) const;
  void set_in(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_in(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_in();

  // repeated sint64 not_in = 7[json_name = "notIn", (.buf.validate.predefined) = {
  int not_in_size() const;
  private:
  int _internal_not_in_size() const;
  public:
  void clear_not_in();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_not_in(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_not_in() const;
  void _internal_add_not_in(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_not_in();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 not_in(int index) const;
  void set_not_in(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_not_in(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      not_in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_not_in();

  // repeated sint64 example = 8[json_name = "example", (.buf.validate.predefined) = {
  int example_size() const;
  private:
  int _internal_example_size() const;
  public:
  void clear_example();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_example(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_example() const;
  void _internal_add_example(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_example();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 example(int index) const;
  void set_example(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_example(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      example() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_example();

  // optional sint64 const = 1[json_name = "const", (.buf.validate.predefined) = {
  bool has_const_() const;
  private:
  bool _internal_has_const_() const;
  public:
  void clear_const_();
  ::PROTOBUF_NAMESPACE_ID::int64 const_() const;
  void set_const_(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_const_() const;
  void _internal_set_const_(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // sint64 lt = 2[json_name = "lt", (.buf.validate.predefined) = {
  bool has_lt() const;
  private:
  bool _internal_has_lt() const;
  public:
  void clear_lt();
  ::PROTOBUF_NAMESPACE_ID::int64 lt() const;
  void set_lt(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_lt() const;
  void _internal_set_lt(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // sint64 lte = 3[json_name = "lte", (.buf.validate.predefined) = {
  bool has_lte() const;
  private:
  bool _internal_has_lte() const;
  public:
  void clear_lte();
  ::PROTOBUF_NAMESPACE_ID::int64 lte() const;
  void set_lte(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_lte() const;
  void _internal_set_lte(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // sint64 gt = 4[json_name = "gt", (.buf.validate.predefined) = {
  bool has_gt() const;
  private:
  bool _internal_has_gt() const;
  public:
  void clear_gt();
  ::PROTOBUF_NAMESPACE_ID::int64 gt() const;
  void set_gt(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_gt() const;
  void _internal_set_gt(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // sint64 gte = 5[json_name = "gte", (.buf.validate.predefined) = {
  bool has_gte() const;
  private:
  bool _internal_has_gte() const;
  public:
  void clear_gte();
  ::PROTOBUF_NAMESPACE_ID::int64 gte() const;
  void set_gte(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_gte() const;
  void _internal_set_gte(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(SInt64Rules)
  void clear_less_than();
  LessThanCase less_than_case() const;
  void clear_greater_than();
  GreaterThanCase greater_than_case() const;
  // @@protoc_insertion_point(class_scope:buf.validate.SInt64Rules)
 private:
  class _Internal;
  void set_has_lt();
  void set_has_lte();
  void set_has_gt();
  void set_has_gte();

  inline bool has_less_than() const;
  inline void clear_has_less_than();

  inline bool has_greater_than() const;
  inline void clear_has_greater_than();

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > in_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > not_in_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > example_;
  ::PROTOBUF_NAMESPACE_ID::int64 const__;
  union LessThanUnion {
    LessThanUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int64 lt_;
    ::PROTOBUF_NAMESPACE_ID::int64 lte_;
  } less_than_;
  union GreaterThanUnion {
    GreaterThanUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int64 gt_;
    ::PROTOBUF_NAMESPACE_ID::int64 gte_;
  } greater_than_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_buf_2fvalidate_2fvalidate_2eproto;
};
// -------------------------------------------------------------------

class Fixed32Rules PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:buf.validate.Fixed32Rules) */ {
 public:
  inline Fixed32Rules() : Fixed32Rules(nullptr) {};
  virtual ~Fixed32Rules();

  Fixed32Rules(const Fixed32Rules& from);
  Fixed32Rules(Fixed32Rules&& from) noexcept
    : Fixed32Rules() {
    *this = ::std::move(from);
  }

  inline Fixed32Rules& operator=(const Fixed32Rules& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fixed32Rules& operator=(Fixed32Rules&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Fixed32Rules& default_instance();

  enum LessThanCase {
    kLt = 2,
    kLte = 3,
    LESS_THAN_NOT_SET = 0,
  };

  enum GreaterThanCase {
    kGt = 4,
    kGte = 5,
    GREATER_THAN_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Fixed32Rules* internal_default_instance() {
    return reinterpret_cast<const Fixed32Rules*>(
               &_Fixed32Rules_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Fixed32Rules& a, Fixed32Rules& b) {
    a.Swap(&b);
  }
  inline void Swap(Fixed32Rules* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Fixed32Rules* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Fixed32Rules* New() const final {
    return CreateMaybeMessage<Fixed32Rules>(nullptr);
  }

  Fixed32Rules* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Fixed32Rules>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Fixed32Rules& from);
  void MergeFrom(const Fixed32Rules& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fixed32Rules* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "buf.validate.Fixed32Rules";
  }
  protected:
  explicit Fixed32Rules(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_buf_2fvalidate_2fvalidate_2eproto);
    return ::descriptor_table_buf_2fvalidate_2fvalidate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInFieldNumber = 6,
    kNotInFieldNumber = 7,
    kExampleFieldNumber = 8,
    kConstFieldNumber = 1,
    kLtFieldNumber = 2,
    kLteFieldNumber = 3,
    kGtFieldNumber = 4,
    kGteFieldNumber = 5,
  };
  // repeated fixed32 in = 6[json_name = "in", (.buf.validate.predefined) = {
  int in_size() const;
  private:
  int _internal_in_size() const;
  public:
  void clear_in();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_in(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_in() const;
  void _internal_add_in(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_in();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 in(int index) const;
  void set_in(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_in(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_in();

  // repeated fixed32 not_in = 7[json_name = "notIn", (.buf.validate.predefined) = {
  int not_in_size() const;
  private:
  int _internal_not_in_size() const;
  public:
  void clear_not_in();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_not_in(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_not_in() const;
  void _internal_add_not_in(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_not_in();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 not_in(int index) const;
  void set_not_in(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_not_in(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      not_in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_not_in();

  // repeated fixed32 example = 8[json_name = "example", (.buf.validate.predefined) = {
  int example_size() const;
  private:
  int _internal_example_size() const;
  public:
  void clear_example();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_example(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_example() const;
  void _internal_add_example(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_example();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 example(int index) const;
  void set_example(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_example(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      example() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_example();

  // optional fixed32 const = 1[json_name = "const", (.buf.validate.predefined) = {
  bool has_const_() const;
  private:
  bool _internal_has_const_() const;
  public:
  void clear_const_();
  ::PROTOBUF_NAMESPACE_ID::uint32 const_() const;
  void set_const_(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_const_() const;
  void _internal_set_const_(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // fixed32 lt = 2[json_name = "lt", (.buf.validate.predefined) = {
  bool has_lt() const;
  private:
  bool _internal_has_lt() const;
  public:
  void clear_lt();
  ::PROTOBUF_NAMESPACE_ID::uint32 lt() const;
  void set_lt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lt() const;
  void _internal_set_lt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // fixed32 lte = 3[json_name = "lte", (.buf.validate.predefined) = {
  bool has_lte() const;
  private:
  bool _internal_has_lte() const;
  public:
  void clear_lte();
  ::PROTOBUF_NAMESPACE_ID::uint32 lte() const;
  void set_lte(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lte() const;
  void _internal_set_lte(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // fixed32 gt = 4[json_name = "gt", (.buf.validate.predefined) = {
  bool has_gt() const;
  private:
  bool _internal_has_gt() const;
  public:
  void clear_gt();
  ::PROTOBUF_NAMESPACE_ID::uint32 gt() const;
  void set_gt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gt() const;
  void _internal_set_gt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // fixed32 gte = 5[json_name = "gte", (.buf.validate.predefined) = {
  bool has_gte() const;
  private:
  bool _internal_has_gte() const;
  public:
  void clear_gte();
  ::PROTOBUF_NAMESPACE_ID::uint32 gte() const;
  void set_gte(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gte() const;
  void _internal_set_gte(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Fixed32Rules)
  void clear_less_than();
  LessThanCase less_than_case() const;
  void clear_greater_than();
  GreaterThanCase greater_than_case() const;
  // @@protoc_insertion_point(class_scope:buf.validate.Fixed32Rules)
 private:
  class _Internal;
  void set_has_lt();
  void set_has_lte();
  void set_has_gt();
  void set_has_gte();

  inline bool has_less_than() const;
  inline void clear_has_less_than();

  inline bool has_greater_than() const;
  inline void clear_has_greater_than();

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > in_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > not_in_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > example_;
  ::PROTOBUF_NAMESPACE_ID::uint32 const__;
  union LessThanUnion {
    LessThanUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint32 lt_;
    ::PROTOBUF_NAMESPACE_ID::uint32 lte_;
  } less_than_;
  union GreaterThanUnion {
    GreaterThanUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint32 gt_;
    ::PROTOBUF_NAMESPACE_ID::uint32 gte_;
  } greater_than_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_buf_2fvalidate_2fvalidate_2eproto;
};
// -------------------------------------------------------------------

class Fixed64Rules PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:buf.validate.Fixed64Rules) */ {
 public:
  inline Fixed64Rules() : Fixed64Rules(nullptr) {};
  virtual ~Fixed64Rules();

  Fixed64Rules(const Fixed64Rules& from);
  Fixed64Rules(Fixed64Rules&& from) noexcept
    : Fixed64Rules() {
    *this = ::std::move(from);
  }

  inline Fixed64Rules& operator=(const Fixed64Rules& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fixed64Rules& operator=(Fixed64Rules&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Fixed64Rules& default_instance();

  enum LessThanCase {
    kLt = 2,
    kLte = 3,
    LESS_THAN_NOT_SET = 0,
  };

  enum GreaterThanCase {
    kGt = 4,
    kGte = 5,
    GREATER_THAN_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Fixed64Rules* internal_default_instance() {
    return reinterpret_cast<const Fixed64Rules*>(
               &_Fixed64Rules_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Fixed64Rules& a, Fixed64Rules& b) {
    a.Swap(&b);
  }
  inline void Swap(Fixed64Rules* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Fixed64Rules* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Fixed64Rules* New() const final {
    return CreateMaybeMessage<Fixed64Rules>(nullptr);
  }

  Fixed64Rules* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Fixed64Rules>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Fixed64Rules& from);
  void MergeFrom(const Fixed64Rules& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fixed64Rules* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "buf.validate.Fixed64Rules";
  }
  protected:
  explicit Fixed64Rules(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_buf_2fvalidate_2fvalidate_2eproto);
    return ::descriptor_table_buf_2fvalidate_2fvalidate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInFieldNumber = 6,
    kNotInFieldNumber = 7,
    kExampleFieldNumber = 8,
    kConstFieldNumber = 1,
    kLtFieldNumber = 2,
    kLteFieldNumber = 3,
    kGtFieldNumber = 4,
    kGteFieldNumber = 5,
  };
  // repeated fixed64 in = 6[json_name = "in", (.buf.validate.predefined) = {
  int in_size() const;
  private:
  int _internal_in_size() const;
  public:
  void clear_in();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_in(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_in() const;
  void _internal_add_in(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_in();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 in(int index) const;
  void set_in(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_in(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_in();

  // repeated fixed64 not_in = 7[json_name = "notIn", (.buf.validate.predefined) = {
  int not_in_size() const;
  private:
  int _internal_not_in_size() const;
  public:
  void clear_not_in();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_not_in(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_not_in() const;
  void _internal_add_not_in(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_not_in();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 not_in(int index) const;
  void set_not_in(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_not_in(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      not_in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_not_in();

  // repeated fixed64 example = 8[json_name = "example", (.buf.validate.predefined) = {
  int example_size() const;
  private:
  int _internal_example_size() const;
  public:
  void clear_example();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_example(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_example() const;
  void _internal_add_example(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_example();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 example(int index) const;
  void set_example(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_example(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      example() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_example();

  // optional fixed64 const = 1[json_name = "const", (.buf.validate.predefined) = {
  bool has_const_() const;
  private:
  bool _internal_has_const_() const;
  public:
  void clear_const_();
  ::PROTOBUF_NAMESPACE_ID::uint64 const_() const;
  void set_const_(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_const_() const;
  void _internal_set_const_(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // fixed64 lt = 2[json_name = "lt", (.buf.validate.predefined) = {
  bool has_lt() const;
  private:
  bool _internal_has_lt() const;
  public:
  void clear_lt();
  ::PROTOBUF_NAMESPACE_ID::uint64 lt() const;
  void set_lt(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lt() const;
  void _internal_set_lt(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // fixed64 lte = 3[json_name = "lte", (.buf.validate.predefined) = {
  bool has_lte() const;
  private:
  bool _internal_has_lte() const;
  public:
  void clear_lte();
  ::PROTOBUF_NAMESPACE_ID::uint64 lte() const;
  void set_lte(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lte() const;
  void _internal_set_lte(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // fixed64 gt = 4[json_name = "gt", (.buf.validate.predefined) = {
  bool has_gt() const;
  private:
  bool _internal_has_gt() const;
  public:
  void clear_gt();
  ::PROTOBUF_NAMESPACE_ID::uint64 gt() const;
  void set_gt(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_gt() const;
  void _internal_set_gt(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // fixed64 gte = 5[json_name = "gte", (.buf.validate.predefined) = {
  bool has_gte() const;
  private:
  bool _internal_has_gte() const;
  public:
  void clear_gte();
  ::PROTOBUF_NAMESPACE_ID::uint64 gte() const;
  void set_gte(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_gte() const;
  void _internal_set_gte(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Fixed64Rules)
  void clear_less_than();
  LessThanCase less_than_case() const;
  void clear_greater_than();
  GreaterThanCase greater_than_case() const;
  // @@protoc_insertion_point(class_scope:buf.validate.Fixed64Rules)
 private:
  class _Internal;
  void set_has_lt();
  void set_has_lte();
  void set_has_gt();
  void set_has_gte();

  inline bool has_less_than() const;
  inline void clear_has_less_than();

  inline bool has_greater_than() const;
  inline void clear_has_greater_than();

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > in_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > not_in_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > example_;
  ::PROTOBUF_NAMESPACE_ID::uint64 const__;
  union LessThanUnion {
    LessThanUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint64 lt_;
    ::PROTOBUF_NAMESPACE_ID::uint64 lte_;
  } less_than_;
  union GreaterThanUnion {
    GreaterThanUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint64 gt_;
    ::PROTOBUF_NAMESPACE_ID::uint64 gte_;
  } greater_than_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_buf_2fvalidate_2fvalidate_2eproto;
};
// -------------------------------------------------------------------

class SFixed32Rules PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:buf.validate.SFixed32Rules) */ {
 public:
  inline SFixed32Rules() : SFixed32Rules(nullptr) {};
  virtual ~SFixed32Rules();

  SFixed32Rules(const SFixed32Rules& from);
  SFixed32Rules(SFixed32Rules&& from) noexcept
    : SFixed32Rules() {
    *this = ::std::move(from);
  }

  inline SFixed32Rules& operator=(const SFixed32Rules& from) {
    CopyFrom(from);
    return *this;
  }
  inline SFixed32Rules& operator=(SFixed32Rules&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SFixed32Rules& default_instance();

  enum LessThanCase {
    kLt = 2,
    kLte = 3,
    LESS_THAN_NOT_SET = 0,
  };

  enum GreaterThanCase {
    kGt = 4,
    kGte = 5,
    GREATER_THAN_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFixed32Rules* internal_default_instance() {
    return reinterpret_cast<const SFixed32Rules*>(
               &_SFixed32Rules_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SFixed32Rules& a, SFixed32Rules& b) {
    a.Swap(&b);
  }
  inline void Swap(SFixed32Rules* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SFixed32Rules* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SFixed32Rules* New() const final {
    return CreateMaybeMessage<SFixed32Rules>(nullptr);
  }

  SFixed32Rules* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SFixed32Rules>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SFixed32Rules& from);
  void MergeFrom(const SFixed32Rules& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFixed32Rules* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "buf.validate.SFixed32Rules";
  }
  protected:
  explicit SFixed32Rules(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_buf_2fvalidate_2fvalidate_2eproto);
    return ::descriptor_table_buf_2fvalidate_2fvalidate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInFieldNumber = 6,
    kNotInFieldNumber = 7,
    kExampleFieldNumber = 8,
    kConstFieldNumber = 1,
    kLtFieldNumber = 2,
    kLteFieldNumber = 3,
    kGtFieldNumber = 4,
    kGteFieldNumber = 5,
  };
  // repeated sfixed32 in = 6[json_name = "in", (.buf.validate.predefined) = {
  int in_size() const;
  private:
  int _internal_in_size() const;
  public:
  void clear_in();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_in(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_in() const;
  void _internal_add_in(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_in();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 in(int index) const;
  void set_in(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_in(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_in();

  // repeated sfixed32 not_in = 7[json_name = "notIn", (.buf.validate.predefined) = {
  int not_in_size() const;
  private:
  int _internal_not_in_size() const;
  public:
  void clear_not_in();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_not_in(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_not_in() const;
  void _internal_add_not_in(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_not_in();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 not_in(int index) const;
  void set_not_in(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_not_in(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      not_in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_not_in();

  // repeated sfixed32 example = 8[json_name = "example", (.buf.validate.predefined) = {
  int example_size() const;
  private:
  int _internal_example_size() const;
  public:
  void clear_example();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_example(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_example() const;
  void _internal_add_example(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_example();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 example(int index) const;
  void set_example(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_example(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      example() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_example();

  // optional sfixed32 const = 1[json_name = "const", (.buf.validate.predefined) = {
  bool has_const_() const;
  private:
  bool _internal_has_const_() const;
  public:
  void clear_const_();
  ::PROTOBUF_NAMESPACE_ID::int32 const_() const;
  void set_const_(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_const_() const;
  void _internal_set_const_(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sfixed32 lt = 2[json_name = "lt", (.buf.validate.predefined) = {
  bool has_lt() const;
  private:
  bool _internal_has_lt() const;
  public:
  void clear_lt();
  ::PROTOBUF_NAMESPACE_ID::int32 lt() const;
  void set_lt(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lt() const;
  void _internal_set_lt(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sfixed32 lte = 3[json_name = "lte", (.buf.validate.predefined) = {
  bool has_lte() const;
  private:
  bool _internal_has_lte() const;
  public:
  void clear_lte();
  ::PROTOBUF_NAMESPACE_ID::int32 lte() const;
  void set_lte(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lte() const;
  void _internal_set_lte(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sfixed32 gt = 4[json_name = "gt", (.buf.validate.predefined) = {
  bool has_gt() const;
  private:
  bool _internal_has_gt() const;
  public:
  void clear_gt();
  ::PROTOBUF_NAMESPACE_ID::int32 gt() const;
  void set_gt(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gt() const;
  void _internal_set_gt(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sfixed32 gte = 5[json_name = "gte", (.buf.validate.predefined) = {
  bool has_gte() const;
  private:
  bool _internal_has_gte() const;
  public:
  void clear_gte();
  ::PROTOBUF_NAMESPACE_ID::int32 gte() const;
  void set_gte(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gte() const;
  void _internal_set_gte(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(SFixed32Rules)
  void clear_less_than();
  LessThanCase less_than_case() const;
  void clear_greater_than();
  GreaterThanCase greater_than_case() const;
  // @@protoc_insertion_point(class_scope:buf.validate.SFixed32Rules)
 private:
  class _Internal;
  void set_has_lt();
  void set_has_lte();
  void set_has_gt();
  void set_has_gte();

  inline bool has_less_than() const;
  inline void clear_has_less_than();

  inline bool has_greater_than() const;
  inline void clear_has_greater_than();

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > in_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > not_in_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > example_;
  ::PROTOBUF_NAMESPACE_ID::int32 const__;
  union LessThanUnion {
    LessThanUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int32 lt_;
    ::PROTOBUF_NAMESPACE_ID::int32 lte_;
  } less_than_;
  union GreaterThanUnion {
    GreaterThanUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int32 gt_;
    ::PROTOBUF_NAMESPACE_ID::int32 gte_;
  } greater_than_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_buf_2fvalidate_2fvalidate_2eproto;
};
// -------------------------------------------------------------------

class SFixed64Rules PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:buf.validate.SFixed64Rules) */ {
 public:
  inline SFixed64Rules() : SFixed64Rules(nullptr) {};
  virtual ~SFixed64Rules();

  SFixed64Rules(const SFixed64Rules& from);
  SFixed64Rules(SFixed64Rules&& from) noexcept
    : SFixed64Rules() {
    *this = ::std::move(from);
  }

  inline SFixed64Rules& operator=(const SFixed64Rules& from) {
    CopyFrom(from);
    return *this;
  }
  inline SFixed64Rules& operator=(SFixed64Rules&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SFixed64Rules& default_instance();

  enum LessThanCase {
    kLt = 2,
    kLte = 3,
    LESS_THAN_NOT_SET = 0,
  };

  enum GreaterThanCase {
    kGt = 4,
    kGte = 5,
    GREATER_THAN_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SFixed64Rules* internal_default_instance() {
    return reinterpret_cast<const SFixed64Rules*>(
               &_SFixed64Rules_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SFixed64Rules& a, SFixed64Rules& b) {
    a.Swap(&b);
  }
  inline void Swap(SFixed64Rules* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SFixed64Rules* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SFixed64Rules* New() const final {
    return CreateMaybeMessage<SFixed64Rules>(nullptr);
  }

  SFixed64Rules* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SFixed64Rules>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SFixed64Rules& from);
  void MergeFrom(const SFixed64Rules& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SFixed64Rules* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "buf.validate.SFixed64Rules";
  }
  protected:
  explicit SFixed64Rules(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_buf_2fvalidate_2fvalidate_2eproto);
    return ::descriptor_table_buf_2fvalidate_2fvalidate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInFieldNumber = 6,
    kNotInFieldNumber = 7,
    kExampleFieldNumber = 8,
    kConstFieldNumber = 1,
    kLtFieldNumber = 2,
    kLteFieldNumber = 3,
    kGtFieldNumber = 4,
    kGteFieldNumber = 5,
  };
  // repeated sfixed64 in = 6[json_name = "in", (.buf.validate.predefined) = {
  int in_size() const;
  private:
  int _internal_in_size() const;
  public:
  void clear_in();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_in(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_in() const;
  void _internal_add_in(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_in();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 in(int index) const;
  void set_in(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_in(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_in();

  // repeated sfixed64 not_in = 7[json_name = "notIn", (.buf.validate.predefined) = {
  int not_in_size() const;
  private:
  int _internal_not_in_size() const;
  public:
  void clear_not_in();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_not_in(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_not_in() const;
  void _internal_add_not_in(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_not_in();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 not_in(int index) const;
  void set_not_in(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_not_in(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      not_in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_not_in();

  // repeated sfixed64 example = 8[json_name = "example", (.buf.validate.predefined) = {
  int example_size() const;
  private:
  int _internal_example_size() const;
  public:
  void clear_example();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_example(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_example() const;
  void _internal_add_example(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_example();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 example(int index) const;
  void set_example(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_example(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      example() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_example();

  // optional sfixed64 const = 1[json_name = "const", (.buf.validate.predefined) = {
  bool has_const_() const;
  private:
  bool _internal_has_const_() const;
  public:
  void clear_const_();
  ::PROTOBUF_NAMESPACE_ID::int64 const_() const;
  void set_const_(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_const_() const;
  void _internal_set_const_(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // sfixed64 lt = 2[json_name = "lt", (.buf.validate.predefined) = {
  bool has_lt() const;
  private:
  bool _internal_has_lt() const;
  public:
  void clear_lt();
  ::PROTOBUF_NAMESPACE_ID::int64 lt() const;
  void set_lt(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_lt() const;
  void _internal_set_lt(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // sfixed64 lte = 3[json_name = "lte", (.buf.validate.predefined) = {
  bool has_lte() const;
  private:
  bool _internal_has_lte() const;
  public:
  void clear_lte();
  ::PROTOBUF_NAMESPACE_ID::int64 lte() const;
  void set_lte(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_lte() const;
  void _internal_set_lte(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // sfixed64 gt = 4[json_name = "gt", (.buf.validate.predefined) = {
  bool has_gt() const;
  private:
  bool _internal_has_gt() const;
  public:
  void clear_gt();
  ::PROTOBUF_NAMESPACE_ID::int64 gt() const;
  void set_gt(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_gt() const;
  void _internal_set_gt(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // sfixed64 gte = 5[json_name = "gte", (.buf.validate.predefined) = {
  bool has_gte() const;
  private:
  bool _internal_has_gte() const;
  public:
  void clear_gte();
  ::PROTOBUF_NAMESPACE_ID::int64 gte() const;
  void set_gte(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_gte() const;
  void _internal_set_gte(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(SFixed64Rules)
  void clear_less_than();
  LessThanCase less_than_case() const;
  void clear_greater_than();
  GreaterThanCase greater_than_case() const;
  // @@protoc_insertion_point(class_scope:buf.validate.SFixed64Rules)
 private:
  class _Internal;
  void set_has_lt();
  void set_has_lte();
  void set_has_gt();
  void set_has_gte();

  inline bool has_less_than() const;
  inline void clear_has_less_than();

  inline bool has_greater_than() const;
  inline void clear_has_greater_than();

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > in_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > not_in_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > example_;
  ::PROTOBUF_NAMESPACE_ID::int64 const__;
  union LessThanUnion {
    LessThanUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int64 lt_;
    ::PROTOBUF_NAMESPACE_ID::int64 lte_;
  } less_than_;
  union GreaterThanUnion {
    GreaterThanUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int64 gt_;
    ::PROTOBUF_NAMESPACE_ID::int64 gte_;
  } greater_than_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_buf_2fvalidate_2fvalidate_2eproto;
};
// -------------------------------------------------------------------

class BoolRules PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:buf.validate.BoolRules) */ {
 public:
  inline BoolRules() : BoolRules(nullptr) {};
  virtual ~BoolRules();

  BoolRules(const BoolRules& from);
  BoolRules(BoolRules&& from) noexcept
    : BoolRules() {
    *this = ::std::move(from);
  }

  inline BoolRules& operator=(const BoolRules& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoolRules& operator=(BoolRules&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BoolRules& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BoolRules* internal_default_instance() {
    return reinterpret_cast<const BoolRules*>(
               &_BoolRules_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(BoolRules& a, BoolRules& b) {
    a.Swap(&b);
  }
  inline void Swap(BoolRules* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoolRules* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BoolRules* New() const final {
    return CreateMaybeMessage<BoolRules>(nullptr);
  }

  BoolRules* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BoolRules>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BoolRules& from);
  void MergeFrom(const BoolRules& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoolRules* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "buf.validate.BoolRules";
  }
  protected:
  explicit BoolRules(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_buf_2fvalidate_2fvalidate_2eproto);
    return ::descriptor_table_buf_2fvalidate_2fvalidate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExampleFieldNumber = 2,
    kConstFieldNumber = 1,
  };
  // repeated bool example = 2[json_name = "example", (.buf.validate.predefined) = {
  int example_size() const;
  private:
  int _internal_example_size() const;
  public:
  void clear_example();
  private:
  bool _internal_example(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_example() const;
  void _internal_add_example(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_example();
  public:
  bool example(int index) const;
  void set_example(int index, bool value);
  void add_example(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      example() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_example();

  // optional bool const = 1[json_name = "const", (.buf.validate.predefined) = {
  bool has_const_() const;
  private:
  bool _internal_has_const_() const;
  public:
  void clear_const_();
  bool const_() const;
  void set_const_(bool value);
  private:
  bool _internal_const_() const;
  void _internal_set_const_(bool value);
  public:

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(BoolRules)
  // @@protoc_insertion_point(class_scope:buf.validate.BoolRules)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > example_;
  bool const__;
  friend struct ::TableStruct_buf_2fvalidate_2fvalidate_2eproto;
};
// -------------------------------------------------------------------

class StringRules PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:buf.validate.StringRules) */ {
 public:
  inline StringRules() : StringRules(nullptr) {};
  virtual ~StringRules();

  StringRules(const StringRules& from);
  StringRules(StringRules&& from) noexcept
    : StringRules() {
    *this = ::std::move(from);
  }

  inline StringRules& operator=(const StringRules& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringRules& operator=(StringRules&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StringRules& default_instance();

  enum WellKnownCase {
    kEmail = 12,
    kHostname = 13,
    kIp = 14,
    kIpv4 = 15,
    kIpv6 = 16,
    kUri = 17,
    kUriRef = 18,
    kAddress = 21,
    kUuid = 22,
    kTuuid = 33,
    kIpWithPrefixlen = 26,
    kIpv4WithPrefixlen = 27,
    kIpv6WithPrefixlen = 28,
    kIpPrefix = 29,
    kIpv4Prefix = 30,
    kIpv6Prefix = 31,
    kHostAndPort = 32,
    kWellKnownRegex = 24,
    WELL_KNOWN_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StringRules* internal_default_instance() {
    return reinterpret_cast<const StringRules*>(
               &_StringRules_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(StringRules& a, StringRules& b) {
    a.Swap(&b);
  }
  inline void Swap(StringRules* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringRules* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StringRules* New() const final {
    return CreateMaybeMessage<StringRules>(nullptr);
  }

  StringRules* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StringRules>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StringRules& from);
  void MergeFrom(const StringRules& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringRules* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "buf.validate.StringRules";
  }
  protected:
  explicit StringRules(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_buf_2fvalidate_2fvalidate_2eproto);
    return ::descriptor_table_buf_2fvalidate_2fvalidate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInFieldNumber = 10,
    kNotInFieldNumber = 11,
    kExampleFieldNumber = 34,
    kConstFieldNumber = 1,
    kPatternFieldNumber = 6,
    kPrefixFieldNumber = 7,
    kSuffixFieldNumber = 8,
    kContainsFieldNumber = 9,
    kNotContainsFieldNumber = 23,
    kMinLenFieldNumber = 2,
    kMaxLenFieldNumber = 3,
    kMinBytesFieldNumber = 4,
    kMaxBytesFieldNumber = 5,
    kStrictFieldNumber = 25,
    kLenFieldNumber = 19,
    kLenBytesFieldNumber = 20,
    kEmailFieldNumber = 12,
    kHostnameFieldNumber = 13,
    kIpFieldNumber = 14,
    kIpv4FieldNumber = 15,
    kIpv6FieldNumber = 16,
    kUriFieldNumber = 17,
    kUriRefFieldNumber = 18,
    kAddressFieldNumber = 21,
    kUuidFieldNumber = 22,
    kTuuidFieldNumber = 33,
    kIpWithPrefixlenFieldNumber = 26,
    kIpv4WithPrefixlenFieldNumber = 27,
    kIpv6WithPrefixlenFieldNumber = 28,
    kIpPrefixFieldNumber = 29,
    kIpv4PrefixFieldNumber = 30,
    kIpv6PrefixFieldNumber = 31,
    kHostAndPortFieldNumber = 32,
    kWellKnownRegexFieldNumber = 24,
  };
  // repeated string in = 10[json_name = "in", (.buf.validate.predefined) = {
  int in_size() const;
  private:
  int _internal_in_size() const;
  public:
  void clear_in();
  const std::string& in(int index) const;
  std::string* mutable_in(int index);
  void set_in(int index, const std::string& value);
  void set_in(int index, std::string&& value);
  void set_in(int index, const char* value);
  void set_in(int index, const char* value, size_t size);
  std::string* add_in();
  void add_in(const std::string& value);
  void add_in(std::string&& value);
  void add_in(const char* value);
  void add_in(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_in();
  private:
  const std::string& _internal_in(int index) const;
  std::string* _internal_add_in();
  public:

  // repeated string not_in = 11[json_name = "notIn", (.buf.validate.predefined) = {
  int not_in_size() const;
  private:
  int _internal_not_in_size() const;
  public:
  void clear_not_in();
  const std::string& not_in(int index) const;
  std::string* mutable_not_in(int index);
  void set_not_in(int index, const std::string& value);
  void set_not_in(int index, std::string&& value);
  void set_not_in(int index, const char* value);
  void set_not_in(int index, const char* value, size_t size);
  std::string* add_not_in();
  void add_not_in(const std::string& value);
  void add_not_in(std::string&& value);
  void add_not_in(const char* value);
  void add_not_in(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& not_in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_not_in();
  private:
  const std::string& _internal_not_in(int index) const;
  std::string* _internal_add_not_in();
  public:

  // repeated string example = 34[json_name = "example", (.buf.validate.predefined) = {
  int example_size() const;
  private:
  int _internal_example_size() const;
  public:
  void clear_example();
  const std::string& example(int index) const;
  std::string* mutable_example(int index);
  void set_example(int index, const std::string& value);
  void set_example(int index, std::string&& value);
  void set_example(int index, const char* value);
  void set_example(int index, const char* value, size_t size);
  std::string* add_example();
  void add_example(const std::string& value);
  void add_example(std::string&& value);
  void add_example(const char* value);
  void add_example(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& example() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_example();
  private:
  const std::string& _internal_example(int index) const;
  std::string* _internal_add_example();
  public:

  // optional string const = 1[json_name = "const", (.buf.validate.predefined) = {
  bool has_const_() const;
  private:
  bool _internal_has_const_() const;
  public:
  void clear_const_();
  const std::string& const_() const;
  void set_const_(const std::string& value);
  void set_const_(std::string&& value);
  void set_const_(const char* value);
  void set_const_(const char* value, size_t size);
  std::string* mutable_const_();
  std::string* release_const_();
  void set_allocated_const_(std::string* const_);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_const_();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_const_(
      std::string* const_);
  private:
  const std::string& _internal_const_() const;
  void _internal_set_const_(const std::string& value);
  std::string* _internal_mutable_const_();
  public:

  // optional string pattern = 6[json_name = "pattern", (.buf.validate.predefined) = {
  bool has_pattern() const;
  private:
  bool _internal_has_pattern() const;
  public:
  void clear_pattern();
  const std::string& pattern() const;
  void set_pattern(const std::string& value);
  void set_pattern(std::string&& value);
  void set_pattern(const char* value);
  void set_pattern(const char* value, size_t size);
  std::string* mutable_pattern();
  std::string* release_pattern();
  void set_allocated_pattern(std::string* pattern);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pattern();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pattern(
      std::string* pattern);
  private:
  const std::string& _internal_pattern() const;
  void _internal_set_pattern(const std::string& value);
  std::string* _internal_mutable_pattern();
  public:

  // optional string prefix = 7[json_name = "prefix", (.buf.validate.predefined) = {
  bool has_prefix() const;
  private:
  bool _internal_has_prefix() const;
  public:
  void clear_prefix();
  const std::string& prefix() const;
  void set_prefix(const std::string& value);
  void set_prefix(std::string&& value);
  void set_prefix(const char* value);
  void set_prefix(const char* value, size_t size);
  std::string* mutable_prefix();
  std::string* release_prefix();
  void set_allocated_prefix(std::string* prefix);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_prefix();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_prefix(
      std::string* prefix);
  private:
  const std::string& _internal_prefix() const;
  void _internal_set_prefix(const std::string& value);
  std::string* _internal_mutable_prefix();
  public:

  // optional string suffix = 8[json_name = "suffix", (.buf.validate.predefined) = {
  bool has_suffix() const;
  private:
  bool _internal_has_suffix() const;
  public:
  void clear_suffix();
  const std::string& suffix() const;
  void set_suffix(const std::string& value);
  void set_suffix(std::string&& value);
  void set_suffix(const char* value);
  void set_suffix(const char* value, size_t size);
  std::string* mutable_suffix();
  std::string* release_suffix();
  void set_allocated_suffix(std::string* suffix);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_suffix();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_suffix(
      std::string* suffix);
  private:
  const std::string& _internal_suffix() const;
  void _internal_set_suffix(const std::string& value);
  std::string* _internal_mutable_suffix();
  public:

  // optional string contains = 9[json_name = "contains", (.buf.validate.predefined) = {
  bool has_contains() const;
  private:
  bool _internal_has_contains() const;
  public:
  void clear_contains();
  const std::string& contains() const;
  void set_contains(const std::string& value);
  void set_contains(std::string&& value);
  void set_contains(const char* value);
  void set_contains(const char* value, size_t size);
  std::string* mutable_contains();
  std::string* release_contains();
  void set_allocated_contains(std::string* contains);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_contains();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_contains(
      std::string* contains);
  private:
  const std::string& _internal_contains() const;
  void _internal_set_contains(const std::string& value);
  std::string* _internal_mutable_contains();
  public:

  // optional string not_contains = 23[json_name = "notContains", (.buf.validate.predefined) = {
  bool has_not_contains() const;
  private:
  bool _internal_has_not_contains() const;
  public:
  void clear_not_contains();
  const std::string& not_contains() const;
  void set_not_contains(const std::string& value);
  void set_not_contains(std::string&& value);
  void set_not_contains(const char* value);
  void set_not_contains(const char* value, size_t size);
  std::string* mutable_not_contains();
  std::string* release_not_contains();
  void set_allocated_not_contains(std::string* not_contains);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_not_contains();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_not_contains(
      std::string* not_contains);
  private:
  const std::string& _internal_not_contains() const;
  void _internal_set_not_contains(const std::string& value);
  std::string* _internal_mutable_not_contains();
  public:

  // optional uint64 min_len = 2[json_name = "minLen", (.buf.validate.predefined) = {
  bool has_min_len() const;
  private:
  bool _internal_has_min_len() const;
  public:
  void clear_min_len();
  ::PROTOBUF_NAMESPACE_ID::uint64 min_len() const;
  void set_min_len(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_min_len() const;
  void _internal_set_min_len(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 max_len = 3[json_name = "maxLen", (.buf.validate.predefined) = {
  bool has_max_len() const;
  private:
  bool _internal_has_max_len() const;
  public:
  void clear_max_len();
  ::PROTOBUF_NAMESPACE_ID::uint64 max_len() const;
  void set_max_len(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_max_len() const;
  void _internal_set_max_len(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 min_bytes = 4[json_name = "minBytes", (.buf.validate.predefined) = {
  bool has_min_bytes() const;
  private:
  bool _internal_has_min_bytes() const;
  public:
  void clear_min_bytes();
  ::PROTOBUF_NAMESPACE_ID::uint64 min_bytes() const;
  void set_min_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_min_bytes() const;
  void _internal_set_min_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 max_bytes = 5[json_name = "maxBytes", (.buf.validate.predefined) = {
  bool has_max_bytes() const;
  private:
  bool _internal_has_max_bytes() const;
  public:
  void clear_max_bytes();
  ::PROTOBUF_NAMESPACE_ID::uint64 max_bytes() const;
  void set_max_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_max_bytes() const;
  void _internal_set_max_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool strict = 25[json_name = "strict"];
  bool has_strict() const;
  private:
  bool _internal_has_strict() const;
  public:
  void clear_strict();
  bool strict() const;
  void set_strict(bool value);
  private:
  bool _internal_strict() const;
  void _internal_set_strict(bool value);
  public:

  // optional uint64 len = 19[json_name = "len", (.buf.validate.predefined) = {
  bool has_len() const;
  private:
  bool _internal_has_len() const;
  public:
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::uint64 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_len() const;
  void _internal_set_len(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 len_bytes = 20[json_name = "lenBytes", (.buf.validate.predefined) = {
  bool has_len_bytes() const;
  private:
  bool _internal_has_len_bytes() const;
  public:
  void clear_len_bytes();
  ::PROTOBUF_NAMESPACE_ID::uint64 len_bytes() const;
  void set_len_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_len_bytes() const;
  void _internal_set_len_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool email = 12[json_name = "email", (.buf.validate.predefined) = {
  bool has_email() const;
  private:
  bool _internal_has_email() const;
  public:
  void clear_email();
  bool email() const;
  void set_email(bool value);
  private:
  bool _internal_email() const;
  void _internal_set_email(bool value);
  public:

  // bool hostname = 13[json_name = "hostname", (.buf.validate.predefined) = {
  bool has_hostname() const;
  private:
  bool _internal_has_hostname() const;
  public:
  void clear_hostname();
  bool hostname() const;
  void set_hostname(bool value);
  private:
  bool _internal_hostname() const;
  void _internal_set_hostname(bool value);
  public:

  // bool ip = 14[json_name = "ip", (.buf.validate.predefined) = {
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  bool ip() const;
  void set_ip(bool value);
  private:
  bool _internal_ip() const;
  void _internal_set_ip(bool value);
  public:

  // bool ipv4 = 15[json_name = "ipv4", (.buf.validate.predefined) = {
  bool has_ipv4() const;
  private:
  bool _internal_has_ipv4() const;
  public:
  void clear_ipv4();
  bool ipv4() const;
  void set_ipv4(bool value);
  private:
  bool _internal_ipv4() const;
  void _internal_set_ipv4(bool value);
  public:

  // bool ipv6 = 16[json_name = "ipv6", (.buf.validate.predefined) = {
  bool has_ipv6() const;
  private:
  bool _internal_has_ipv6() const;
  public:
  void clear_ipv6();
  bool ipv6() const;
  void set_ipv6(bool value);
  private:
  bool _internal_ipv6() const;
  void _internal_set_ipv6(bool value);
  public:

  // bool uri = 17[json_name = "uri", (.buf.validate.predefined) = {
  bool has_uri() const;
  private:
  bool _internal_has_uri() const;
  public:
  void clear_uri();
  bool uri() const;
  void set_uri(bool value);
  private:
  bool _internal_uri() const;
  void _internal_set_uri(bool value);
  public:

  // bool uri_ref = 18[json_name = "uriRef", (.buf.validate.predefined) = {
  bool has_uri_ref() const;
  private:
  bool _internal_has_uri_ref() const;
  public:
  void clear_uri_ref();
  bool uri_ref() const;
  void set_uri_ref(bool value);
  private:
  bool _internal_uri_ref() const;
  void _internal_set_uri_ref(bool value);
  public:

  // bool address = 21[json_name = "address", (.buf.validate.predefined) = {
  bool has_address() const;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  bool address() const;
  void set_address(bool value);
  private:
  bool _internal_address() const;
  void _internal_set_address(bool value);
  public:

  // bool uuid = 22[json_name = "uuid", (.buf.validate.predefined) = {
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  bool uuid() const;
  void set_uuid(bool value);
  private:
  bool _internal_uuid() const;
  void _internal_set_uuid(bool value);
  public:

  // bool tuuid = 33[json_name = "tuuid", (.buf.validate.predefined) = {
  bool has_tuuid() const;
  private:
  bool _internal_has_tuuid() const;
  public:
  void clear_tuuid();
  bool tuuid() const;
  void set_tuuid(bool value);
  private:
  bool _internal_tuuid() const;
  void _internal_set_tuuid(bool value);
  public:

  // bool ip_with_prefixlen = 26[json_name = "ipWithPrefixlen", (.buf.validate.predefined) = {
  bool has_ip_with_prefixlen() const;
  private:
  bool _internal_has_ip_with_prefixlen() const;
  public:
  void clear_ip_with_prefixlen();
  bool ip_with_prefixlen() const;
  void set_ip_with_prefixlen(bool value);
  private:
  bool _internal_ip_with_prefixlen() const;
  void _internal_set_ip_with_prefixlen(bool value);
  public:

  // bool ipv4_with_prefixlen = 27[json_name = "ipv4WithPrefixlen", (.buf.validate.predefined) = {
  bool has_ipv4_with_prefixlen() const;
  private:
  bool _internal_has_ipv4_with_prefixlen() const;
  public:
  void clear_ipv4_with_prefixlen();
  bool ipv4_with_prefixlen() const;
  void set_ipv4_with_prefixlen(bool value);
  private:
  bool _internal_ipv4_with_prefixlen() const;
  void _internal_set_ipv4_with_prefixlen(bool value);
  public:

  // bool ipv6_with_prefixlen = 28[json_name = "ipv6WithPrefixlen", (.buf.validate.predefined) = {
  bool has_ipv6_with_prefixlen() const;
  private:
  bool _internal_has_ipv6_with_prefixlen() const;
  public:
  void clear_ipv6_with_prefixlen();
  bool ipv6_with_prefixlen() const;
  void set_ipv6_with_prefixlen(bool value);
  private:
  bool _internal_ipv6_with_prefixlen() const;
  void _internal_set_ipv6_with_prefixlen(bool value);
  public:

  // bool ip_prefix = 29[json_name = "ipPrefix", (.buf.validate.predefined) = {
  bool has_ip_prefix() const;
  private:
  bool _internal_has_ip_prefix() const;
  public:
  void clear_ip_prefix();
  bool ip_prefix() const;
  void set_ip_prefix(bool value);
  private:
  bool _internal_ip_prefix() const;
  void _internal_set_ip_prefix(bool value);
  public:

  // bool ipv4_prefix = 30[json_name = "ipv4Prefix", (.buf.validate.predefined) = {
  bool has_ipv4_prefix() const;
  private:
  bool _internal_has_ipv4_prefix() const;
  public:
  void clear_ipv4_prefix();
  bool ipv4_prefix() const;
  void set_ipv4_prefix(bool value);
  private:
  bool _internal_ipv4_prefix() const;
  void _internal_set_ipv4_prefix(bool value);
  public:

  // bool ipv6_prefix = 31[json_name = "ipv6Prefix", (.buf.validate.predefined) = {
  bool has_ipv6_prefix() const;
  private:
  bool _internal_has_ipv6_prefix() const;
  public:
  void clear_ipv6_prefix();
  bool ipv6_prefix() const;
  void set_ipv6_prefix(bool value);
  private:
  bool _internal_ipv6_prefix() const;
  void _internal_set_ipv6_prefix(bool value);
  public:

  // bool host_and_port = 32[json_name = "hostAndPort", (.buf.validate.predefined) = {
  bool has_host_and_port() const;
  private:
  bool _internal_has_host_and_port() const;
  public:
  void clear_host_and_port();
  bool host_and_port() const;
  void set_host_and_port(bool value);
  private:
  bool _internal_host_and_port() const;
  void _internal_set_host_and_port(bool value);
  public:

  // .buf.validate.KnownRegex well_known_regex = 24[json_name = "wellKnownRegex", (.buf.validate.predefined) = {
  bool has_well_known_regex() const;
  private:
  bool _internal_has_well_known_regex() const;
  public:
  void clear_well_known_regex();
  ::buf::validate::KnownRegex well_known_regex() const;
  void set_well_known_regex(::buf::validate::KnownRegex value);
  private:
  ::buf::validate::KnownRegex _internal_well_known_regex() const;
  void _internal_set_well_known_regex(::buf::validate::KnownRegex value);
  public:

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(StringRules)
  void clear_well_known();
  WellKnownCase well_known_case() const;
  // @@protoc_insertion_point(class_scope:buf.validate.StringRules)
 private:
  class _Internal;
  void set_has_email();
  void set_has_hostname();
  void set_has_ip();
  void set_has_ipv4();
  void set_has_ipv6();
  void set_has_uri();
  void set_has_uri_ref();
  void set_has_address();
  void set_has_uuid();
  void set_has_tuuid();
  void set_has_ip_with_prefixlen();
  void set_has_ipv4_with_prefixlen();
  void set_has_ipv6_with_prefixlen();
  void set_has_ip_prefix();
  void set_has_ipv4_prefix();
  void set_has_ipv6_prefix();
  void set_has_host_and_port();
  void set_has_well_known_regex();

  inline bool has_well_known() const;
  inline void clear_has_well_known();

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> in_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> not_in_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> example_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr const__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pattern_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr suffix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contains_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr not_contains_;
  ::PROTOBUF_NAMESPACE_ID::uint64 min_len_;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_len_;
  ::PROTOBUF_NAMESPACE_ID::uint64 min_bytes_;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_bytes_;
  bool strict_;
  ::PROTOBUF_NAMESPACE_ID::uint64 len_;
  ::PROTOBUF_NAMESPACE_ID::uint64 len_bytes_;
  union WellKnownUnion {
    WellKnownUnion() {}
    bool email_;
    bool hostname_;
    bool ip_;
    bool ipv4_;
    bool ipv6_;
    bool uri_;
    bool uri_ref_;
    bool address_;
    bool uuid_;
    bool tuuid_;
    bool ip_with_prefixlen_;
    bool ipv4_with_prefixlen_;
    bool ipv6_with_prefixlen_;
    bool ip_prefix_;
    bool ipv4_prefix_;
    bool ipv6_prefix_;
    bool host_and_port_;
    int well_known_regex_;
  } well_known_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_buf_2fvalidate_2fvalidate_2eproto;
};
// -------------------------------------------------------------------

class BytesRules PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:buf.validate.BytesRules) */ {
 public:
  inline BytesRules() : BytesRules(nullptr) {};
  virtual ~BytesRules();

  BytesRules(const BytesRules& from);
  BytesRules(BytesRules&& from) noexcept
    : BytesRules() {
    *this = ::std::move(from);
  }

  inline BytesRules& operator=(const BytesRules& from) {
    CopyFrom(from);
    return *this;
  }
  inline BytesRules& operator=(BytesRules&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BytesRules& default_instance();

  enum WellKnownCase {
    kIp = 10,
    kIpv4 = 11,
    kIpv6 = 12,
    WELL_KNOWN_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BytesRules* internal_default_instance() {
    return reinterpret_cast<const BytesRules*>(
               &_BytesRules_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(BytesRules& a, BytesRules& b) {
    a.Swap(&b);
  }
  inline void Swap(BytesRules* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BytesRules* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BytesRules* New() const final {
    return CreateMaybeMessage<BytesRules>(nullptr);
  }

  BytesRules* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BytesRules>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BytesRules& from);
  void MergeFrom(const BytesRules& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BytesRules* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "buf.validate.BytesRules";
  }
  protected:
  explicit BytesRules(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_buf_2fvalidate_2fvalidate_2eproto);
    return ::descriptor_table_buf_2fvalidate_2fvalidate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInFieldNumber = 8,
    kNotInFieldNumber = 9,
    kExampleFieldNumber = 14,
    kConstFieldNumber = 1,
    kPatternFieldNumber = 4,
    kPrefixFieldNumber = 5,
    kSuffixFieldNumber = 6,
    kContainsFieldNumber = 7,
    kMinLenFieldNumber = 2,
    kMaxLenFieldNumber = 3,
    kLenFieldNumber = 13,
    kIpFieldNumber = 10,
    kIpv4FieldNumber = 11,
    kIpv6FieldNumber = 12,
  };
  // repeated bytes in = 8[json_name = "in", (.buf.validate.predefined) = {
  int in_size() const;
  private:
  int _internal_in_size() const;
  public:
  void clear_in();
  const std::string& in(int index) const;
  std::string* mutable_in(int index);
  void set_in(int index, const std::string& value);
  void set_in(int index, std::string&& value);
  void set_in(int index, const char* value);
  void set_in(int index, const void* value, size_t size);
  std::string* add_in();
  void add_in(const std::string& value);
  void add_in(std::string&& value);
  void add_in(const char* value);
  void add_in(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_in();
  private:
  const std::string& _internal_in(int index) const;
  std::string* _internal_add_in();
  public:

  // repeated bytes not_in = 9[json_name = "notIn", (.buf.validate.predefined) = {
  int not_in_size() const;
  private:
  int _internal_not_in_size() const;
  public:
  void clear_not_in();
  const std::string& not_in(int index) const;
  std::string* mutable_not_in(int index);
  void set_not_in(int index, const std::string& value);
  void set_not_in(int index, std::string&& value);
  void set_not_in(int index, const char* value);
  void set_not_in(int index, const void* value, size_t size);
  std::string* add_not_in();
  void add_not_in(const std::string& value);
  void add_not_in(std::string&& value);
  void add_not_in(const char* value);
  void add_not_in(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& not_in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_not_in();
  private:
  const std::string& _internal_not_in(int index) const;
  std::string* _internal_add_not_in();
  public:

  // repeated bytes example = 14[json_name = "example", (.buf.validate.predefined) = {
  int example_size() const;
  private:
  int _internal_example_size() const;
  public:
  void clear_example();
  const std::string& example(int index) const;
  std::string* mutable_example(int index);
  void set_example(int index, const std::string& value);
  void set_example(int index, std::string&& value);
  void set_example(int index, const char* value);
  void set_example(int index, const void* value, size_t size);
  std::string* add_example();
  void add_example(const std::string& value);
  void add_example(std::string&& value);
  void add_example(const char* value);
  void add_example(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& example() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_example();
  private:
  const std::string& _internal_example(int index) const;
  std::string* _internal_add_example();
  public:

  // optional bytes const = 1[json_name = "const", (.buf.validate.predefined) = {
  bool has_const_() const;
  private:
  bool _internal_has_const_() const;
  public:
  void clear_const_();
  const std::string& const_() const;
  void set_const_(const std::string& value);
  void set_const_(std::string&& value);
  void set_const_(const char* value);
  void set_const_(const void* value, size_t size);
  std::string* mutable_const_();
  std::string* release_const_();
  void set_allocated_const_(std::string* const_);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_const_();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_const_(
      std::string* const_);
  private:
  const std::string& _internal_const_() const;
  void _internal_set_const_(const std::string& value);
  std::string* _internal_mutable_const_();
  public:

  // optional string pattern = 4[json_name = "pattern", (.buf.validate.predefined) = {
  bool has_pattern() const;
  private:
  bool _internal_has_pattern() const;
  public:
  void clear_pattern();
  const std::string& pattern() const;
  void set_pattern(const std::string& value);
  void set_pattern(std::string&& value);
  void set_pattern(const char* value);
  void set_pattern(const char* value, size_t size);
  std::string* mutable_pattern();
  std::string* release_pattern();
  void set_allocated_pattern(std::string* pattern);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pattern();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pattern(
      std::string* pattern);
  private:
  const std::string& _internal_pattern() const;
  void _internal_set_pattern(const std::string& value);
  std::string* _internal_mutable_pattern();
  public:

  // optional bytes prefix = 5[json_name = "prefix", (.buf.validate.predefined) = {
  bool has_prefix() const;
  private:
  bool _internal_has_prefix() const;
  public:
  void clear_prefix();
  const std::string& prefix() const;
  void set_prefix(const std::string& value);
  void set_prefix(std::string&& value);
  void set_prefix(const char* value);
  void set_prefix(const void* value, size_t size);
  std::string* mutable_prefix();
  std::string* release_prefix();
  void set_allocated_prefix(std::string* prefix);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_prefix();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_prefix(
      std::string* prefix);
  private:
  const std::string& _internal_prefix() const;
  void _internal_set_prefix(const std::string& value);
  std::string* _internal_mutable_prefix();
  public:

  // optional bytes suffix = 6[json_name = "suffix", (.buf.validate.predefined) = {
  bool has_suffix() const;
  private:
  bool _internal_has_suffix() const;
  public:
  void clear_suffix();
  const std::string& suffix() const;
  void set_suffix(const std::string& value);
  void set_suffix(std::string&& value);
  void set_suffix(const char* value);
  void set_suffix(const void* value, size_t size);
  std::string* mutable_suffix();
  std::string* release_suffix();
  void set_allocated_suffix(std::string* suffix);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_suffix();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_suffix(
      std::string* suffix);
  private:
  const std::string& _internal_suffix() const;
  void _internal_set_suffix(const std::string& value);
  std::string* _internal_mutable_suffix();
  public:

  // optional bytes contains = 7[json_name = "contains", (.buf.validate.predefined) = {
  bool has_contains() const;
  private:
  bool _internal_has_contains() const;
  public:
  void clear_contains();
  const std::string& contains() const;
  void set_contains(const std::string& value);
  void set_contains(std::string&& value);
  void set_contains(const char* value);
  void set_contains(const void* value, size_t size);
  std::string* mutable_contains();
  std::string* release_contains();
  void set_allocated_contains(std::string* contains);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_contains();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_contains(
      std::string* contains);
  private:
  const std::string& _internal_contains() const;
  void _internal_set_contains(const std::string& value);
  std::string* _internal_mutable_contains();
  public:

  // optional uint64 min_len = 2[json_name = "minLen", (.buf.validate.predefined) = {
  bool has_min_len() const;
  private:
  bool _internal_has_min_len() const;
  public:
  void clear_min_len();
  ::PROTOBUF_NAMESPACE_ID::uint64 min_len() const;
  void set_min_len(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_min_len() const;
  void _internal_set_min_len(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 max_len = 3[json_name = "maxLen", (.buf.validate.predefined) = {
  bool has_max_len() const;
  private:
  bool _internal_has_max_len() const;
  public:
  void clear_max_len();
  ::PROTOBUF_NAMESPACE_ID::uint64 max_len() const;
  void set_max_len(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_max_len() const;
  void _internal_set_max_len(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 len = 13[json_name = "len", (.buf.validate.predefined) = {
  bool has_len() const;
  private:
  bool _internal_has_len() const;
  public:
  void clear_len();
  ::PROTOBUF_NAMESPACE_ID::uint64 len() const;
  void set_len(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_len() const;
  void _internal_set_len(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool ip = 10[json_name = "ip", (.buf.validate.predefined) = {
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  bool ip() const;
  void set_ip(bool value);
  private:
  bool _internal_ip() const;
  void _internal_set_ip(bool value);
  public:

  // bool ipv4 = 11[json_name = "ipv4", (.buf.validate.predefined) = {
  bool has_ipv4() const;
  private:
  bool _internal_has_ipv4() const;
  public:
  void clear_ipv4();
  bool ipv4() const;
  void set_ipv4(bool value);
  private:
  bool _internal_ipv4() const;
  void _internal_set_ipv4(bool value);
  public:

  // bool ipv6 = 12[json_name = "ipv6", (.buf.validate.predefined) = {
  bool has_ipv6() const;
  private:
  bool _internal_has_ipv6() const;
  public:
  void clear_ipv6();
  bool ipv6() const;
  void set_ipv6(bool value);
  private:
  bool _internal_ipv6() const;
  void _internal_set_ipv6(bool value);
  public:

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(BytesRules)
  void clear_well_known();
  WellKnownCase well_known_case() const;
  // @@protoc_insertion_point(class_scope:buf.validate.BytesRules)
 private:
  class _Internal;
  void set_has_ip();
  void set_has_ipv4();
  void set_has_ipv6();

  inline bool has_well_known() const;
  inline void clear_has_well_known();

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> in_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> not_in_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> example_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr const__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pattern_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr suffix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contains_;
  ::PROTOBUF_NAMESPACE_ID::uint64 min_len_;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_len_;
  ::PROTOBUF_NAMESPACE_ID::uint64 len_;
  union WellKnownUnion {
    WellKnownUnion() {}
    bool ip_;
    bool ipv4_;
    bool ipv6_;
  } well_known_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_buf_2fvalidate_2fvalidate_2eproto;
};
// -------------------------------------------------------------------

class EnumRules PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:buf.validate.EnumRules) */ {
 public:
  inline EnumRules() : EnumRules(nullptr) {};
  virtual ~EnumRules();

  EnumRules(const EnumRules& from);
  EnumRules(EnumRules&& from) noexcept
    : EnumRules() {
    *this = ::std::move(from);
  }

  inline EnumRules& operator=(const EnumRules& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnumRules& operator=(EnumRules&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnumRules& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnumRules* internal_default_instance() {
    return reinterpret_cast<const EnumRules*>(
               &_EnumRules_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(EnumRules& a, EnumRules& b) {
    a.Swap(&b);
  }
  inline void Swap(EnumRules* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnumRules* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnumRules* New() const final {
    return CreateMaybeMessage<EnumRules>(nullptr);
  }

  EnumRules* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnumRules>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnumRules& from);
  void MergeFrom(const EnumRules& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnumRules* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "buf.validate.EnumRules";
  }
  protected:
  explicit EnumRules(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_buf_2fvalidate_2fvalidate_2eproto);
    return ::descriptor_table_buf_2fvalidate_2fvalidate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInFieldNumber = 3,
    kNotInFieldNumber = 4,
    kExampleFieldNumber = 5,
    kConstFieldNumber = 1,
    kDefinedOnlyFieldNumber = 2,
  };
  // repeated int32 in = 3[json_name = "in", (.buf.validate.predefined) = {
  int in_size() const;
  private:
  int _internal_in_size() const;
  public:
  void clear_in();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_in(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_in() const;
  void _internal_add_in(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_in();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 in(int index) const;
  void set_in(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_in(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_in();

  // repeated int32 not_in = 4[json_name = "notIn", (.buf.validate.predefined) = {
  int not_in_size() const;
  private:
  int _internal_not_in_size() const;
  public:
  void clear_not_in();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_not_in(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_not_in() const;
  void _internal_add_not_in(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_not_in();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 not_in(int index) const;
  void set_not_in(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_not_in(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      not_in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_not_in();

  // repeated int32 example = 5[json_name = "example", (.buf.validate.predefined) = {
  int example_size() const;
  private:
  int _internal_example_size() const;
  public:
  void clear_example();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_example(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_example() const;
  void _internal_add_example(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_example();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 example(int index) const;
  void set_example(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_example(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      example() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_example();

  // optional int32 const = 1[json_name = "const", (.buf.validate.predefined) = {
  bool has_const_() const;
  private:
  bool _internal_has_const_() const;
  public:
  void clear_const_();
  ::PROTOBUF_NAMESPACE_ID::int32 const_() const;
  void set_const_(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_const_() const;
  void _internal_set_const_(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool defined_only = 2[json_name = "definedOnly"];
  bool has_defined_only() const;
  private:
  bool _internal_has_defined_only() const;
  public:
  void clear_defined_only();
  bool defined_only() const;
  void set_defined_only(bool value);
  private:
  bool _internal_defined_only() const;
  void _internal_set_defined_only(bool value);
  public:

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(EnumRules)
  // @@protoc_insertion_point(class_scope:buf.validate.EnumRules)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > in_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > not_in_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > example_;
  ::PROTOBUF_NAMESPACE_ID::int32 const__;
  bool defined_only_;
  friend struct ::TableStruct_buf_2fvalidate_2fvalidate_2eproto;
};
// -------------------------------------------------------------------

class RepeatedRules PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:buf.validate.RepeatedRules) */ {
 public:
  inline RepeatedRules() : RepeatedRules(nullptr) {};
  virtual ~RepeatedRules();

  RepeatedRules(const RepeatedRules& from);
  RepeatedRules(RepeatedRules&& from) noexcept
    : RepeatedRules() {
    *this = ::std::move(from);
  }

  inline RepeatedRules& operator=(const RepeatedRules& from) {
    CopyFrom(from);
    return *this;
  }
  inline RepeatedRules& operator=(RepeatedRules&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RepeatedRules& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RepeatedRules* internal_default_instance() {
    return reinterpret_cast<const RepeatedRules*>(
               &_RepeatedRules_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(RepeatedRules& a, RepeatedRules& b) {
    a.Swap(&b);
  }
  inline void Swap(RepeatedRules* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RepeatedRules* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RepeatedRules* New() const final {
    return CreateMaybeMessage<RepeatedRules>(nullptr);
  }

  RepeatedRules* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RepeatedRules>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RepeatedRules& from);
  void MergeFrom(const RepeatedRules& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RepeatedRules* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "buf.validate.RepeatedRules";
  }
  protected:
  explicit RepeatedRules(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_buf_2fvalidate_2fvalidate_2eproto);
    return ::descriptor_table_buf_2fvalidate_2fvalidate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 4,
    kMinItemsFieldNumber = 1,
    kMaxItemsFieldNumber = 2,
    kUniqueFieldNumber = 3,
  };
  // optional .buf.validate.FieldRules items = 4[json_name = "items"];
  bool has_items() const;
  private:
  bool _internal_has_items() const;
  public:
  void clear_items();
  const ::buf::validate::FieldRules& items() const;
  ::buf::validate::FieldRules* release_items();
  ::buf::validate::FieldRules* mutable_items();
  void set_allocated_items(::buf::validate::FieldRules* items);
  private:
  const ::buf::validate::FieldRules& _internal_items() const;
  ::buf::validate::FieldRules* _internal_mutable_items();
  public:
  void unsafe_arena_set_allocated_items(
      ::buf::validate::FieldRules* items);
  ::buf::validate::FieldRules* unsafe_arena_release_items();

  // optional uint64 min_items = 1[json_name = "minItems", (.buf.validate.predefined) = {
  bool has_min_items() const;
  private:
  bool _internal_has_min_items() const;
  public:
  void clear_min_items();
  ::PROTOBUF_NAMESPACE_ID::uint64 min_items() const;
  void set_min_items(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_min_items() const;
  void _internal_set_min_items(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 max_items = 2[json_name = "maxItems", (.buf.validate.predefined) = {
  bool has_max_items() const;
  private:
  bool _internal_has_max_items() const;
  public:
  void clear_max_items();
  ::PROTOBUF_NAMESPACE_ID::uint64 max_items() const;
  void set_max_items(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_max_items() const;
  void _internal_set_max_items(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool unique = 3[json_name = "unique", (.buf.validate.predefined) = {
  bool has_unique() const;
  private:
  bool _internal_has_unique() const;
  public:
  void clear_unique();
  bool unique() const;
  void set_unique(bool value);
  private:
  bool _internal_unique() const;
  void _internal_set_unique(bool value);
  public:

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(RepeatedRules)
  // @@protoc_insertion_point(class_scope:buf.validate.RepeatedRules)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::buf::validate::FieldRules* items_;
  ::PROTOBUF_NAMESPACE_ID::uint64 min_items_;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_items_;
  bool unique_;
  friend struct ::TableStruct_buf_2fvalidate_2fvalidate_2eproto;
};
// -------------------------------------------------------------------

class MapRules PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:buf.validate.MapRules) */ {
 public:
  inline MapRules() : MapRules(nullptr) {};
  virtual ~MapRules();

  MapRules(const MapRules& from);
  MapRules(MapRules&& from) noexcept
    : MapRules() {
    *this = ::std::move(from);
  }

  inline MapRules& operator=(const MapRules& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapRules& operator=(MapRules&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MapRules& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapRules* internal_default_instance() {
    return reinterpret_cast<const MapRules*>(
               &_MapRules_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(MapRules& a, MapRules& b) {
    a.Swap(&b);
  }
  inline void Swap(MapRules* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapRules* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapRules* New() const final {
    return CreateMaybeMessage<MapRules>(nullptr);
  }

  MapRules* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapRules>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MapRules& from);
  void MergeFrom(const MapRules& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapRules* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "buf.validate.MapRules";
  }
  protected:
  explicit MapRules(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_buf_2fvalidate_2fvalidate_2eproto);
    return ::descriptor_table_buf_2fvalidate_2fvalidate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 4,
    kValuesFieldNumber = 5,
    kMinPairsFieldNumber = 1,
    kMaxPairsFieldNumber = 2,
  };
  // optional .buf.validate.FieldRules keys = 4[json_name = "keys"];
  bool has_keys() const;
  private:
  bool _internal_has_keys() const;
  public:
  void clear_keys();
  const ::buf::validate::FieldRules& keys() const;
  ::buf::validate::FieldRules* release_keys();
  ::buf::validate::FieldRules* mutable_keys();
  void set_allocated_keys(::buf::validate::FieldRules* keys);
  private:
  const ::buf::validate::FieldRules& _internal_keys() const;
  ::buf::validate::FieldRules* _internal_mutable_keys();
  public:
  void unsafe_arena_set_allocated_keys(
      ::buf::validate::FieldRules* keys);
  ::buf::validate::FieldRules* unsafe_arena_release_keys();

  // optional .buf.validate.FieldRules values = 5[json_name = "values"];
  bool has_values() const;
  private:
  bool _internal_has_values() const;
  public:
  void clear_values();
  const ::buf::validate::FieldRules& values() const;
  ::buf::validate::FieldRules* release_values();
  ::buf::validate::FieldRules* mutable_values();
  void set_allocated_values(::buf::validate::FieldRules* values);
  private:
  const ::buf::validate::FieldRules& _internal_values() const;
  ::buf::validate::FieldRules* _internal_mutable_values();
  public:
  void unsafe_arena_set_allocated_values(
      ::buf::validate::FieldRules* values);
  ::buf::validate::FieldRules* unsafe_arena_release_values();

  // optional uint64 min_pairs = 1[json_name = "minPairs", (.buf.validate.predefined) = {
  bool has_min_pairs() const;
  private:
  bool _internal_has_min_pairs() const;
  public:
  void clear_min_pairs();
  ::PROTOBUF_NAMESPACE_ID::uint64 min_pairs() const;
  void set_min_pairs(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_min_pairs() const;
  void _internal_set_min_pairs(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 max_pairs = 2[json_name = "maxPairs", (.buf.validate.predefined) = {
  bool has_max_pairs() const;
  private:
  bool _internal_has_max_pairs() const;
  public:
  void clear_max_pairs();
  ::PROTOBUF_NAMESPACE_ID::uint64 max_pairs() const;
  void set_max_pairs(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_max_pairs() const;
  void _internal_set_max_pairs(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(MapRules)
  // @@protoc_insertion_point(class_scope:buf.validate.MapRules)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::buf::validate::FieldRules* keys_;
  ::buf::validate::FieldRules* values_;
  ::PROTOBUF_NAMESPACE_ID::uint64 min_pairs_;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_pairs_;
  friend struct ::TableStruct_buf_2fvalidate_2fvalidate_2eproto;
};
// -------------------------------------------------------------------

class AnyRules PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:buf.validate.AnyRules) */ {
 public:
  inline AnyRules() : AnyRules(nullptr) {};
  virtual ~AnyRules();

  AnyRules(const AnyRules& from);
  AnyRules(AnyRules&& from) noexcept
    : AnyRules() {
    *this = ::std::move(from);
  }

  inline AnyRules& operator=(const AnyRules& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnyRules& operator=(AnyRules&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AnyRules& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnyRules* internal_default_instance() {
    return reinterpret_cast<const AnyRules*>(
               &_AnyRules_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(AnyRules& a, AnyRules& b) {
    a.Swap(&b);
  }
  inline void Swap(AnyRules* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnyRules* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AnyRules* New() const final {
    return CreateMaybeMessage<AnyRules>(nullptr);
  }

  AnyRules* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AnyRules>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AnyRules& from);
  void MergeFrom(const AnyRules& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnyRules* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "buf.validate.AnyRules";
  }
  protected:
  explicit AnyRules(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_buf_2fvalidate_2fvalidate_2eproto);
    return ::descriptor_table_buf_2fvalidate_2fvalidate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInFieldNumber = 2,
    kNotInFieldNumber = 3,
  };
  // repeated string in = 2[json_name = "in"];
  int in_size() const;
  private:
  int _internal_in_size() const;
  public:
  void clear_in();
  const std::string& in(int index) const;
  std::string* mutable_in(int index);
  void set_in(int index, const std::string& value);
  void set_in(int index, std::string&& value);
  void set_in(int index, const char* value);
  void set_in(int index, const char* value, size_t size);
  std::string* add_in();
  void add_in(const std::string& value);
  void add_in(std::string&& value);
  void add_in(const char* value);
  void add_in(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_in();
  private:
  const std::string& _internal_in(int index) const;
  std::string* _internal_add_in();
  public:

  // repeated string not_in = 3[json_name = "notIn"];
  int not_in_size() const;
  private:
  int _internal_not_in_size() const;
  public:
  void clear_not_in();
  const std::string& not_in(int index) const;
  std::string* mutable_not_in(int index);
  void set_not_in(int index, const std::string& value);
  void set_not_in(int index, std::string&& value);
  void set_not_in(int index, const char* value);
  void set_not_in(int index, const char* value, size_t size);
  std::string* add_not_in();
  void add_not_in(const std::string& value);
  void add_not_in(std::string&& value);
  void add_not_in(const char* value);
  void add_not_in(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& not_in() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_not_in();
  private:
  const std::string& _internal_not_in(int index) const;
  std::string* _internal_add_not_in();
  public:

  // @@protoc_insertion_point(class_scope:buf.validate.AnyRules)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> in_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> not_in_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_buf_2fvalidate_2fvalidate_2eproto;
};
// -------------------------------------------------------------------

class DurationRules PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:buf.validate.DurationRules) */ {
 public:
  inline DurationRules() : DurationRules(nullptr) {};
  virtual ~DurationRules();

  DurationRules(const DurationRules& from);
  DurationRules(DurationRules&& from) noexcept
    : DurationRules() {
    *this = ::std::move(from);
  }

  inline DurationRules& operator=(const DurationRules& from) {
    CopyFrom(from);
    return *this;
  }
  inline DurationRules& operator=(DurationRules&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DurationRules& default_instance();

  enum LessThanCase {
    kLt = 3,
    kLte = 4,
    LESS_THAN_NOT_SET = 0,
  };

  enum GreaterThanCase {
    kGt = 5,
    kGte = 6,
    GREATER_THAN_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DurationRules* internal_default_instance() {
    return reinterpret_cast<const DurationRules*>(
               &_DurationRules_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(DurationRules& a, DurationRules& b) {
    a.Swap(&b);
  }
  inline void Swap(DurationRules* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DurationRules* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DurationRules* New() const final {
    return CreateMaybeMessage<DurationRules>(nullptr);
  }

  DurationRules* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DurationRules>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DurationRules& from);
  void MergeFrom(const DurationRules& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DurationRules* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "buf.validate.DurationRules";
  }
  protected:
  explicit DurationRules(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_buf_2fvalidate_2fvalidate_2eproto);
    return ::descriptor_table_buf_2fvalidate_2fvalidate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInFieldNumber = 7,
    kNotInFieldNumber = 8,
    kExampleFieldNumber = 9,
    kConstFieldNumber = 2,
    kLtFieldNumber = 3,
    kLteFieldNumber = 4,
    kGtFieldNumber = 5,
    kGteFieldNumber = 6,
  };
  // repeated .google.protobuf.Duration in = 7[json_name = "in", (.buf.validate.predefined) = {
  int in_size() const;
  private:
  int _internal_in_size() const;
  public:
  void clear_in();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_in(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Duration >*
      mutable_in();
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_in(int index) const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_add_in();
  public:
  const PROTOBUF_NAMESPACE_ID::Duration& in(int index) const;
  PROTOBUF_NAMESPACE_ID::Duration* add_in();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Duration >&
      in() const;

  // repeated .google.protobuf.Duration not_in = 8[json_name = "notIn", (.buf.validate.predefined) = {
  int not_in_size() const;
  private:
  int _internal_not_in_size() const;
  public:
  void clear_not_in();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_not_in(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Duration >*
      mutable_not_in();
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_not_in(int index) const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_add_not_in();
  public:
  const PROTOBUF_NAMESPACE_ID::Duration& not_in(int index) const;
  PROTOBUF_NAMESPACE_ID::Duration* add_not_in();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Duration >&
      not_in() const;

  // repeated .google.protobuf.Duration example = 9[json_name = "example", (.buf.validate.predefined) = {
  int example_size() const;
  private:
  int _internal_example_size() const;
  public:
  void clear_example();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_example(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Duration >*
      mutable_example();
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_example(int index) const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_add_example();
  public:
  const PROTOBUF_NAMESPACE_ID::Duration& example(int index) const;
  PROTOBUF_NAMESPACE_ID::Duration* add_example();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Duration >&
      example() const;

  // optional .google.protobuf.Duration const = 2[json_name = "const", (.buf.validate.predefined) = {
  bool has_const_() const;
  private:
  bool _internal_has_const_() const;
  public:
  void clear_const_();
  const PROTOBUF_NAMESPACE_ID::Duration& const_() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_const_();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_const_();
  void set_allocated_const_(PROTOBUF_NAMESPACE_ID::Duration* const_);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_const_() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_const_();
  public:
  void unsafe_arena_set_allocated_const_(
      PROTOBUF_NAMESPACE_ID::Duration* const_);
  PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_const_();

  // .google.protobuf.Duration lt = 3[json_name = "lt", (.buf.validate.predefined) = {
  bool has_lt() const;
  private:
  bool _internal_has_lt() const;
  public:
  void clear_lt();
  const PROTOBUF_NAMESPACE_ID::Duration& lt() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_lt();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_lt();
  void set_allocated_lt(PROTOBUF_NAMESPACE_ID::Duration* lt);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_lt() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_lt();
  public:
  void unsafe_arena_set_allocated_lt(
      PROTOBUF_NAMESPACE_ID::Duration* lt);
  PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_lt();

  // .google.protobuf.Duration lte = 4[json_name = "lte", (.buf.validate.predefined) = {
  bool has_lte() const;
  private:
  bool _internal_has_lte() const;
  public:
  void clear_lte();
  const PROTOBUF_NAMESPACE_ID::Duration& lte() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_lte();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_lte();
  void set_allocated_lte(PROTOBUF_NAMESPACE_ID::Duration* lte);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_lte() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_lte();
  public:
  void unsafe_arena_set_allocated_lte(
      PROTOBUF_NAMESPACE_ID::Duration* lte);
  PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_lte();

  // .google.protobuf.Duration gt = 5[json_name = "gt", (.buf.validate.predefined) = {
  bool has_gt() const;
  private:
  bool _internal_has_gt() const;
  public:
  void clear_gt();
  const PROTOBUF_NAMESPACE_ID::Duration& gt() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_gt();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_gt();
  void set_allocated_gt(PROTOBUF_NAMESPACE_ID::Duration* gt);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_gt() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_gt();
  public:
  void unsafe_arena_set_allocated_gt(
      PROTOBUF_NAMESPACE_ID::Duration* gt);
  PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_gt();

  // .google.protobuf.Duration gte = 6[json_name = "gte", (.buf.validate.predefined) = {
  bool has_gte() const;
  private:
  bool _internal_has_gte() const;
  public:
  void clear_gte();
  const PROTOBUF_NAMESPACE_ID::Duration& gte() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_gte();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_gte();
  void set_allocated_gte(PROTOBUF_NAMESPACE_ID::Duration* gte);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_gte() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_gte();
  public:
  void unsafe_arena_set_allocated_gte(
      PROTOBUF_NAMESPACE_ID::Duration* gte);
  PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_gte();

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(DurationRules)
  void clear_less_than();
  LessThanCase less_than_case() const;
  void clear_greater_than();
  GreaterThanCase greater_than_case() const;
  // @@protoc_insertion_point(class_scope:buf.validate.DurationRules)
 private:
  class _Internal;
  void set_has_lt();
  void set_has_lte();
  void set_has_gt();
  void set_has_gte();

  inline bool has_less_than() const;
  inline void clear_has_less_than();

  inline bool has_greater_than() const;
  inline void clear_has_greater_than();

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Duration > in_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Duration > not_in_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Duration > example_;
  PROTOBUF_NAMESPACE_ID::Duration* const__;
  union LessThanUnion {
    LessThanUnion() {}
    PROTOBUF_NAMESPACE_ID::Duration* lt_;
    PROTOBUF_NAMESPACE_ID::Duration* lte_;
  } less_than_;
  union GreaterThanUnion {
    GreaterThanUnion() {}
    PROTOBUF_NAMESPACE_ID::Duration* gt_;
    PROTOBUF_NAMESPACE_ID::Duration* gte_;
  } greater_than_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_buf_2fvalidate_2fvalidate_2eproto;
};
// -------------------------------------------------------------------

class TimestampRules PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:buf.validate.TimestampRules) */ {
 public:
  inline TimestampRules() : TimestampRules(nullptr) {};
  virtual ~TimestampRules();

  TimestampRules(const TimestampRules& from);
  TimestampRules(TimestampRules&& from) noexcept
    : TimestampRules() {
    *this = ::std::move(from);
  }

  inline TimestampRules& operator=(const TimestampRules& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimestampRules& operator=(TimestampRules&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimestampRules& default_instance();

  enum LessThanCase {
    kLt = 3,
    kLte = 4,
    kLtNow = 7,
    LESS_THAN_NOT_SET = 0,
  };

  enum GreaterThanCase {
    kGt = 5,
    kGte = 6,
    kGtNow = 8,
    GREATER_THAN_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimestampRules* internal_default_instance() {
    return reinterpret_cast<const TimestampRules*>(
               &_TimestampRules_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(TimestampRules& a, TimestampRules& b) {
    a.Swap(&b);
  }
  inline void Swap(TimestampRules* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimestampRules* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimestampRules* New() const final {
    return CreateMaybeMessage<TimestampRules>(nullptr);
  }

  TimestampRules* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimestampRules>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimestampRules& from);
  void MergeFrom(const TimestampRules& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimestampRules* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "buf.validate.TimestampRules";
  }
  protected:
  explicit TimestampRules(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_buf_2fvalidate_2fvalidate_2eproto);
    return ::descriptor_table_buf_2fvalidate_2fvalidate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExampleFieldNumber = 10,
    kConstFieldNumber = 2,
    kWithinFieldNumber = 9,
    kLtFieldNumber = 3,
    kLteFieldNumber = 4,
    kLtNowFieldNumber = 7,
    kGtFieldNumber = 5,
    kGteFieldNumber = 6,
    kGtNowFieldNumber = 8,
  };
  // repeated .google.protobuf.Timestamp example = 10[json_name = "example", (.buf.validate.predefined) = {
  int example_size() const;
  private:
  int _internal_example_size() const;
  public:
  void clear_example();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_example(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Timestamp >*
      mutable_example();
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_example(int index) const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_add_example();
  public:
  const PROTOBUF_NAMESPACE_ID::Timestamp& example(int index) const;
  PROTOBUF_NAMESPACE_ID::Timestamp* add_example();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Timestamp >&
      example() const;

  // optional .google.protobuf.Timestamp const = 2[json_name = "const", (.buf.validate.predefined) = {
  bool has_const_() const;
  private:
  bool _internal_has_const_() const;
  public:
  void clear_const_();
  const PROTOBUF_NAMESPACE_ID::Timestamp& const_() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_const_();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_const_();
  void set_allocated_const_(PROTOBUF_NAMESPACE_ID::Timestamp* const_);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_const_() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_const_();
  public:
  void unsafe_arena_set_allocated_const_(
      PROTOBUF_NAMESPACE_ID::Timestamp* const_);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_const_();

  // optional .google.protobuf.Duration within = 9[json_name = "within", (.buf.validate.predefined) = {
  bool has_within() const;
  private:
  bool _internal_has_within() const;
  public:
  void clear_within();
  const PROTOBUF_NAMESPACE_ID::Duration& within() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_within();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_within();
  void set_allocated_within(PROTOBUF_NAMESPACE_ID::Duration* within);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_within() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_within();
  public:
  void unsafe_arena_set_allocated_within(
      PROTOBUF_NAMESPACE_ID::Duration* within);
  PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_within();

  // .google.protobuf.Timestamp lt = 3[json_name = "lt", (.buf.validate.predefined) = {
  bool has_lt() const;
  private:
  bool _internal_has_lt() const;
  public:
  void clear_lt();
  const PROTOBUF_NAMESPACE_ID::Timestamp& lt() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_lt();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_lt();
  void set_allocated_lt(PROTOBUF_NAMESPACE_ID::Timestamp* lt);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_lt() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_lt();
  public:
  void unsafe_arena_set_allocated_lt(
      PROTOBUF_NAMESPACE_ID::Timestamp* lt);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_lt();

  // .google.protobuf.Timestamp lte = 4[json_name = "lte", (.buf.validate.predefined) = {
  bool has_lte() const;
  private:
  bool _internal_has_lte() const;
  public:
  void clear_lte();
  const PROTOBUF_NAMESPACE_ID::Timestamp& lte() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_lte();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_lte();
  void set_allocated_lte(PROTOBUF_NAMESPACE_ID::Timestamp* lte);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_lte() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_lte();
  public:
  void unsafe_arena_set_allocated_lte(
      PROTOBUF_NAMESPACE_ID::Timestamp* lte);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_lte();

  // bool lt_now = 7[json_name = "ltNow", (.buf.validate.predefined) = {
  bool has_lt_now() const;
  private:
  bool _internal_has_lt_now() const;
  public:
  void clear_lt_now();
  bool lt_now() const;
  void set_lt_now(bool value);
  private:
  bool _internal_lt_now() const;
  void _internal_set_lt_now(bool value);
  public:

  // .google.protobuf.Timestamp gt = 5[json_name = "gt", (.buf.validate.predefined) = {
  bool has_gt() const;
  private:
  bool _internal_has_gt() const;
  public:
  void clear_gt();
  const PROTOBUF_NAMESPACE_ID::Timestamp& gt() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_gt();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_gt();
  void set_allocated_gt(PROTOBUF_NAMESPACE_ID::Timestamp* gt);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_gt() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_gt();
  public:
  void unsafe_arena_set_allocated_gt(
      PROTOBUF_NAMESPACE_ID::Timestamp* gt);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_gt();

  // .google.protobuf.Timestamp gte = 6[json_name = "gte", (.buf.validate.predefined) = {
  bool has_gte() const;
  private:
  bool _internal_has_gte() const;
  public:
  void clear_gte();
  const PROTOBUF_NAMESPACE_ID::Timestamp& gte() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_gte();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_gte();
  void set_allocated_gte(PROTOBUF_NAMESPACE_ID::Timestamp* gte);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_gte() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_gte();
  public:
  void unsafe_arena_set_allocated_gte(
      PROTOBUF_NAMESPACE_ID::Timestamp* gte);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_gte();

  // bool gt_now = 8[json_name = "gtNow", (.buf.validate.predefined) = {
  bool has_gt_now() const;
  private:
  bool _internal_has_gt_now() const;
  public:
  void clear_gt_now();
  bool gt_now() const;
  void set_gt_now(bool value);
  private:
  bool _internal_gt_now() const;
  void _internal_set_gt_now(bool value);
  public:

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(TimestampRules)
  void clear_less_than();
  LessThanCase less_than_case() const;
  void clear_greater_than();
  GreaterThanCase greater_than_case() const;
  // @@protoc_insertion_point(class_scope:buf.validate.TimestampRules)
 private:
  class _Internal;
  void set_has_lt();
  void set_has_lte();
  void set_has_lt_now();
  void set_has_gt();
  void set_has_gte();
  void set_has_gt_now();

  inline bool has_less_than() const;
  inline void clear_has_less_than();

  inline bool has_greater_than() const;
  inline void clear_has_greater_than();

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Timestamp > example_;
  PROTOBUF_NAMESPACE_ID::Timestamp* const__;
  PROTOBUF_NAMESPACE_ID::Duration* within_;
  union LessThanUnion {
    LessThanUnion() {}
    PROTOBUF_NAMESPACE_ID::Timestamp* lt_;
    PROTOBUF_NAMESPACE_ID::Timestamp* lte_;
    bool lt_now_;
  } less_than_;
  union GreaterThanUnion {
    GreaterThanUnion() {}
    PROTOBUF_NAMESPACE_ID::Timestamp* gt_;
    PROTOBUF_NAMESPACE_ID::Timestamp* gte_;
    bool gt_now_;
  } greater_than_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_buf_2fvalidate_2fvalidate_2eproto;
};
// -------------------------------------------------------------------

class Violations PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:buf.validate.Violations) */ {
 public:
  inline Violations() : Violations(nullptr) {};
  virtual ~Violations();

  Violations(const Violations& from);
  Violations(Violations&& from) noexcept
    : Violations() {
    *this = ::std::move(from);
  }

  inline Violations& operator=(const Violations& from) {
    CopyFrom(from);
    return *this;
  }
  inline Violations& operator=(Violations&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Violations& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Violations* internal_default_instance() {
    return reinterpret_cast<const Violations*>(
               &_Violations_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(Violations& a, Violations& b) {
    a.Swap(&b);
  }
  inline void Swap(Violations* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Violations* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Violations* New() const final {
    return CreateMaybeMessage<Violations>(nullptr);
  }

  Violations* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Violations>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Violations& from);
  void MergeFrom(const Violations& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Violations* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "buf.validate.Violations";
  }
  protected:
  explicit Violations(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_buf_2fvalidate_2fvalidate_2eproto);
    return ::descriptor_table_buf_2fvalidate_2fvalidate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kViolationsFieldNumber = 1,
  };
  // repeated .buf.validate.Violation violations = 1[json_name = "violations"];
  int violations_size() const;
  private:
  int _internal_violations_size() const;
  public:
  void clear_violations();
  ::buf::validate::Violation* mutable_violations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::buf::validate::Violation >*
      mutable_violations();
  private:
  const ::buf::validate::Violation& _internal_violations(int index) const;
  ::buf::validate::Violation* _internal_add_violations();
  public:
  const ::buf::validate::Violation& violations(int index) const;
  ::buf::validate::Violation* add_violations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::buf::validate::Violation >&
      violations() const;

  // @@protoc_insertion_point(class_scope:buf.validate.Violations)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::buf::validate::Violation > violations_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_buf_2fvalidate_2fvalidate_2eproto;
};
// -------------------------------------------------------------------

class Violation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:buf.validate.Violation) */ {
 public:
  inline Violation() : Violation(nullptr) {};
  virtual ~Violation();

  Violation(const Violation& from);
  Violation(Violation&& from) noexcept
    : Violation() {
    *this = ::std::move(from);
  }

  inline Violation& operator=(const Violation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Violation& operator=(Violation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Violation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Violation* internal_default_instance() {
    return reinterpret_cast<const Violation*>(
               &_Violation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(Violation& a, Violation& b) {
    a.Swap(&b);
  }
  inline void Swap(Violation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Violation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Violation* New() const final {
    return CreateMaybeMessage<Violation>(nullptr);
  }

  Violation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Violation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Violation& from);
  void MergeFrom(const Violation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Violation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "buf.validate.Violation";
  }
  protected:
  explicit Violation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_buf_2fvalidate_2fvalidate_2eproto);
    return ::descriptor_table_buf_2fvalidate_2fvalidate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRuleIdFieldNumber = 2,
    kMessageFieldNumber = 3,
    kFieldFieldNumber = 5,
    kRuleFieldNumber = 6,
    kForKeyFieldNumber = 4,
  };
  // optional string rule_id = 2[json_name = "ruleId"];
  bool has_rule_id() const;
  private:
  bool _internal_has_rule_id() const;
  public:
  void clear_rule_id();
  const std::string& rule_id() const;
  void set_rule_id(const std::string& value);
  void set_rule_id(std::string&& value);
  void set_rule_id(const char* value);
  void set_rule_id(const char* value, size_t size);
  std::string* mutable_rule_id();
  std::string* release_rule_id();
  void set_allocated_rule_id(std::string* rule_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_rule_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_rule_id(
      std::string* rule_id);
  private:
  const std::string& _internal_rule_id() const;
  void _internal_set_rule_id(const std::string& value);
  std::string* _internal_mutable_rule_id();
  public:

  // optional string message = 3[json_name = "message"];
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // optional .buf.validate.FieldPath field = 5[json_name = "field"];
  bool has_field() const;
  private:
  bool _internal_has_field() const;
  public:
  void clear_field();
  const ::buf::validate::FieldPath& field() const;
  ::buf::validate::FieldPath* release_field();
  ::buf::validate::FieldPath* mutable_field();
  void set_allocated_field(::buf::validate::FieldPath* field);
  private:
  const ::buf::validate::FieldPath& _internal_field() const;
  ::buf::validate::FieldPath* _internal_mutable_field();
  public:
  void unsafe_arena_set_allocated_field(
      ::buf::validate::FieldPath* field);
  ::buf::validate::FieldPath* unsafe_arena_release_field();

  // optional .buf.validate.FieldPath rule = 6[json_name = "rule"];
  bool has_rule() const;
  private:
  bool _internal_has_rule() const;
  public:
  void clear_rule();
  const ::buf::validate::FieldPath& rule() const;
  ::buf::validate::FieldPath* release_rule();
  ::buf::validate::FieldPath* mutable_rule();
  void set_allocated_rule(::buf::validate::FieldPath* rule);
  private:
  const ::buf::validate::FieldPath& _internal_rule() const;
  ::buf::validate::FieldPath* _internal_mutable_rule();
  public:
  void unsafe_arena_set_allocated_rule(
      ::buf::validate::FieldPath* rule);
  ::buf::validate::FieldPath* unsafe_arena_release_rule();

  // optional bool for_key = 4[json_name = "forKey"];
  bool has_for_key() const;
  private:
  bool _internal_has_for_key() const;
  public:
  void clear_for_key();
  bool for_key() const;
  void set_for_key(bool value);
  private:
  bool _internal_for_key() const;
  void _internal_set_for_key(bool value);
  public:

  // @@protoc_insertion_point(class_scope:buf.validate.Violation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rule_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::buf::validate::FieldPath* field_;
  ::buf::validate::FieldPath* rule_;
  bool for_key_;
  friend struct ::TableStruct_buf_2fvalidate_2fvalidate_2eproto;
};
// -------------------------------------------------------------------

class FieldPath PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:buf.validate.FieldPath) */ {
 public:
  inline FieldPath() : FieldPath(nullptr) {};
  virtual ~FieldPath();

  FieldPath(const FieldPath& from);
  FieldPath(FieldPath&& from) noexcept
    : FieldPath() {
    *this = ::std::move(from);
  }

  inline FieldPath& operator=(const FieldPath& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldPath& operator=(FieldPath&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FieldPath& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FieldPath* internal_default_instance() {
    return reinterpret_cast<const FieldPath*>(
               &_FieldPath_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(FieldPath& a, FieldPath& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldPath* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FieldPath* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FieldPath* New() const final {
    return CreateMaybeMessage<FieldPath>(nullptr);
  }

  FieldPath* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FieldPath>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FieldPath& from);
  void MergeFrom(const FieldPath& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldPath* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "buf.validate.FieldPath";
  }
  protected:
  explicit FieldPath(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_buf_2fvalidate_2fvalidate_2eproto);
    return ::descriptor_table_buf_2fvalidate_2fvalidate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementsFieldNumber = 1,
  };
  // repeated .buf.validate.FieldPathElement elements = 1[json_name = "elements"];
  int elements_size() const;
  private:
  int _internal_elements_size() const;
  public:
  void clear_elements();
  ::buf::validate::FieldPathElement* mutable_elements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::buf::validate::FieldPathElement >*
      mutable_elements();
  private:
  const ::buf::validate::FieldPathElement& _internal_elements(int index) const;
  ::buf::validate::FieldPathElement* _internal_add_elements();
  public:
  const ::buf::validate::FieldPathElement& elements(int index) const;
  ::buf::validate::FieldPathElement* add_elements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::buf::validate::FieldPathElement >&
      elements() const;

  // @@protoc_insertion_point(class_scope:buf.validate.FieldPath)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::buf::validate::FieldPathElement > elements_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_buf_2fvalidate_2fvalidate_2eproto;
};
// -------------------------------------------------------------------

class FieldPathElement PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:buf.validate.FieldPathElement) */ {
 public:
  inline FieldPathElement() : FieldPathElement(nullptr) {};
  virtual ~FieldPathElement();

  FieldPathElement(const FieldPathElement& from);
  FieldPathElement(FieldPathElement&& from) noexcept
    : FieldPathElement() {
    *this = ::std::move(from);
  }

  inline FieldPathElement& operator=(const FieldPathElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldPathElement& operator=(FieldPathElement&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FieldPathElement& default_instance();

  enum SubscriptCase {
    kIndex = 6,
    kBoolKey = 7,
    kIntKey = 8,
    kUintKey = 9,
    kStringKey = 10,
    SUBSCRIPT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FieldPathElement* internal_default_instance() {
    return reinterpret_cast<const FieldPathElement*>(
               &_FieldPathElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(FieldPathElement& a, FieldPathElement& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldPathElement* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FieldPathElement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FieldPathElement* New() const final {
    return CreateMaybeMessage<FieldPathElement>(nullptr);
  }

  FieldPathElement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FieldPathElement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FieldPathElement& from);
  void MergeFrom(const FieldPathElement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldPathElement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "buf.validate.FieldPathElement";
  }
  protected:
  explicit FieldPathElement(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_buf_2fvalidate_2fvalidate_2eproto);
    return ::descriptor_table_buf_2fvalidate_2fvalidate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldNameFieldNumber = 2,
    kFieldNumberFieldNumber = 1,
    kValueTypeFieldNumber = 5,
    kFieldTypeFieldNumber = 3,
    kKeyTypeFieldNumber = 4,
    kIndexFieldNumber = 6,
    kBoolKeyFieldNumber = 7,
    kIntKeyFieldNumber = 8,
    kUintKeyFieldNumber = 9,
    kStringKeyFieldNumber = 10,
  };
  // optional string field_name = 2[json_name = "fieldName"];
  bool has_field_name() const;
  private:
  bool _internal_has_field_name() const;
  public:
  void clear_field_name();
  const std::string& field_name() const;
  void set_field_name(const std::string& value);
  void set_field_name(std::string&& value);
  void set_field_name(const char* value);
  void set_field_name(const char* value, size_t size);
  std::string* mutable_field_name();
  std::string* release_field_name();
  void set_allocated_field_name(std::string* field_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_field_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_field_name(
      std::string* field_name);
  private:
  const std::string& _internal_field_name() const;
  void _internal_set_field_name(const std::string& value);
  std::string* _internal_mutable_field_name();
  public:

  // optional int32 field_number = 1[json_name = "fieldNumber"];
  bool has_field_number() const;
  private:
  bool _internal_has_field_number() const;
  public:
  void clear_field_number();
  ::PROTOBUF_NAMESPACE_ID::int32 field_number() const;
  void set_field_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_field_number() const;
  void _internal_set_field_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .google.protobuf.FieldDescriptorProto.Type value_type = 5[json_name = "valueType"];
  bool has_value_type() const;
  private:
  bool _internal_has_value_type() const;
  public:
  void clear_value_type();
  PROTOBUF_NAMESPACE_ID::FieldDescriptorProto_Type value_type() const;
  void set_value_type(PROTOBUF_NAMESPACE_ID::FieldDescriptorProto_Type value);
  private:
  PROTOBUF_NAMESPACE_ID::FieldDescriptorProto_Type _internal_value_type() const;
  void _internal_set_value_type(PROTOBUF_NAMESPACE_ID::FieldDescriptorProto_Type value);
  public:

  // optional .google.protobuf.FieldDescriptorProto.Type field_type = 3[json_name = "fieldType"];
  bool has_field_type() const;
  private:
  bool _internal_has_field_type() const;
  public:
  void clear_field_type();
  PROTOBUF_NAMESPACE_ID::FieldDescriptorProto_Type field_type() const;
  void set_field_type(PROTOBUF_NAMESPACE_ID::FieldDescriptorProto_Type value);
  private:
  PROTOBUF_NAMESPACE_ID::FieldDescriptorProto_Type _internal_field_type() const;
  void _internal_set_field_type(PROTOBUF_NAMESPACE_ID::FieldDescriptorProto_Type value);
  public:

  // optional .google.protobuf.FieldDescriptorProto.Type key_type = 4[json_name = "keyType"];
  bool has_key_type() const;
  private:
  bool _internal_has_key_type() const;
  public:
  void clear_key_type();
  PROTOBUF_NAMESPACE_ID::FieldDescriptorProto_Type key_type() const;
  void set_key_type(PROTOBUF_NAMESPACE_ID::FieldDescriptorProto_Type value);
  private:
  PROTOBUF_NAMESPACE_ID::FieldDescriptorProto_Type _internal_key_type() const;
  void _internal_set_key_type(PROTOBUF_NAMESPACE_ID::FieldDescriptorProto_Type value);
  public:

  // uint64 index = 6[json_name = "index"];
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool bool_key = 7[json_name = "boolKey"];
  bool has_bool_key() const;
  private:
  bool _internal_has_bool_key() const;
  public:
  void clear_bool_key();
  bool bool_key() const;
  void set_bool_key(bool value);
  private:
  bool _internal_bool_key() const;
  void _internal_set_bool_key(bool value);
  public:

  // int64 int_key = 8[json_name = "intKey"];
  bool has_int_key() const;
  private:
  bool _internal_has_int_key() const;
  public:
  void clear_int_key();
  ::PROTOBUF_NAMESPACE_ID::int64 int_key() const;
  void set_int_key(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_int_key() const;
  void _internal_set_int_key(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 uint_key = 9[json_name = "uintKey"];
  bool has_uint_key() const;
  private:
  bool _internal_has_uint_key() const;
  public:
  void clear_uint_key();
  ::PROTOBUF_NAMESPACE_ID::uint64 uint_key() const;
  void set_uint_key(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_uint_key() const;
  void _internal_set_uint_key(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // string string_key = 10[json_name = "stringKey"];
  bool has_string_key() const;
  private:
  bool _internal_has_string_key() const;
  public:
  void clear_string_key();
  const std::string& string_key() const;
  void set_string_key(const std::string& value);
  void set_string_key(std::string&& value);
  void set_string_key(const char* value);
  void set_string_key(const char* value, size_t size);
  std::string* mutable_string_key();
  std::string* release_string_key();
  void set_allocated_string_key(std::string* string_key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_string_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_string_key(
      std::string* string_key);
  private:
  const std::string& _internal_string_key() const;
  void _internal_set_string_key(const std::string& value);
  std::string* _internal_mutable_string_key();
  public:

  void clear_subscript();
  SubscriptCase subscript_case() const;
  // @@protoc_insertion_point(class_scope:buf.validate.FieldPathElement)
 private:
  class _Internal;
  void set_has_index();
  void set_has_bool_key();
  void set_has_int_key();
  void set_has_uint_key();
  void set_has_string_key();

  inline bool has_subscript() const;
  inline void clear_has_subscript();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 field_number_;
  int value_type_;
  int field_type_;
  int key_type_;
  union SubscriptUnion {
    SubscriptUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint64 index_;
    bool bool_key_;
    ::PROTOBUF_NAMESPACE_ID::int64 int_key_;
    ::PROTOBUF_NAMESPACE_ID::uint64 uint_key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_key_;
  } subscript_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_buf_2fvalidate_2fvalidate_2eproto;
};
// ===================================================================

static const int kMessageFieldNumber = 1159;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::buf::validate::MessageRules >, 11, false >
  message;
static const int kOneofFieldNumber = 1159;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::OneofOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::buf::validate::OneofRules >, 11, false >
  oneof;
static const int kFieldFieldNumber = 1159;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::buf::validate::FieldRules >, 11, false >
  field;
static const int kPredefinedFieldNumber = 1160;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::buf::validate::PredefinedRules >, 11, false >
  predefined;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Rule

// optional string id = 1[json_name = "id"];
inline bool Rule::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Rule::has_id() const {
  return _internal_has_id();
}
inline void Rule::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Rule::id() const {
  // @@protoc_insertion_point(field_get:buf.validate.Rule.id)
  return _internal_id();
}
inline void Rule::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:buf.validate.Rule.id)
}
inline std::string* Rule::mutable_id() {
  // @@protoc_insertion_point(field_mutable:buf.validate.Rule.id)
  return _internal_mutable_id();
}
inline const std::string& Rule::_internal_id() const {
  return id_.Get();
}
inline void Rule::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Rule::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:buf.validate.Rule.id)
}
inline void Rule::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:buf.validate.Rule.id)
}
inline void Rule::set_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:buf.validate.Rule.id)
}
inline std::string* Rule::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Rule::release_id() {
  // @@protoc_insertion_point(field_release:buf.validate.Rule.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Rule::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:buf.validate.Rule.id)
}
inline std::string* Rule::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:buf.validate.Rule.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Rule::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:buf.validate.Rule.id)
}

// optional string message = 2[json_name = "message"];
inline bool Rule::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Rule::has_message() const {
  return _internal_has_message();
}
inline void Rule::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Rule::message() const {
  // @@protoc_insertion_point(field_get:buf.validate.Rule.message)
  return _internal_message();
}
inline void Rule::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:buf.validate.Rule.message)
}
inline std::string* Rule::mutable_message() {
  // @@protoc_insertion_point(field_mutable:buf.validate.Rule.message)
  return _internal_mutable_message();
}
inline const std::string& Rule::_internal_message() const {
  return message_.Get();
}
inline void Rule::_internal_set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Rule::set_message(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:buf.validate.Rule.message)
}
inline void Rule::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:buf.validate.Rule.message)
}
inline void Rule::set_message(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:buf.validate.Rule.message)
}
inline std::string* Rule::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000002u;
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Rule::release_message() {
  // @@protoc_insertion_point(field_release:buf.validate.Rule.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Rule::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:buf.validate.Rule.message)
}
inline std::string* Rule::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:buf.validate.Rule.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Rule::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:buf.validate.Rule.message)
}

// optional string expression = 3[json_name = "expression"];
inline bool Rule::_internal_has_expression() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Rule::has_expression() const {
  return _internal_has_expression();
}
inline void Rule::clear_expression() {
  expression_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Rule::expression() const {
  // @@protoc_insertion_point(field_get:buf.validate.Rule.expression)
  return _internal_expression();
}
inline void Rule::set_expression(const std::string& value) {
  _internal_set_expression(value);
  // @@protoc_insertion_point(field_set:buf.validate.Rule.expression)
}
inline std::string* Rule::mutable_expression() {
  // @@protoc_insertion_point(field_mutable:buf.validate.Rule.expression)
  return _internal_mutable_expression();
}
inline const std::string& Rule::_internal_expression() const {
  return expression_.Get();
}
inline void Rule::_internal_set_expression(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  expression_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Rule::set_expression(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  expression_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:buf.validate.Rule.expression)
}
inline void Rule::set_expression(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  expression_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:buf.validate.Rule.expression)
}
inline void Rule::set_expression(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  expression_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:buf.validate.Rule.expression)
}
inline std::string* Rule::_internal_mutable_expression() {
  _has_bits_[0] |= 0x00000004u;
  return expression_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Rule::release_expression() {
  // @@protoc_insertion_point(field_release:buf.validate.Rule.expression)
  if (!_internal_has_expression()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return expression_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Rule::set_allocated_expression(std::string* expression) {
  if (expression != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  expression_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), expression,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:buf.validate.Rule.expression)
}
inline std::string* Rule::unsafe_arena_release_expression() {
  // @@protoc_insertion_point(field_unsafe_arena_release:buf.validate.Rule.expression)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return expression_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Rule::unsafe_arena_set_allocated_expression(
    std::string* expression) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (expression != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  expression_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      expression, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:buf.validate.Rule.expression)
}

// -------------------------------------------------------------------

// MessageRules

// optional bool disabled = 1[json_name = "disabled"];
inline bool MessageRules::_internal_has_disabled() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MessageRules::has_disabled() const {
  return _internal_has_disabled();
}
inline void MessageRules::clear_disabled() {
  disabled_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool MessageRules::_internal_disabled() const {
  return disabled_;
}
inline bool MessageRules::disabled() const {
  // @@protoc_insertion_point(field_get:buf.validate.MessageRules.disabled)
  return _internal_disabled();
}
inline void MessageRules::_internal_set_disabled(bool value) {
  _has_bits_[0] |= 0x00000001u;
  disabled_ = value;
}
inline void MessageRules::set_disabled(bool value) {
  _internal_set_disabled(value);
  // @@protoc_insertion_point(field_set:buf.validate.MessageRules.disabled)
}

// repeated .buf.validate.Rule cel = 3[json_name = "cel"];
inline int MessageRules::_internal_cel_size() const {
  return cel_.size();
}
inline int MessageRules::cel_size() const {
  return _internal_cel_size();
}
inline void MessageRules::clear_cel() {
  cel_.Clear();
}
inline ::buf::validate::Rule* MessageRules::mutable_cel(int index) {
  // @@protoc_insertion_point(field_mutable:buf.validate.MessageRules.cel)
  return cel_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::buf::validate::Rule >*
MessageRules::mutable_cel() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.MessageRules.cel)
  return &cel_;
}
inline const ::buf::validate::Rule& MessageRules::_internal_cel(int index) const {
  return cel_.Get(index);
}
inline const ::buf::validate::Rule& MessageRules::cel(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.MessageRules.cel)
  return _internal_cel(index);
}
inline ::buf::validate::Rule* MessageRules::_internal_add_cel() {
  return cel_.Add();
}
inline ::buf::validate::Rule* MessageRules::add_cel() {
  // @@protoc_insertion_point(field_add:buf.validate.MessageRules.cel)
  return _internal_add_cel();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::buf::validate::Rule >&
MessageRules::cel() const {
  // @@protoc_insertion_point(field_list:buf.validate.MessageRules.cel)
  return cel_;
}

// repeated .buf.validate.MessageOneofRule oneof = 4[json_name = "oneof"];
inline int MessageRules::_internal_oneof_size() const {
  return oneof_.size();
}
inline int MessageRules::oneof_size() const {
  return _internal_oneof_size();
}
inline void MessageRules::clear_oneof() {
  oneof_.Clear();
}
inline ::buf::validate::MessageOneofRule* MessageRules::mutable_oneof(int index) {
  // @@protoc_insertion_point(field_mutable:buf.validate.MessageRules.oneof)
  return oneof_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::buf::validate::MessageOneofRule >*
MessageRules::mutable_oneof() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.MessageRules.oneof)
  return &oneof_;
}
inline const ::buf::validate::MessageOneofRule& MessageRules::_internal_oneof(int index) const {
  return oneof_.Get(index);
}
inline const ::buf::validate::MessageOneofRule& MessageRules::oneof(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.MessageRules.oneof)
  return _internal_oneof(index);
}
inline ::buf::validate::MessageOneofRule* MessageRules::_internal_add_oneof() {
  return oneof_.Add();
}
inline ::buf::validate::MessageOneofRule* MessageRules::add_oneof() {
  // @@protoc_insertion_point(field_add:buf.validate.MessageRules.oneof)
  return _internal_add_oneof();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::buf::validate::MessageOneofRule >&
MessageRules::oneof() const {
  // @@protoc_insertion_point(field_list:buf.validate.MessageRules.oneof)
  return oneof_;
}

// -------------------------------------------------------------------

// MessageOneofRule

// repeated string fields = 1[json_name = "fields"];
inline int MessageOneofRule::_internal_fields_size() const {
  return fields_.size();
}
inline int MessageOneofRule::fields_size() const {
  return _internal_fields_size();
}
inline void MessageOneofRule::clear_fields() {
  fields_.Clear();
}
inline std::string* MessageOneofRule::add_fields() {
  // @@protoc_insertion_point(field_add_mutable:buf.validate.MessageOneofRule.fields)
  return _internal_add_fields();
}
inline const std::string& MessageOneofRule::_internal_fields(int index) const {
  return fields_.Get(index);
}
inline const std::string& MessageOneofRule::fields(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.MessageOneofRule.fields)
  return _internal_fields(index);
}
inline std::string* MessageOneofRule::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:buf.validate.MessageOneofRule.fields)
  return fields_.Mutable(index);
}
inline void MessageOneofRule::set_fields(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:buf.validate.MessageOneofRule.fields)
  fields_.Mutable(index)->assign(value);
}
inline void MessageOneofRule::set_fields(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:buf.validate.MessageOneofRule.fields)
  fields_.Mutable(index)->assign(std::move(value));
}
inline void MessageOneofRule::set_fields(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:buf.validate.MessageOneofRule.fields)
}
inline void MessageOneofRule::set_fields(int index, const char* value, size_t size) {
  fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:buf.validate.MessageOneofRule.fields)
}
inline std::string* MessageOneofRule::_internal_add_fields() {
  return fields_.Add();
}
inline void MessageOneofRule::add_fields(const std::string& value) {
  fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:buf.validate.MessageOneofRule.fields)
}
inline void MessageOneofRule::add_fields(std::string&& value) {
  fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:buf.validate.MessageOneofRule.fields)
}
inline void MessageOneofRule::add_fields(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:buf.validate.MessageOneofRule.fields)
}
inline void MessageOneofRule::add_fields(const char* value, size_t size) {
  fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:buf.validate.MessageOneofRule.fields)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MessageOneofRule::fields() const {
  // @@protoc_insertion_point(field_list:buf.validate.MessageOneofRule.fields)
  return fields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MessageOneofRule::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.MessageOneofRule.fields)
  return &fields_;
}

// optional bool required = 2[json_name = "required"];
inline bool MessageOneofRule::_internal_has_required() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MessageOneofRule::has_required() const {
  return _internal_has_required();
}
inline void MessageOneofRule::clear_required() {
  required_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool MessageOneofRule::_internal_required() const {
  return required_;
}
inline bool MessageOneofRule::required() const {
  // @@protoc_insertion_point(field_get:buf.validate.MessageOneofRule.required)
  return _internal_required();
}
inline void MessageOneofRule::_internal_set_required(bool value) {
  _has_bits_[0] |= 0x00000001u;
  required_ = value;
}
inline void MessageOneofRule::set_required(bool value) {
  _internal_set_required(value);
  // @@protoc_insertion_point(field_set:buf.validate.MessageOneofRule.required)
}

// -------------------------------------------------------------------

// OneofRules

// optional bool required = 1[json_name = "required"];
inline bool OneofRules::_internal_has_required() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OneofRules::has_required() const {
  return _internal_has_required();
}
inline void OneofRules::clear_required() {
  required_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool OneofRules::_internal_required() const {
  return required_;
}
inline bool OneofRules::required() const {
  // @@protoc_insertion_point(field_get:buf.validate.OneofRules.required)
  return _internal_required();
}
inline void OneofRules::_internal_set_required(bool value) {
  _has_bits_[0] |= 0x00000001u;
  required_ = value;
}
inline void OneofRules::set_required(bool value) {
  _internal_set_required(value);
  // @@protoc_insertion_point(field_set:buf.validate.OneofRules.required)
}

// -------------------------------------------------------------------

// FieldRules

// repeated .buf.validate.Rule cel = 23[json_name = "cel"];
inline int FieldRules::_internal_cel_size() const {
  return cel_.size();
}
inline int FieldRules::cel_size() const {
  return _internal_cel_size();
}
inline void FieldRules::clear_cel() {
  cel_.Clear();
}
inline ::buf::validate::Rule* FieldRules::mutable_cel(int index) {
  // @@protoc_insertion_point(field_mutable:buf.validate.FieldRules.cel)
  return cel_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::buf::validate::Rule >*
FieldRules::mutable_cel() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.FieldRules.cel)
  return &cel_;
}
inline const ::buf::validate::Rule& FieldRules::_internal_cel(int index) const {
  return cel_.Get(index);
}
inline const ::buf::validate::Rule& FieldRules::cel(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.FieldRules.cel)
  return _internal_cel(index);
}
inline ::buf::validate::Rule* FieldRules::_internal_add_cel() {
  return cel_.Add();
}
inline ::buf::validate::Rule* FieldRules::add_cel() {
  // @@protoc_insertion_point(field_add:buf.validate.FieldRules.cel)
  return _internal_add_cel();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::buf::validate::Rule >&
FieldRules::cel() const {
  // @@protoc_insertion_point(field_list:buf.validate.FieldRules.cel)
  return cel_;
}

// optional bool required = 25[json_name = "required"];
inline bool FieldRules::_internal_has_required() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FieldRules::has_required() const {
  return _internal_has_required();
}
inline void FieldRules::clear_required() {
  required_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool FieldRules::_internal_required() const {
  return required_;
}
inline bool FieldRules::required() const {
  // @@protoc_insertion_point(field_get:buf.validate.FieldRules.required)
  return _internal_required();
}
inline void FieldRules::_internal_set_required(bool value) {
  _has_bits_[0] |= 0x00000001u;
  required_ = value;
}
inline void FieldRules::set_required(bool value) {
  _internal_set_required(value);
  // @@protoc_insertion_point(field_set:buf.validate.FieldRules.required)
}

// optional .buf.validate.Ignore ignore = 27[json_name = "ignore"];
inline bool FieldRules::_internal_has_ignore() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FieldRules::has_ignore() const {
  return _internal_has_ignore();
}
inline void FieldRules::clear_ignore() {
  ignore_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::buf::validate::Ignore FieldRules::_internal_ignore() const {
  return static_cast< ::buf::validate::Ignore >(ignore_);
}
inline ::buf::validate::Ignore FieldRules::ignore() const {
  // @@protoc_insertion_point(field_get:buf.validate.FieldRules.ignore)
  return _internal_ignore();
}
inline void FieldRules::_internal_set_ignore(::buf::validate::Ignore value) {
  assert(::buf::validate::Ignore_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  ignore_ = value;
}
inline void FieldRules::set_ignore(::buf::validate::Ignore value) {
  _internal_set_ignore(value);
  // @@protoc_insertion_point(field_set:buf.validate.FieldRules.ignore)
}

// .buf.validate.FloatRules float = 1[json_name = "float"];
inline bool FieldRules::_internal_has_float_() const {
  return type_case() == kFloat;
}
inline bool FieldRules::has_float_() const {
  return _internal_has_float_();
}
inline void FieldRules::set_has_float_() {
  _oneof_case_[0] = kFloat;
}
inline void FieldRules::clear_float_() {
  if (_internal_has_float_()) {
    if (GetArena() == nullptr) {
      delete type_.float__;
    }
    clear_has_type();
  }
}
inline ::buf::validate::FloatRules* FieldRules::release_float_() {
  // @@protoc_insertion_point(field_release:buf.validate.FieldRules.float)
  if (_internal_has_float_()) {
    clear_has_type();
      ::buf::validate::FloatRules* temp = type_.float__;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.float__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::buf::validate::FloatRules& FieldRules::_internal_float_() const {
  return _internal_has_float_()
      ? *type_.float__
      : *reinterpret_cast< ::buf::validate::FloatRules*>(&::buf::validate::_FloatRules_default_instance_);
}
inline const ::buf::validate::FloatRules& FieldRules::float_() const {
  // @@protoc_insertion_point(field_get:buf.validate.FieldRules.float)
  return _internal_float_();
}
inline ::buf::validate::FloatRules* FieldRules::unsafe_arena_release_float_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:buf.validate.FieldRules.float)
  if (_internal_has_float_()) {
    clear_has_type();
    ::buf::validate::FloatRules* temp = type_.float__;
    type_.float__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FieldRules::unsafe_arena_set_allocated_float_(::buf::validate::FloatRules* float_) {
  clear_type();
  if (float_) {
    set_has_float_();
    type_.float__ = float_;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:buf.validate.FieldRules.float)
}
inline ::buf::validate::FloatRules* FieldRules::_internal_mutable_float_() {
  if (!_internal_has_float_()) {
    clear_type();
    set_has_float_();
    type_.float__ = CreateMaybeMessage< ::buf::validate::FloatRules >(GetArena());
  }
  return type_.float__;
}
inline ::buf::validate::FloatRules* FieldRules::mutable_float_() {
  // @@protoc_insertion_point(field_mutable:buf.validate.FieldRules.float)
  return _internal_mutable_float_();
}

// .buf.validate.DoubleRules double = 2[json_name = "double"];
inline bool FieldRules::_internal_has_double_() const {
  return type_case() == kDouble;
}
inline bool FieldRules::has_double_() const {
  return _internal_has_double_();
}
inline void FieldRules::set_has_double_() {
  _oneof_case_[0] = kDouble;
}
inline void FieldRules::clear_double_() {
  if (_internal_has_double_()) {
    if (GetArena() == nullptr) {
      delete type_.double__;
    }
    clear_has_type();
  }
}
inline ::buf::validate::DoubleRules* FieldRules::release_double_() {
  // @@protoc_insertion_point(field_release:buf.validate.FieldRules.double)
  if (_internal_has_double_()) {
    clear_has_type();
      ::buf::validate::DoubleRules* temp = type_.double__;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.double__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::buf::validate::DoubleRules& FieldRules::_internal_double_() const {
  return _internal_has_double_()
      ? *type_.double__
      : *reinterpret_cast< ::buf::validate::DoubleRules*>(&::buf::validate::_DoubleRules_default_instance_);
}
inline const ::buf::validate::DoubleRules& FieldRules::double_() const {
  // @@protoc_insertion_point(field_get:buf.validate.FieldRules.double)
  return _internal_double_();
}
inline ::buf::validate::DoubleRules* FieldRules::unsafe_arena_release_double_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:buf.validate.FieldRules.double)
  if (_internal_has_double_()) {
    clear_has_type();
    ::buf::validate::DoubleRules* temp = type_.double__;
    type_.double__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FieldRules::unsafe_arena_set_allocated_double_(::buf::validate::DoubleRules* double_) {
  clear_type();
  if (double_) {
    set_has_double_();
    type_.double__ = double_;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:buf.validate.FieldRules.double)
}
inline ::buf::validate::DoubleRules* FieldRules::_internal_mutable_double_() {
  if (!_internal_has_double_()) {
    clear_type();
    set_has_double_();
    type_.double__ = CreateMaybeMessage< ::buf::validate::DoubleRules >(GetArena());
  }
  return type_.double__;
}
inline ::buf::validate::DoubleRules* FieldRules::mutable_double_() {
  // @@protoc_insertion_point(field_mutable:buf.validate.FieldRules.double)
  return _internal_mutable_double_();
}

// .buf.validate.Int32Rules int32 = 3[json_name = "int32"];
inline bool FieldRules::_internal_has_int32() const {
  return type_case() == kInt32;
}
inline bool FieldRules::has_int32() const {
  return _internal_has_int32();
}
inline void FieldRules::set_has_int32() {
  _oneof_case_[0] = kInt32;
}
inline void FieldRules::clear_int32() {
  if (_internal_has_int32()) {
    if (GetArena() == nullptr) {
      delete type_.int32_;
    }
    clear_has_type();
  }
}
inline ::buf::validate::Int32Rules* FieldRules::release_int32() {
  // @@protoc_insertion_point(field_release:buf.validate.FieldRules.int32)
  if (_internal_has_int32()) {
    clear_has_type();
      ::buf::validate::Int32Rules* temp = type_.int32_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.int32_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::buf::validate::Int32Rules& FieldRules::_internal_int32() const {
  return _internal_has_int32()
      ? *type_.int32_
      : *reinterpret_cast< ::buf::validate::Int32Rules*>(&::buf::validate::_Int32Rules_default_instance_);
}
inline const ::buf::validate::Int32Rules& FieldRules::int32() const {
  // @@protoc_insertion_point(field_get:buf.validate.FieldRules.int32)
  return _internal_int32();
}
inline ::buf::validate::Int32Rules* FieldRules::unsafe_arena_release_int32() {
  // @@protoc_insertion_point(field_unsafe_arena_release:buf.validate.FieldRules.int32)
  if (_internal_has_int32()) {
    clear_has_type();
    ::buf::validate::Int32Rules* temp = type_.int32_;
    type_.int32_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FieldRules::unsafe_arena_set_allocated_int32(::buf::validate::Int32Rules* int32) {
  clear_type();
  if (int32) {
    set_has_int32();
    type_.int32_ = int32;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:buf.validate.FieldRules.int32)
}
inline ::buf::validate::Int32Rules* FieldRules::_internal_mutable_int32() {
  if (!_internal_has_int32()) {
    clear_type();
    set_has_int32();
    type_.int32_ = CreateMaybeMessage< ::buf::validate::Int32Rules >(GetArena());
  }
  return type_.int32_;
}
inline ::buf::validate::Int32Rules* FieldRules::mutable_int32() {
  // @@protoc_insertion_point(field_mutable:buf.validate.FieldRules.int32)
  return _internal_mutable_int32();
}

// .buf.validate.Int64Rules int64 = 4[json_name = "int64"];
inline bool FieldRules::_internal_has_int64() const {
  return type_case() == kInt64;
}
inline bool FieldRules::has_int64() const {
  return _internal_has_int64();
}
inline void FieldRules::set_has_int64() {
  _oneof_case_[0] = kInt64;
}
inline void FieldRules::clear_int64() {
  if (_internal_has_int64()) {
    if (GetArena() == nullptr) {
      delete type_.int64_;
    }
    clear_has_type();
  }
}
inline ::buf::validate::Int64Rules* FieldRules::release_int64() {
  // @@protoc_insertion_point(field_release:buf.validate.FieldRules.int64)
  if (_internal_has_int64()) {
    clear_has_type();
      ::buf::validate::Int64Rules* temp = type_.int64_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.int64_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::buf::validate::Int64Rules& FieldRules::_internal_int64() const {
  return _internal_has_int64()
      ? *type_.int64_
      : *reinterpret_cast< ::buf::validate::Int64Rules*>(&::buf::validate::_Int64Rules_default_instance_);
}
inline const ::buf::validate::Int64Rules& FieldRules::int64() const {
  // @@protoc_insertion_point(field_get:buf.validate.FieldRules.int64)
  return _internal_int64();
}
inline ::buf::validate::Int64Rules* FieldRules::unsafe_arena_release_int64() {
  // @@protoc_insertion_point(field_unsafe_arena_release:buf.validate.FieldRules.int64)
  if (_internal_has_int64()) {
    clear_has_type();
    ::buf::validate::Int64Rules* temp = type_.int64_;
    type_.int64_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FieldRules::unsafe_arena_set_allocated_int64(::buf::validate::Int64Rules* int64) {
  clear_type();
  if (int64) {
    set_has_int64();
    type_.int64_ = int64;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:buf.validate.FieldRules.int64)
}
inline ::buf::validate::Int64Rules* FieldRules::_internal_mutable_int64() {
  if (!_internal_has_int64()) {
    clear_type();
    set_has_int64();
    type_.int64_ = CreateMaybeMessage< ::buf::validate::Int64Rules >(GetArena());
  }
  return type_.int64_;
}
inline ::buf::validate::Int64Rules* FieldRules::mutable_int64() {
  // @@protoc_insertion_point(field_mutable:buf.validate.FieldRules.int64)
  return _internal_mutable_int64();
}

// .buf.validate.UInt32Rules uint32 = 5[json_name = "uint32"];
inline bool FieldRules::_internal_has_uint32() const {
  return type_case() == kUint32;
}
inline bool FieldRules::has_uint32() const {
  return _internal_has_uint32();
}
inline void FieldRules::set_has_uint32() {
  _oneof_case_[0] = kUint32;
}
inline void FieldRules::clear_uint32() {
  if (_internal_has_uint32()) {
    if (GetArena() == nullptr) {
      delete type_.uint32_;
    }
    clear_has_type();
  }
}
inline ::buf::validate::UInt32Rules* FieldRules::release_uint32() {
  // @@protoc_insertion_point(field_release:buf.validate.FieldRules.uint32)
  if (_internal_has_uint32()) {
    clear_has_type();
      ::buf::validate::UInt32Rules* temp = type_.uint32_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.uint32_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::buf::validate::UInt32Rules& FieldRules::_internal_uint32() const {
  return _internal_has_uint32()
      ? *type_.uint32_
      : *reinterpret_cast< ::buf::validate::UInt32Rules*>(&::buf::validate::_UInt32Rules_default_instance_);
}
inline const ::buf::validate::UInt32Rules& FieldRules::uint32() const {
  // @@protoc_insertion_point(field_get:buf.validate.FieldRules.uint32)
  return _internal_uint32();
}
inline ::buf::validate::UInt32Rules* FieldRules::unsafe_arena_release_uint32() {
  // @@protoc_insertion_point(field_unsafe_arena_release:buf.validate.FieldRules.uint32)
  if (_internal_has_uint32()) {
    clear_has_type();
    ::buf::validate::UInt32Rules* temp = type_.uint32_;
    type_.uint32_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FieldRules::unsafe_arena_set_allocated_uint32(::buf::validate::UInt32Rules* uint32) {
  clear_type();
  if (uint32) {
    set_has_uint32();
    type_.uint32_ = uint32;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:buf.validate.FieldRules.uint32)
}
inline ::buf::validate::UInt32Rules* FieldRules::_internal_mutable_uint32() {
  if (!_internal_has_uint32()) {
    clear_type();
    set_has_uint32();
    type_.uint32_ = CreateMaybeMessage< ::buf::validate::UInt32Rules >(GetArena());
  }
  return type_.uint32_;
}
inline ::buf::validate::UInt32Rules* FieldRules::mutable_uint32() {
  // @@protoc_insertion_point(field_mutable:buf.validate.FieldRules.uint32)
  return _internal_mutable_uint32();
}

// .buf.validate.UInt64Rules uint64 = 6[json_name = "uint64"];
inline bool FieldRules::_internal_has_uint64() const {
  return type_case() == kUint64;
}
inline bool FieldRules::has_uint64() const {
  return _internal_has_uint64();
}
inline void FieldRules::set_has_uint64() {
  _oneof_case_[0] = kUint64;
}
inline void FieldRules::clear_uint64() {
  if (_internal_has_uint64()) {
    if (GetArena() == nullptr) {
      delete type_.uint64_;
    }
    clear_has_type();
  }
}
inline ::buf::validate::UInt64Rules* FieldRules::release_uint64() {
  // @@protoc_insertion_point(field_release:buf.validate.FieldRules.uint64)
  if (_internal_has_uint64()) {
    clear_has_type();
      ::buf::validate::UInt64Rules* temp = type_.uint64_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.uint64_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::buf::validate::UInt64Rules& FieldRules::_internal_uint64() const {
  return _internal_has_uint64()
      ? *type_.uint64_
      : *reinterpret_cast< ::buf::validate::UInt64Rules*>(&::buf::validate::_UInt64Rules_default_instance_);
}
inline const ::buf::validate::UInt64Rules& FieldRules::uint64() const {
  // @@protoc_insertion_point(field_get:buf.validate.FieldRules.uint64)
  return _internal_uint64();
}
inline ::buf::validate::UInt64Rules* FieldRules::unsafe_arena_release_uint64() {
  // @@protoc_insertion_point(field_unsafe_arena_release:buf.validate.FieldRules.uint64)
  if (_internal_has_uint64()) {
    clear_has_type();
    ::buf::validate::UInt64Rules* temp = type_.uint64_;
    type_.uint64_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FieldRules::unsafe_arena_set_allocated_uint64(::buf::validate::UInt64Rules* uint64) {
  clear_type();
  if (uint64) {
    set_has_uint64();
    type_.uint64_ = uint64;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:buf.validate.FieldRules.uint64)
}
inline ::buf::validate::UInt64Rules* FieldRules::_internal_mutable_uint64() {
  if (!_internal_has_uint64()) {
    clear_type();
    set_has_uint64();
    type_.uint64_ = CreateMaybeMessage< ::buf::validate::UInt64Rules >(GetArena());
  }
  return type_.uint64_;
}
inline ::buf::validate::UInt64Rules* FieldRules::mutable_uint64() {
  // @@protoc_insertion_point(field_mutable:buf.validate.FieldRules.uint64)
  return _internal_mutable_uint64();
}

// .buf.validate.SInt32Rules sint32 = 7[json_name = "sint32"];
inline bool FieldRules::_internal_has_sint32() const {
  return type_case() == kSint32;
}
inline bool FieldRules::has_sint32() const {
  return _internal_has_sint32();
}
inline void FieldRules::set_has_sint32() {
  _oneof_case_[0] = kSint32;
}
inline void FieldRules::clear_sint32() {
  if (_internal_has_sint32()) {
    if (GetArena() == nullptr) {
      delete type_.sint32_;
    }
    clear_has_type();
  }
}
inline ::buf::validate::SInt32Rules* FieldRules::release_sint32() {
  // @@protoc_insertion_point(field_release:buf.validate.FieldRules.sint32)
  if (_internal_has_sint32()) {
    clear_has_type();
      ::buf::validate::SInt32Rules* temp = type_.sint32_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.sint32_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::buf::validate::SInt32Rules& FieldRules::_internal_sint32() const {
  return _internal_has_sint32()
      ? *type_.sint32_
      : *reinterpret_cast< ::buf::validate::SInt32Rules*>(&::buf::validate::_SInt32Rules_default_instance_);
}
inline const ::buf::validate::SInt32Rules& FieldRules::sint32() const {
  // @@protoc_insertion_point(field_get:buf.validate.FieldRules.sint32)
  return _internal_sint32();
}
inline ::buf::validate::SInt32Rules* FieldRules::unsafe_arena_release_sint32() {
  // @@protoc_insertion_point(field_unsafe_arena_release:buf.validate.FieldRules.sint32)
  if (_internal_has_sint32()) {
    clear_has_type();
    ::buf::validate::SInt32Rules* temp = type_.sint32_;
    type_.sint32_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FieldRules::unsafe_arena_set_allocated_sint32(::buf::validate::SInt32Rules* sint32) {
  clear_type();
  if (sint32) {
    set_has_sint32();
    type_.sint32_ = sint32;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:buf.validate.FieldRules.sint32)
}
inline ::buf::validate::SInt32Rules* FieldRules::_internal_mutable_sint32() {
  if (!_internal_has_sint32()) {
    clear_type();
    set_has_sint32();
    type_.sint32_ = CreateMaybeMessage< ::buf::validate::SInt32Rules >(GetArena());
  }
  return type_.sint32_;
}
inline ::buf::validate::SInt32Rules* FieldRules::mutable_sint32() {
  // @@protoc_insertion_point(field_mutable:buf.validate.FieldRules.sint32)
  return _internal_mutable_sint32();
}

// .buf.validate.SInt64Rules sint64 = 8[json_name = "sint64"];
inline bool FieldRules::_internal_has_sint64() const {
  return type_case() == kSint64;
}
inline bool FieldRules::has_sint64() const {
  return _internal_has_sint64();
}
inline void FieldRules::set_has_sint64() {
  _oneof_case_[0] = kSint64;
}
inline void FieldRules::clear_sint64() {
  if (_internal_has_sint64()) {
    if (GetArena() == nullptr) {
      delete type_.sint64_;
    }
    clear_has_type();
  }
}
inline ::buf::validate::SInt64Rules* FieldRules::release_sint64() {
  // @@protoc_insertion_point(field_release:buf.validate.FieldRules.sint64)
  if (_internal_has_sint64()) {
    clear_has_type();
      ::buf::validate::SInt64Rules* temp = type_.sint64_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.sint64_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::buf::validate::SInt64Rules& FieldRules::_internal_sint64() const {
  return _internal_has_sint64()
      ? *type_.sint64_
      : *reinterpret_cast< ::buf::validate::SInt64Rules*>(&::buf::validate::_SInt64Rules_default_instance_);
}
inline const ::buf::validate::SInt64Rules& FieldRules::sint64() const {
  // @@protoc_insertion_point(field_get:buf.validate.FieldRules.sint64)
  return _internal_sint64();
}
inline ::buf::validate::SInt64Rules* FieldRules::unsafe_arena_release_sint64() {
  // @@protoc_insertion_point(field_unsafe_arena_release:buf.validate.FieldRules.sint64)
  if (_internal_has_sint64()) {
    clear_has_type();
    ::buf::validate::SInt64Rules* temp = type_.sint64_;
    type_.sint64_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FieldRules::unsafe_arena_set_allocated_sint64(::buf::validate::SInt64Rules* sint64) {
  clear_type();
  if (sint64) {
    set_has_sint64();
    type_.sint64_ = sint64;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:buf.validate.FieldRules.sint64)
}
inline ::buf::validate::SInt64Rules* FieldRules::_internal_mutable_sint64() {
  if (!_internal_has_sint64()) {
    clear_type();
    set_has_sint64();
    type_.sint64_ = CreateMaybeMessage< ::buf::validate::SInt64Rules >(GetArena());
  }
  return type_.sint64_;
}
inline ::buf::validate::SInt64Rules* FieldRules::mutable_sint64() {
  // @@protoc_insertion_point(field_mutable:buf.validate.FieldRules.sint64)
  return _internal_mutable_sint64();
}

// .buf.validate.Fixed32Rules fixed32 = 9[json_name = "fixed32"];
inline bool FieldRules::_internal_has_fixed32() const {
  return type_case() == kFixed32;
}
inline bool FieldRules::has_fixed32() const {
  return _internal_has_fixed32();
}
inline void FieldRules::set_has_fixed32() {
  _oneof_case_[0] = kFixed32;
}
inline void FieldRules::clear_fixed32() {
  if (_internal_has_fixed32()) {
    if (GetArena() == nullptr) {
      delete type_.fixed32_;
    }
    clear_has_type();
  }
}
inline ::buf::validate::Fixed32Rules* FieldRules::release_fixed32() {
  // @@protoc_insertion_point(field_release:buf.validate.FieldRules.fixed32)
  if (_internal_has_fixed32()) {
    clear_has_type();
      ::buf::validate::Fixed32Rules* temp = type_.fixed32_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.fixed32_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::buf::validate::Fixed32Rules& FieldRules::_internal_fixed32() const {
  return _internal_has_fixed32()
      ? *type_.fixed32_
      : *reinterpret_cast< ::buf::validate::Fixed32Rules*>(&::buf::validate::_Fixed32Rules_default_instance_);
}
inline const ::buf::validate::Fixed32Rules& FieldRules::fixed32() const {
  // @@protoc_insertion_point(field_get:buf.validate.FieldRules.fixed32)
  return _internal_fixed32();
}
inline ::buf::validate::Fixed32Rules* FieldRules::unsafe_arena_release_fixed32() {
  // @@protoc_insertion_point(field_unsafe_arena_release:buf.validate.FieldRules.fixed32)
  if (_internal_has_fixed32()) {
    clear_has_type();
    ::buf::validate::Fixed32Rules* temp = type_.fixed32_;
    type_.fixed32_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FieldRules::unsafe_arena_set_allocated_fixed32(::buf::validate::Fixed32Rules* fixed32) {
  clear_type();
  if (fixed32) {
    set_has_fixed32();
    type_.fixed32_ = fixed32;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:buf.validate.FieldRules.fixed32)
}
inline ::buf::validate::Fixed32Rules* FieldRules::_internal_mutable_fixed32() {
  if (!_internal_has_fixed32()) {
    clear_type();
    set_has_fixed32();
    type_.fixed32_ = CreateMaybeMessage< ::buf::validate::Fixed32Rules >(GetArena());
  }
  return type_.fixed32_;
}
inline ::buf::validate::Fixed32Rules* FieldRules::mutable_fixed32() {
  // @@protoc_insertion_point(field_mutable:buf.validate.FieldRules.fixed32)
  return _internal_mutable_fixed32();
}

// .buf.validate.Fixed64Rules fixed64 = 10[json_name = "fixed64"];
inline bool FieldRules::_internal_has_fixed64() const {
  return type_case() == kFixed64;
}
inline bool FieldRules::has_fixed64() const {
  return _internal_has_fixed64();
}
inline void FieldRules::set_has_fixed64() {
  _oneof_case_[0] = kFixed64;
}
inline void FieldRules::clear_fixed64() {
  if (_internal_has_fixed64()) {
    if (GetArena() == nullptr) {
      delete type_.fixed64_;
    }
    clear_has_type();
  }
}
inline ::buf::validate::Fixed64Rules* FieldRules::release_fixed64() {
  // @@protoc_insertion_point(field_release:buf.validate.FieldRules.fixed64)
  if (_internal_has_fixed64()) {
    clear_has_type();
      ::buf::validate::Fixed64Rules* temp = type_.fixed64_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.fixed64_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::buf::validate::Fixed64Rules& FieldRules::_internal_fixed64() const {
  return _internal_has_fixed64()
      ? *type_.fixed64_
      : *reinterpret_cast< ::buf::validate::Fixed64Rules*>(&::buf::validate::_Fixed64Rules_default_instance_);
}
inline const ::buf::validate::Fixed64Rules& FieldRules::fixed64() const {
  // @@protoc_insertion_point(field_get:buf.validate.FieldRules.fixed64)
  return _internal_fixed64();
}
inline ::buf::validate::Fixed64Rules* FieldRules::unsafe_arena_release_fixed64() {
  // @@protoc_insertion_point(field_unsafe_arena_release:buf.validate.FieldRules.fixed64)
  if (_internal_has_fixed64()) {
    clear_has_type();
    ::buf::validate::Fixed64Rules* temp = type_.fixed64_;
    type_.fixed64_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FieldRules::unsafe_arena_set_allocated_fixed64(::buf::validate::Fixed64Rules* fixed64) {
  clear_type();
  if (fixed64) {
    set_has_fixed64();
    type_.fixed64_ = fixed64;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:buf.validate.FieldRules.fixed64)
}
inline ::buf::validate::Fixed64Rules* FieldRules::_internal_mutable_fixed64() {
  if (!_internal_has_fixed64()) {
    clear_type();
    set_has_fixed64();
    type_.fixed64_ = CreateMaybeMessage< ::buf::validate::Fixed64Rules >(GetArena());
  }
  return type_.fixed64_;
}
inline ::buf::validate::Fixed64Rules* FieldRules::mutable_fixed64() {
  // @@protoc_insertion_point(field_mutable:buf.validate.FieldRules.fixed64)
  return _internal_mutable_fixed64();
}

// .buf.validate.SFixed32Rules sfixed32 = 11[json_name = "sfixed32"];
inline bool FieldRules::_internal_has_sfixed32() const {
  return type_case() == kSfixed32;
}
inline bool FieldRules::has_sfixed32() const {
  return _internal_has_sfixed32();
}
inline void FieldRules::set_has_sfixed32() {
  _oneof_case_[0] = kSfixed32;
}
inline void FieldRules::clear_sfixed32() {
  if (_internal_has_sfixed32()) {
    if (GetArena() == nullptr) {
      delete type_.sfixed32_;
    }
    clear_has_type();
  }
}
inline ::buf::validate::SFixed32Rules* FieldRules::release_sfixed32() {
  // @@protoc_insertion_point(field_release:buf.validate.FieldRules.sfixed32)
  if (_internal_has_sfixed32()) {
    clear_has_type();
      ::buf::validate::SFixed32Rules* temp = type_.sfixed32_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.sfixed32_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::buf::validate::SFixed32Rules& FieldRules::_internal_sfixed32() const {
  return _internal_has_sfixed32()
      ? *type_.sfixed32_
      : *reinterpret_cast< ::buf::validate::SFixed32Rules*>(&::buf::validate::_SFixed32Rules_default_instance_);
}
inline const ::buf::validate::SFixed32Rules& FieldRules::sfixed32() const {
  // @@protoc_insertion_point(field_get:buf.validate.FieldRules.sfixed32)
  return _internal_sfixed32();
}
inline ::buf::validate::SFixed32Rules* FieldRules::unsafe_arena_release_sfixed32() {
  // @@protoc_insertion_point(field_unsafe_arena_release:buf.validate.FieldRules.sfixed32)
  if (_internal_has_sfixed32()) {
    clear_has_type();
    ::buf::validate::SFixed32Rules* temp = type_.sfixed32_;
    type_.sfixed32_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FieldRules::unsafe_arena_set_allocated_sfixed32(::buf::validate::SFixed32Rules* sfixed32) {
  clear_type();
  if (sfixed32) {
    set_has_sfixed32();
    type_.sfixed32_ = sfixed32;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:buf.validate.FieldRules.sfixed32)
}
inline ::buf::validate::SFixed32Rules* FieldRules::_internal_mutable_sfixed32() {
  if (!_internal_has_sfixed32()) {
    clear_type();
    set_has_sfixed32();
    type_.sfixed32_ = CreateMaybeMessage< ::buf::validate::SFixed32Rules >(GetArena());
  }
  return type_.sfixed32_;
}
inline ::buf::validate::SFixed32Rules* FieldRules::mutable_sfixed32() {
  // @@protoc_insertion_point(field_mutable:buf.validate.FieldRules.sfixed32)
  return _internal_mutable_sfixed32();
}

// .buf.validate.SFixed64Rules sfixed64 = 12[json_name = "sfixed64"];
inline bool FieldRules::_internal_has_sfixed64() const {
  return type_case() == kSfixed64;
}
inline bool FieldRules::has_sfixed64() const {
  return _internal_has_sfixed64();
}
inline void FieldRules::set_has_sfixed64() {
  _oneof_case_[0] = kSfixed64;
}
inline void FieldRules::clear_sfixed64() {
  if (_internal_has_sfixed64()) {
    if (GetArena() == nullptr) {
      delete type_.sfixed64_;
    }
    clear_has_type();
  }
}
inline ::buf::validate::SFixed64Rules* FieldRules::release_sfixed64() {
  // @@protoc_insertion_point(field_release:buf.validate.FieldRules.sfixed64)
  if (_internal_has_sfixed64()) {
    clear_has_type();
      ::buf::validate::SFixed64Rules* temp = type_.sfixed64_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.sfixed64_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::buf::validate::SFixed64Rules& FieldRules::_internal_sfixed64() const {
  return _internal_has_sfixed64()
      ? *type_.sfixed64_
      : *reinterpret_cast< ::buf::validate::SFixed64Rules*>(&::buf::validate::_SFixed64Rules_default_instance_);
}
inline const ::buf::validate::SFixed64Rules& FieldRules::sfixed64() const {
  // @@protoc_insertion_point(field_get:buf.validate.FieldRules.sfixed64)
  return _internal_sfixed64();
}
inline ::buf::validate::SFixed64Rules* FieldRules::unsafe_arena_release_sfixed64() {
  // @@protoc_insertion_point(field_unsafe_arena_release:buf.validate.FieldRules.sfixed64)
  if (_internal_has_sfixed64()) {
    clear_has_type();
    ::buf::validate::SFixed64Rules* temp = type_.sfixed64_;
    type_.sfixed64_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FieldRules::unsafe_arena_set_allocated_sfixed64(::buf::validate::SFixed64Rules* sfixed64) {
  clear_type();
  if (sfixed64) {
    set_has_sfixed64();
    type_.sfixed64_ = sfixed64;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:buf.validate.FieldRules.sfixed64)
}
inline ::buf::validate::SFixed64Rules* FieldRules::_internal_mutable_sfixed64() {
  if (!_internal_has_sfixed64()) {
    clear_type();
    set_has_sfixed64();
    type_.sfixed64_ = CreateMaybeMessage< ::buf::validate::SFixed64Rules >(GetArena());
  }
  return type_.sfixed64_;
}
inline ::buf::validate::SFixed64Rules* FieldRules::mutable_sfixed64() {
  // @@protoc_insertion_point(field_mutable:buf.validate.FieldRules.sfixed64)
  return _internal_mutable_sfixed64();
}

// .buf.validate.BoolRules bool = 13[json_name = "bool"];
inline bool FieldRules::_internal_has_bool_() const {
  return type_case() == kBool;
}
inline bool FieldRules::has_bool_() const {
  return _internal_has_bool_();
}
inline void FieldRules::set_has_bool_() {
  _oneof_case_[0] = kBool;
}
inline void FieldRules::clear_bool_() {
  if (_internal_has_bool_()) {
    if (GetArena() == nullptr) {
      delete type_.bool__;
    }
    clear_has_type();
  }
}
inline ::buf::validate::BoolRules* FieldRules::release_bool_() {
  // @@protoc_insertion_point(field_release:buf.validate.FieldRules.bool)
  if (_internal_has_bool_()) {
    clear_has_type();
      ::buf::validate::BoolRules* temp = type_.bool__;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.bool__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::buf::validate::BoolRules& FieldRules::_internal_bool_() const {
  return _internal_has_bool_()
      ? *type_.bool__
      : *reinterpret_cast< ::buf::validate::BoolRules*>(&::buf::validate::_BoolRules_default_instance_);
}
inline const ::buf::validate::BoolRules& FieldRules::bool_() const {
  // @@protoc_insertion_point(field_get:buf.validate.FieldRules.bool)
  return _internal_bool_();
}
inline ::buf::validate::BoolRules* FieldRules::unsafe_arena_release_bool_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:buf.validate.FieldRules.bool)
  if (_internal_has_bool_()) {
    clear_has_type();
    ::buf::validate::BoolRules* temp = type_.bool__;
    type_.bool__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FieldRules::unsafe_arena_set_allocated_bool_(::buf::validate::BoolRules* bool_) {
  clear_type();
  if (bool_) {
    set_has_bool_();
    type_.bool__ = bool_;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:buf.validate.FieldRules.bool)
}
inline ::buf::validate::BoolRules* FieldRules::_internal_mutable_bool_() {
  if (!_internal_has_bool_()) {
    clear_type();
    set_has_bool_();
    type_.bool__ = CreateMaybeMessage< ::buf::validate::BoolRules >(GetArena());
  }
  return type_.bool__;
}
inline ::buf::validate::BoolRules* FieldRules::mutable_bool_() {
  // @@protoc_insertion_point(field_mutable:buf.validate.FieldRules.bool)
  return _internal_mutable_bool_();
}

// .buf.validate.StringRules string = 14[json_name = "string"];
inline bool FieldRules::_internal_has_string() const {
  return type_case() == kString;
}
inline bool FieldRules::has_string() const {
  return _internal_has_string();
}
inline void FieldRules::set_has_string() {
  _oneof_case_[0] = kString;
}
inline void FieldRules::clear_string() {
  if (_internal_has_string()) {
    if (GetArena() == nullptr) {
      delete type_.string_;
    }
    clear_has_type();
  }
}
inline ::buf::validate::StringRules* FieldRules::release_string() {
  // @@protoc_insertion_point(field_release:buf.validate.FieldRules.string)
  if (_internal_has_string()) {
    clear_has_type();
      ::buf::validate::StringRules* temp = type_.string_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::buf::validate::StringRules& FieldRules::_internal_string() const {
  return _internal_has_string()
      ? *type_.string_
      : *reinterpret_cast< ::buf::validate::StringRules*>(&::buf::validate::_StringRules_default_instance_);
}
inline const ::buf::validate::StringRules& FieldRules::string() const {
  // @@protoc_insertion_point(field_get:buf.validate.FieldRules.string)
  return _internal_string();
}
inline ::buf::validate::StringRules* FieldRules::unsafe_arena_release_string() {
  // @@protoc_insertion_point(field_unsafe_arena_release:buf.validate.FieldRules.string)
  if (_internal_has_string()) {
    clear_has_type();
    ::buf::validate::StringRules* temp = type_.string_;
    type_.string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FieldRules::unsafe_arena_set_allocated_string(::buf::validate::StringRules* string) {
  clear_type();
  if (string) {
    set_has_string();
    type_.string_ = string;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:buf.validate.FieldRules.string)
}
inline ::buf::validate::StringRules* FieldRules::_internal_mutable_string() {
  if (!_internal_has_string()) {
    clear_type();
    set_has_string();
    type_.string_ = CreateMaybeMessage< ::buf::validate::StringRules >(GetArena());
  }
  return type_.string_;
}
inline ::buf::validate::StringRules* FieldRules::mutable_string() {
  // @@protoc_insertion_point(field_mutable:buf.validate.FieldRules.string)
  return _internal_mutable_string();
}

// .buf.validate.BytesRules bytes = 15[json_name = "bytes"];
inline bool FieldRules::_internal_has_bytes() const {
  return type_case() == kBytes;
}
inline bool FieldRules::has_bytes() const {
  return _internal_has_bytes();
}
inline void FieldRules::set_has_bytes() {
  _oneof_case_[0] = kBytes;
}
inline void FieldRules::clear_bytes() {
  if (_internal_has_bytes()) {
    if (GetArena() == nullptr) {
      delete type_.bytes_;
    }
    clear_has_type();
  }
}
inline ::buf::validate::BytesRules* FieldRules::release_bytes() {
  // @@protoc_insertion_point(field_release:buf.validate.FieldRules.bytes)
  if (_internal_has_bytes()) {
    clear_has_type();
      ::buf::validate::BytesRules* temp = type_.bytes_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.bytes_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::buf::validate::BytesRules& FieldRules::_internal_bytes() const {
  return _internal_has_bytes()
      ? *type_.bytes_
      : *reinterpret_cast< ::buf::validate::BytesRules*>(&::buf::validate::_BytesRules_default_instance_);
}
inline const ::buf::validate::BytesRules& FieldRules::bytes() const {
  // @@protoc_insertion_point(field_get:buf.validate.FieldRules.bytes)
  return _internal_bytes();
}
inline ::buf::validate::BytesRules* FieldRules::unsafe_arena_release_bytes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:buf.validate.FieldRules.bytes)
  if (_internal_has_bytes()) {
    clear_has_type();
    ::buf::validate::BytesRules* temp = type_.bytes_;
    type_.bytes_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FieldRules::unsafe_arena_set_allocated_bytes(::buf::validate::BytesRules* bytes) {
  clear_type();
  if (bytes) {
    set_has_bytes();
    type_.bytes_ = bytes;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:buf.validate.FieldRules.bytes)
}
inline ::buf::validate::BytesRules* FieldRules::_internal_mutable_bytes() {
  if (!_internal_has_bytes()) {
    clear_type();
    set_has_bytes();
    type_.bytes_ = CreateMaybeMessage< ::buf::validate::BytesRules >(GetArena());
  }
  return type_.bytes_;
}
inline ::buf::validate::BytesRules* FieldRules::mutable_bytes() {
  // @@protoc_insertion_point(field_mutable:buf.validate.FieldRules.bytes)
  return _internal_mutable_bytes();
}

// .buf.validate.EnumRules enum = 16[json_name = "enum"];
inline bool FieldRules::_internal_has_enum_() const {
  return type_case() == kEnum;
}
inline bool FieldRules::has_enum_() const {
  return _internal_has_enum_();
}
inline void FieldRules::set_has_enum_() {
  _oneof_case_[0] = kEnum;
}
inline void FieldRules::clear_enum_() {
  if (_internal_has_enum_()) {
    if (GetArena() == nullptr) {
      delete type_.enum__;
    }
    clear_has_type();
  }
}
inline ::buf::validate::EnumRules* FieldRules::release_enum_() {
  // @@protoc_insertion_point(field_release:buf.validate.FieldRules.enum)
  if (_internal_has_enum_()) {
    clear_has_type();
      ::buf::validate::EnumRules* temp = type_.enum__;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.enum__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::buf::validate::EnumRules& FieldRules::_internal_enum_() const {
  return _internal_has_enum_()
      ? *type_.enum__
      : *reinterpret_cast< ::buf::validate::EnumRules*>(&::buf::validate::_EnumRules_default_instance_);
}
inline const ::buf::validate::EnumRules& FieldRules::enum_() const {
  // @@protoc_insertion_point(field_get:buf.validate.FieldRules.enum)
  return _internal_enum_();
}
inline ::buf::validate::EnumRules* FieldRules::unsafe_arena_release_enum_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:buf.validate.FieldRules.enum)
  if (_internal_has_enum_()) {
    clear_has_type();
    ::buf::validate::EnumRules* temp = type_.enum__;
    type_.enum__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FieldRules::unsafe_arena_set_allocated_enum_(::buf::validate::EnumRules* enum_) {
  clear_type();
  if (enum_) {
    set_has_enum_();
    type_.enum__ = enum_;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:buf.validate.FieldRules.enum)
}
inline ::buf::validate::EnumRules* FieldRules::_internal_mutable_enum_() {
  if (!_internal_has_enum_()) {
    clear_type();
    set_has_enum_();
    type_.enum__ = CreateMaybeMessage< ::buf::validate::EnumRules >(GetArena());
  }
  return type_.enum__;
}
inline ::buf::validate::EnumRules* FieldRules::mutable_enum_() {
  // @@protoc_insertion_point(field_mutable:buf.validate.FieldRules.enum)
  return _internal_mutable_enum_();
}

// .buf.validate.RepeatedRules repeated = 18[json_name = "repeated"];
inline bool FieldRules::_internal_has_repeated() const {
  return type_case() == kRepeated;
}
inline bool FieldRules::has_repeated() const {
  return _internal_has_repeated();
}
inline void FieldRules::set_has_repeated() {
  _oneof_case_[0] = kRepeated;
}
inline void FieldRules::clear_repeated() {
  if (_internal_has_repeated()) {
    if (GetArena() == nullptr) {
      delete type_.repeated_;
    }
    clear_has_type();
  }
}
inline ::buf::validate::RepeatedRules* FieldRules::release_repeated() {
  // @@protoc_insertion_point(field_release:buf.validate.FieldRules.repeated)
  if (_internal_has_repeated()) {
    clear_has_type();
      ::buf::validate::RepeatedRules* temp = type_.repeated_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.repeated_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::buf::validate::RepeatedRules& FieldRules::_internal_repeated() const {
  return _internal_has_repeated()
      ? *type_.repeated_
      : *reinterpret_cast< ::buf::validate::RepeatedRules*>(&::buf::validate::_RepeatedRules_default_instance_);
}
inline const ::buf::validate::RepeatedRules& FieldRules::repeated() const {
  // @@protoc_insertion_point(field_get:buf.validate.FieldRules.repeated)
  return _internal_repeated();
}
inline ::buf::validate::RepeatedRules* FieldRules::unsafe_arena_release_repeated() {
  // @@protoc_insertion_point(field_unsafe_arena_release:buf.validate.FieldRules.repeated)
  if (_internal_has_repeated()) {
    clear_has_type();
    ::buf::validate::RepeatedRules* temp = type_.repeated_;
    type_.repeated_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FieldRules::unsafe_arena_set_allocated_repeated(::buf::validate::RepeatedRules* repeated) {
  clear_type();
  if (repeated) {
    set_has_repeated();
    type_.repeated_ = repeated;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:buf.validate.FieldRules.repeated)
}
inline ::buf::validate::RepeatedRules* FieldRules::_internal_mutable_repeated() {
  if (!_internal_has_repeated()) {
    clear_type();
    set_has_repeated();
    type_.repeated_ = CreateMaybeMessage< ::buf::validate::RepeatedRules >(GetArena());
  }
  return type_.repeated_;
}
inline ::buf::validate::RepeatedRules* FieldRules::mutable_repeated() {
  // @@protoc_insertion_point(field_mutable:buf.validate.FieldRules.repeated)
  return _internal_mutable_repeated();
}

// .buf.validate.MapRules map = 19[json_name = "map"];
inline bool FieldRules::_internal_has_map() const {
  return type_case() == kMap;
}
inline bool FieldRules::has_map() const {
  return _internal_has_map();
}
inline void FieldRules::set_has_map() {
  _oneof_case_[0] = kMap;
}
inline void FieldRules::clear_map() {
  if (_internal_has_map()) {
    if (GetArena() == nullptr) {
      delete type_.map_;
    }
    clear_has_type();
  }
}
inline ::buf::validate::MapRules* FieldRules::release_map() {
  // @@protoc_insertion_point(field_release:buf.validate.FieldRules.map)
  if (_internal_has_map()) {
    clear_has_type();
      ::buf::validate::MapRules* temp = type_.map_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.map_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::buf::validate::MapRules& FieldRules::_internal_map() const {
  return _internal_has_map()
      ? *type_.map_
      : *reinterpret_cast< ::buf::validate::MapRules*>(&::buf::validate::_MapRules_default_instance_);
}
inline const ::buf::validate::MapRules& FieldRules::map() const {
  // @@protoc_insertion_point(field_get:buf.validate.FieldRules.map)
  return _internal_map();
}
inline ::buf::validate::MapRules* FieldRules::unsafe_arena_release_map() {
  // @@protoc_insertion_point(field_unsafe_arena_release:buf.validate.FieldRules.map)
  if (_internal_has_map()) {
    clear_has_type();
    ::buf::validate::MapRules* temp = type_.map_;
    type_.map_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FieldRules::unsafe_arena_set_allocated_map(::buf::validate::MapRules* map) {
  clear_type();
  if (map) {
    set_has_map();
    type_.map_ = map;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:buf.validate.FieldRules.map)
}
inline ::buf::validate::MapRules* FieldRules::_internal_mutable_map() {
  if (!_internal_has_map()) {
    clear_type();
    set_has_map();
    type_.map_ = CreateMaybeMessage< ::buf::validate::MapRules >(GetArena());
  }
  return type_.map_;
}
inline ::buf::validate::MapRules* FieldRules::mutable_map() {
  // @@protoc_insertion_point(field_mutable:buf.validate.FieldRules.map)
  return _internal_mutable_map();
}

// .buf.validate.AnyRules any = 20[json_name = "any"];
inline bool FieldRules::_internal_has_any() const {
  return type_case() == kAny;
}
inline bool FieldRules::has_any() const {
  return _internal_has_any();
}
inline void FieldRules::set_has_any() {
  _oneof_case_[0] = kAny;
}
inline void FieldRules::clear_any() {
  if (_internal_has_any()) {
    if (GetArena() == nullptr) {
      delete type_.any_;
    }
    clear_has_type();
  }
}
inline ::buf::validate::AnyRules* FieldRules::release_any() {
  // @@protoc_insertion_point(field_release:buf.validate.FieldRules.any)
  if (_internal_has_any()) {
    clear_has_type();
      ::buf::validate::AnyRules* temp = type_.any_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.any_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::buf::validate::AnyRules& FieldRules::_internal_any() const {
  return _internal_has_any()
      ? *type_.any_
      : *reinterpret_cast< ::buf::validate::AnyRules*>(&::buf::validate::_AnyRules_default_instance_);
}
inline const ::buf::validate::AnyRules& FieldRules::any() const {
  // @@protoc_insertion_point(field_get:buf.validate.FieldRules.any)
  return _internal_any();
}
inline ::buf::validate::AnyRules* FieldRules::unsafe_arena_release_any() {
  // @@protoc_insertion_point(field_unsafe_arena_release:buf.validate.FieldRules.any)
  if (_internal_has_any()) {
    clear_has_type();
    ::buf::validate::AnyRules* temp = type_.any_;
    type_.any_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FieldRules::unsafe_arena_set_allocated_any(::buf::validate::AnyRules* any) {
  clear_type();
  if (any) {
    set_has_any();
    type_.any_ = any;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:buf.validate.FieldRules.any)
}
inline ::buf::validate::AnyRules* FieldRules::_internal_mutable_any() {
  if (!_internal_has_any()) {
    clear_type();
    set_has_any();
    type_.any_ = CreateMaybeMessage< ::buf::validate::AnyRules >(GetArena());
  }
  return type_.any_;
}
inline ::buf::validate::AnyRules* FieldRules::mutable_any() {
  // @@protoc_insertion_point(field_mutable:buf.validate.FieldRules.any)
  return _internal_mutable_any();
}

// .buf.validate.DurationRules duration = 21[json_name = "duration"];
inline bool FieldRules::_internal_has_duration() const {
  return type_case() == kDuration;
}
inline bool FieldRules::has_duration() const {
  return _internal_has_duration();
}
inline void FieldRules::set_has_duration() {
  _oneof_case_[0] = kDuration;
}
inline void FieldRules::clear_duration() {
  if (_internal_has_duration()) {
    if (GetArena() == nullptr) {
      delete type_.duration_;
    }
    clear_has_type();
  }
}
inline ::buf::validate::DurationRules* FieldRules::release_duration() {
  // @@protoc_insertion_point(field_release:buf.validate.FieldRules.duration)
  if (_internal_has_duration()) {
    clear_has_type();
      ::buf::validate::DurationRules* temp = type_.duration_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.duration_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::buf::validate::DurationRules& FieldRules::_internal_duration() const {
  return _internal_has_duration()
      ? *type_.duration_
      : *reinterpret_cast< ::buf::validate::DurationRules*>(&::buf::validate::_DurationRules_default_instance_);
}
inline const ::buf::validate::DurationRules& FieldRules::duration() const {
  // @@protoc_insertion_point(field_get:buf.validate.FieldRules.duration)
  return _internal_duration();
}
inline ::buf::validate::DurationRules* FieldRules::unsafe_arena_release_duration() {
  // @@protoc_insertion_point(field_unsafe_arena_release:buf.validate.FieldRules.duration)
  if (_internal_has_duration()) {
    clear_has_type();
    ::buf::validate::DurationRules* temp = type_.duration_;
    type_.duration_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FieldRules::unsafe_arena_set_allocated_duration(::buf::validate::DurationRules* duration) {
  clear_type();
  if (duration) {
    set_has_duration();
    type_.duration_ = duration;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:buf.validate.FieldRules.duration)
}
inline ::buf::validate::DurationRules* FieldRules::_internal_mutable_duration() {
  if (!_internal_has_duration()) {
    clear_type();
    set_has_duration();
    type_.duration_ = CreateMaybeMessage< ::buf::validate::DurationRules >(GetArena());
  }
  return type_.duration_;
}
inline ::buf::validate::DurationRules* FieldRules::mutable_duration() {
  // @@protoc_insertion_point(field_mutable:buf.validate.FieldRules.duration)
  return _internal_mutable_duration();
}

// .buf.validate.TimestampRules timestamp = 22[json_name = "timestamp"];
inline bool FieldRules::_internal_has_timestamp() const {
  return type_case() == kTimestamp;
}
inline bool FieldRules::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void FieldRules::set_has_timestamp() {
  _oneof_case_[0] = kTimestamp;
}
inline void FieldRules::clear_timestamp() {
  if (_internal_has_timestamp()) {
    if (GetArena() == nullptr) {
      delete type_.timestamp_;
    }
    clear_has_type();
  }
}
inline ::buf::validate::TimestampRules* FieldRules::release_timestamp() {
  // @@protoc_insertion_point(field_release:buf.validate.FieldRules.timestamp)
  if (_internal_has_timestamp()) {
    clear_has_type();
      ::buf::validate::TimestampRules* temp = type_.timestamp_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.timestamp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::buf::validate::TimestampRules& FieldRules::_internal_timestamp() const {
  return _internal_has_timestamp()
      ? *type_.timestamp_
      : *reinterpret_cast< ::buf::validate::TimestampRules*>(&::buf::validate::_TimestampRules_default_instance_);
}
inline const ::buf::validate::TimestampRules& FieldRules::timestamp() const {
  // @@protoc_insertion_point(field_get:buf.validate.FieldRules.timestamp)
  return _internal_timestamp();
}
inline ::buf::validate::TimestampRules* FieldRules::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:buf.validate.FieldRules.timestamp)
  if (_internal_has_timestamp()) {
    clear_has_type();
    ::buf::validate::TimestampRules* temp = type_.timestamp_;
    type_.timestamp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FieldRules::unsafe_arena_set_allocated_timestamp(::buf::validate::TimestampRules* timestamp) {
  clear_type();
  if (timestamp) {
    set_has_timestamp();
    type_.timestamp_ = timestamp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:buf.validate.FieldRules.timestamp)
}
inline ::buf::validate::TimestampRules* FieldRules::_internal_mutable_timestamp() {
  if (!_internal_has_timestamp()) {
    clear_type();
    set_has_timestamp();
    type_.timestamp_ = CreateMaybeMessage< ::buf::validate::TimestampRules >(GetArena());
  }
  return type_.timestamp_;
}
inline ::buf::validate::TimestampRules* FieldRules::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:buf.validate.FieldRules.timestamp)
  return _internal_mutable_timestamp();
}

inline bool FieldRules::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void FieldRules::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline FieldRules::TypeCase FieldRules::type_case() const {
  return FieldRules::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// PredefinedRules

// repeated .buf.validate.Rule cel = 1[json_name = "cel"];
inline int PredefinedRules::_internal_cel_size() const {
  return cel_.size();
}
inline int PredefinedRules::cel_size() const {
  return _internal_cel_size();
}
inline void PredefinedRules::clear_cel() {
  cel_.Clear();
}
inline ::buf::validate::Rule* PredefinedRules::mutable_cel(int index) {
  // @@protoc_insertion_point(field_mutable:buf.validate.PredefinedRules.cel)
  return cel_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::buf::validate::Rule >*
PredefinedRules::mutable_cel() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.PredefinedRules.cel)
  return &cel_;
}
inline const ::buf::validate::Rule& PredefinedRules::_internal_cel(int index) const {
  return cel_.Get(index);
}
inline const ::buf::validate::Rule& PredefinedRules::cel(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.PredefinedRules.cel)
  return _internal_cel(index);
}
inline ::buf::validate::Rule* PredefinedRules::_internal_add_cel() {
  return cel_.Add();
}
inline ::buf::validate::Rule* PredefinedRules::add_cel() {
  // @@protoc_insertion_point(field_add:buf.validate.PredefinedRules.cel)
  return _internal_add_cel();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::buf::validate::Rule >&
PredefinedRules::cel() const {
  // @@protoc_insertion_point(field_list:buf.validate.PredefinedRules.cel)
  return cel_;
}

// -------------------------------------------------------------------

// FloatRules

// optional float const = 1[json_name = "const", (.buf.validate.predefined) = {
inline bool FloatRules::_internal_has_const_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FloatRules::has_const_() const {
  return _internal_has_const_();
}
inline void FloatRules::clear_const_() {
  const__ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float FloatRules::_internal_const_() const {
  return const__;
}
inline float FloatRules::const_() const {
  // @@protoc_insertion_point(field_get:buf.validate.FloatRules.const)
  return _internal_const_();
}
inline void FloatRules::_internal_set_const_(float value) {
  _has_bits_[0] |= 0x00000001u;
  const__ = value;
}
inline void FloatRules::set_const_(float value) {
  _internal_set_const_(value);
  // @@protoc_insertion_point(field_set:buf.validate.FloatRules.const)
}

// float lt = 2[json_name = "lt", (.buf.validate.predefined) = {
inline bool FloatRules::_internal_has_lt() const {
  return less_than_case() == kLt;
}
inline bool FloatRules::has_lt() const {
  return _internal_has_lt();
}
inline void FloatRules::set_has_lt() {
  _oneof_case_[0] = kLt;
}
inline void FloatRules::clear_lt() {
  if (_internal_has_lt()) {
    less_than_.lt_ = 0;
    clear_has_less_than();
  }
}
inline float FloatRules::_internal_lt() const {
  if (_internal_has_lt()) {
    return less_than_.lt_;
  }
  return 0;
}
inline void FloatRules::_internal_set_lt(float value) {
  if (!_internal_has_lt()) {
    clear_less_than();
    set_has_lt();
  }
  less_than_.lt_ = value;
}
inline float FloatRules::lt() const {
  // @@protoc_insertion_point(field_get:buf.validate.FloatRules.lt)
  return _internal_lt();
}
inline void FloatRules::set_lt(float value) {
  _internal_set_lt(value);
  // @@protoc_insertion_point(field_set:buf.validate.FloatRules.lt)
}

// float lte = 3[json_name = "lte", (.buf.validate.predefined) = {
inline bool FloatRules::_internal_has_lte() const {
  return less_than_case() == kLte;
}
inline bool FloatRules::has_lte() const {
  return _internal_has_lte();
}
inline void FloatRules::set_has_lte() {
  _oneof_case_[0] = kLte;
}
inline void FloatRules::clear_lte() {
  if (_internal_has_lte()) {
    less_than_.lte_ = 0;
    clear_has_less_than();
  }
}
inline float FloatRules::_internal_lte() const {
  if (_internal_has_lte()) {
    return less_than_.lte_;
  }
  return 0;
}
inline void FloatRules::_internal_set_lte(float value) {
  if (!_internal_has_lte()) {
    clear_less_than();
    set_has_lte();
  }
  less_than_.lte_ = value;
}
inline float FloatRules::lte() const {
  // @@protoc_insertion_point(field_get:buf.validate.FloatRules.lte)
  return _internal_lte();
}
inline void FloatRules::set_lte(float value) {
  _internal_set_lte(value);
  // @@protoc_insertion_point(field_set:buf.validate.FloatRules.lte)
}

// float gt = 4[json_name = "gt", (.buf.validate.predefined) = {
inline bool FloatRules::_internal_has_gt() const {
  return greater_than_case() == kGt;
}
inline bool FloatRules::has_gt() const {
  return _internal_has_gt();
}
inline void FloatRules::set_has_gt() {
  _oneof_case_[1] = kGt;
}
inline void FloatRules::clear_gt() {
  if (_internal_has_gt()) {
    greater_than_.gt_ = 0;
    clear_has_greater_than();
  }
}
inline float FloatRules::_internal_gt() const {
  if (_internal_has_gt()) {
    return greater_than_.gt_;
  }
  return 0;
}
inline void FloatRules::_internal_set_gt(float value) {
  if (!_internal_has_gt()) {
    clear_greater_than();
    set_has_gt();
  }
  greater_than_.gt_ = value;
}
inline float FloatRules::gt() const {
  // @@protoc_insertion_point(field_get:buf.validate.FloatRules.gt)
  return _internal_gt();
}
inline void FloatRules::set_gt(float value) {
  _internal_set_gt(value);
  // @@protoc_insertion_point(field_set:buf.validate.FloatRules.gt)
}

// float gte = 5[json_name = "gte", (.buf.validate.predefined) = {
inline bool FloatRules::_internal_has_gte() const {
  return greater_than_case() == kGte;
}
inline bool FloatRules::has_gte() const {
  return _internal_has_gte();
}
inline void FloatRules::set_has_gte() {
  _oneof_case_[1] = kGte;
}
inline void FloatRules::clear_gte() {
  if (_internal_has_gte()) {
    greater_than_.gte_ = 0;
    clear_has_greater_than();
  }
}
inline float FloatRules::_internal_gte() const {
  if (_internal_has_gte()) {
    return greater_than_.gte_;
  }
  return 0;
}
inline void FloatRules::_internal_set_gte(float value) {
  if (!_internal_has_gte()) {
    clear_greater_than();
    set_has_gte();
  }
  greater_than_.gte_ = value;
}
inline float FloatRules::gte() const {
  // @@protoc_insertion_point(field_get:buf.validate.FloatRules.gte)
  return _internal_gte();
}
inline void FloatRules::set_gte(float value) {
  _internal_set_gte(value);
  // @@protoc_insertion_point(field_set:buf.validate.FloatRules.gte)
}

// repeated float in = 6[json_name = "in", (.buf.validate.predefined) = {
inline int FloatRules::_internal_in_size() const {
  return in_.size();
}
inline int FloatRules::in_size() const {
  return _internal_in_size();
}
inline void FloatRules::clear_in() {
  in_.Clear();
}
inline float FloatRules::_internal_in(int index) const {
  return in_.Get(index);
}
inline float FloatRules::in(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.FloatRules.in)
  return _internal_in(index);
}
inline void FloatRules::set_in(int index, float value) {
  in_.Set(index, value);
  // @@protoc_insertion_point(field_set:buf.validate.FloatRules.in)
}
inline void FloatRules::_internal_add_in(float value) {
  in_.Add(value);
}
inline void FloatRules::add_in(float value) {
  _internal_add_in(value);
  // @@protoc_insertion_point(field_add:buf.validate.FloatRules.in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FloatRules::_internal_in() const {
  return in_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FloatRules::in() const {
  // @@protoc_insertion_point(field_list:buf.validate.FloatRules.in)
  return _internal_in();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FloatRules::_internal_mutable_in() {
  return &in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FloatRules::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.FloatRules.in)
  return _internal_mutable_in();
}

// repeated float not_in = 7[json_name = "notIn", (.buf.validate.predefined) = {
inline int FloatRules::_internal_not_in_size() const {
  return not_in_.size();
}
inline int FloatRules::not_in_size() const {
  return _internal_not_in_size();
}
inline void FloatRules::clear_not_in() {
  not_in_.Clear();
}
inline float FloatRules::_internal_not_in(int index) const {
  return not_in_.Get(index);
}
inline float FloatRules::not_in(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.FloatRules.not_in)
  return _internal_not_in(index);
}
inline void FloatRules::set_not_in(int index, float value) {
  not_in_.Set(index, value);
  // @@protoc_insertion_point(field_set:buf.validate.FloatRules.not_in)
}
inline void FloatRules::_internal_add_not_in(float value) {
  not_in_.Add(value);
}
inline void FloatRules::add_not_in(float value) {
  _internal_add_not_in(value);
  // @@protoc_insertion_point(field_add:buf.validate.FloatRules.not_in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FloatRules::_internal_not_in() const {
  return not_in_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FloatRules::not_in() const {
  // @@protoc_insertion_point(field_list:buf.validate.FloatRules.not_in)
  return _internal_not_in();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FloatRules::_internal_mutable_not_in() {
  return &not_in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FloatRules::mutable_not_in() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.FloatRules.not_in)
  return _internal_mutable_not_in();
}

// optional bool finite = 8[json_name = "finite", (.buf.validate.predefined) = {
inline bool FloatRules::_internal_has_finite() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FloatRules::has_finite() const {
  return _internal_has_finite();
}
inline void FloatRules::clear_finite() {
  finite_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool FloatRules::_internal_finite() const {
  return finite_;
}
inline bool FloatRules::finite() const {
  // @@protoc_insertion_point(field_get:buf.validate.FloatRules.finite)
  return _internal_finite();
}
inline void FloatRules::_internal_set_finite(bool value) {
  _has_bits_[0] |= 0x00000002u;
  finite_ = value;
}
inline void FloatRules::set_finite(bool value) {
  _internal_set_finite(value);
  // @@protoc_insertion_point(field_set:buf.validate.FloatRules.finite)
}

// repeated float example = 9[json_name = "example", (.buf.validate.predefined) = {
inline int FloatRules::_internal_example_size() const {
  return example_.size();
}
inline int FloatRules::example_size() const {
  return _internal_example_size();
}
inline void FloatRules::clear_example() {
  example_.Clear();
}
inline float FloatRules::_internal_example(int index) const {
  return example_.Get(index);
}
inline float FloatRules::example(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.FloatRules.example)
  return _internal_example(index);
}
inline void FloatRules::set_example(int index, float value) {
  example_.Set(index, value);
  // @@protoc_insertion_point(field_set:buf.validate.FloatRules.example)
}
inline void FloatRules::_internal_add_example(float value) {
  example_.Add(value);
}
inline void FloatRules::add_example(float value) {
  _internal_add_example(value);
  // @@protoc_insertion_point(field_add:buf.validate.FloatRules.example)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FloatRules::_internal_example() const {
  return example_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FloatRules::example() const {
  // @@protoc_insertion_point(field_list:buf.validate.FloatRules.example)
  return _internal_example();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FloatRules::_internal_mutable_example() {
  return &example_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FloatRules::mutable_example() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.FloatRules.example)
  return _internal_mutable_example();
}

inline bool FloatRules::has_less_than() const {
  return less_than_case() != LESS_THAN_NOT_SET;
}
inline void FloatRules::clear_has_less_than() {
  _oneof_case_[0] = LESS_THAN_NOT_SET;
}
inline bool FloatRules::has_greater_than() const {
  return greater_than_case() != GREATER_THAN_NOT_SET;
}
inline void FloatRules::clear_has_greater_than() {
  _oneof_case_[1] = GREATER_THAN_NOT_SET;
}
inline FloatRules::LessThanCase FloatRules::less_than_case() const {
  return FloatRules::LessThanCase(_oneof_case_[0]);
}
inline FloatRules::GreaterThanCase FloatRules::greater_than_case() const {
  return FloatRules::GreaterThanCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// DoubleRules

// optional double const = 1[json_name = "const", (.buf.validate.predefined) = {
inline bool DoubleRules::_internal_has_const_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DoubleRules::has_const_() const {
  return _internal_has_const_();
}
inline void DoubleRules::clear_const_() {
  const__ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double DoubleRules::_internal_const_() const {
  return const__;
}
inline double DoubleRules::const_() const {
  // @@protoc_insertion_point(field_get:buf.validate.DoubleRules.const)
  return _internal_const_();
}
inline void DoubleRules::_internal_set_const_(double value) {
  _has_bits_[0] |= 0x00000001u;
  const__ = value;
}
inline void DoubleRules::set_const_(double value) {
  _internal_set_const_(value);
  // @@protoc_insertion_point(field_set:buf.validate.DoubleRules.const)
}

// double lt = 2[json_name = "lt", (.buf.validate.predefined) = {
inline bool DoubleRules::_internal_has_lt() const {
  return less_than_case() == kLt;
}
inline bool DoubleRules::has_lt() const {
  return _internal_has_lt();
}
inline void DoubleRules::set_has_lt() {
  _oneof_case_[0] = kLt;
}
inline void DoubleRules::clear_lt() {
  if (_internal_has_lt()) {
    less_than_.lt_ = 0;
    clear_has_less_than();
  }
}
inline double DoubleRules::_internal_lt() const {
  if (_internal_has_lt()) {
    return less_than_.lt_;
  }
  return 0;
}
inline void DoubleRules::_internal_set_lt(double value) {
  if (!_internal_has_lt()) {
    clear_less_than();
    set_has_lt();
  }
  less_than_.lt_ = value;
}
inline double DoubleRules::lt() const {
  // @@protoc_insertion_point(field_get:buf.validate.DoubleRules.lt)
  return _internal_lt();
}
inline void DoubleRules::set_lt(double value) {
  _internal_set_lt(value);
  // @@protoc_insertion_point(field_set:buf.validate.DoubleRules.lt)
}

// double lte = 3[json_name = "lte", (.buf.validate.predefined) = {
inline bool DoubleRules::_internal_has_lte() const {
  return less_than_case() == kLte;
}
inline bool DoubleRules::has_lte() const {
  return _internal_has_lte();
}
inline void DoubleRules::set_has_lte() {
  _oneof_case_[0] = kLte;
}
inline void DoubleRules::clear_lte() {
  if (_internal_has_lte()) {
    less_than_.lte_ = 0;
    clear_has_less_than();
  }
}
inline double DoubleRules::_internal_lte() const {
  if (_internal_has_lte()) {
    return less_than_.lte_;
  }
  return 0;
}
inline void DoubleRules::_internal_set_lte(double value) {
  if (!_internal_has_lte()) {
    clear_less_than();
    set_has_lte();
  }
  less_than_.lte_ = value;
}
inline double DoubleRules::lte() const {
  // @@protoc_insertion_point(field_get:buf.validate.DoubleRules.lte)
  return _internal_lte();
}
inline void DoubleRules::set_lte(double value) {
  _internal_set_lte(value);
  // @@protoc_insertion_point(field_set:buf.validate.DoubleRules.lte)
}

// double gt = 4[json_name = "gt", (.buf.validate.predefined) = {
inline bool DoubleRules::_internal_has_gt() const {
  return greater_than_case() == kGt;
}
inline bool DoubleRules::has_gt() const {
  return _internal_has_gt();
}
inline void DoubleRules::set_has_gt() {
  _oneof_case_[1] = kGt;
}
inline void DoubleRules::clear_gt() {
  if (_internal_has_gt()) {
    greater_than_.gt_ = 0;
    clear_has_greater_than();
  }
}
inline double DoubleRules::_internal_gt() const {
  if (_internal_has_gt()) {
    return greater_than_.gt_;
  }
  return 0;
}
inline void DoubleRules::_internal_set_gt(double value) {
  if (!_internal_has_gt()) {
    clear_greater_than();
    set_has_gt();
  }
  greater_than_.gt_ = value;
}
inline double DoubleRules::gt() const {
  // @@protoc_insertion_point(field_get:buf.validate.DoubleRules.gt)
  return _internal_gt();
}
inline void DoubleRules::set_gt(double value) {
  _internal_set_gt(value);
  // @@protoc_insertion_point(field_set:buf.validate.DoubleRules.gt)
}

// double gte = 5[json_name = "gte", (.buf.validate.predefined) = {
inline bool DoubleRules::_internal_has_gte() const {
  return greater_than_case() == kGte;
}
inline bool DoubleRules::has_gte() const {
  return _internal_has_gte();
}
inline void DoubleRules::set_has_gte() {
  _oneof_case_[1] = kGte;
}
inline void DoubleRules::clear_gte() {
  if (_internal_has_gte()) {
    greater_than_.gte_ = 0;
    clear_has_greater_than();
  }
}
inline double DoubleRules::_internal_gte() const {
  if (_internal_has_gte()) {
    return greater_than_.gte_;
  }
  return 0;
}
inline void DoubleRules::_internal_set_gte(double value) {
  if (!_internal_has_gte()) {
    clear_greater_than();
    set_has_gte();
  }
  greater_than_.gte_ = value;
}
inline double DoubleRules::gte() const {
  // @@protoc_insertion_point(field_get:buf.validate.DoubleRules.gte)
  return _internal_gte();
}
inline void DoubleRules::set_gte(double value) {
  _internal_set_gte(value);
  // @@protoc_insertion_point(field_set:buf.validate.DoubleRules.gte)
}

// repeated double in = 6[json_name = "in", (.buf.validate.predefined) = {
inline int DoubleRules::_internal_in_size() const {
  return in_.size();
}
inline int DoubleRules::in_size() const {
  return _internal_in_size();
}
inline void DoubleRules::clear_in() {
  in_.Clear();
}
inline double DoubleRules::_internal_in(int index) const {
  return in_.Get(index);
}
inline double DoubleRules::in(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.DoubleRules.in)
  return _internal_in(index);
}
inline void DoubleRules::set_in(int index, double value) {
  in_.Set(index, value);
  // @@protoc_insertion_point(field_set:buf.validate.DoubleRules.in)
}
inline void DoubleRules::_internal_add_in(double value) {
  in_.Add(value);
}
inline void DoubleRules::add_in(double value) {
  _internal_add_in(value);
  // @@protoc_insertion_point(field_add:buf.validate.DoubleRules.in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
DoubleRules::_internal_in() const {
  return in_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
DoubleRules::in() const {
  // @@protoc_insertion_point(field_list:buf.validate.DoubleRules.in)
  return _internal_in();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
DoubleRules::_internal_mutable_in() {
  return &in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
DoubleRules::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.DoubleRules.in)
  return _internal_mutable_in();
}

// repeated double not_in = 7[json_name = "notIn", (.buf.validate.predefined) = {
inline int DoubleRules::_internal_not_in_size() const {
  return not_in_.size();
}
inline int DoubleRules::not_in_size() const {
  return _internal_not_in_size();
}
inline void DoubleRules::clear_not_in() {
  not_in_.Clear();
}
inline double DoubleRules::_internal_not_in(int index) const {
  return not_in_.Get(index);
}
inline double DoubleRules::not_in(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.DoubleRules.not_in)
  return _internal_not_in(index);
}
inline void DoubleRules::set_not_in(int index, double value) {
  not_in_.Set(index, value);
  // @@protoc_insertion_point(field_set:buf.validate.DoubleRules.not_in)
}
inline void DoubleRules::_internal_add_not_in(double value) {
  not_in_.Add(value);
}
inline void DoubleRules::add_not_in(double value) {
  _internal_add_not_in(value);
  // @@protoc_insertion_point(field_add:buf.validate.DoubleRules.not_in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
DoubleRules::_internal_not_in() const {
  return not_in_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
DoubleRules::not_in() const {
  // @@protoc_insertion_point(field_list:buf.validate.DoubleRules.not_in)
  return _internal_not_in();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
DoubleRules::_internal_mutable_not_in() {
  return &not_in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
DoubleRules::mutable_not_in() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.DoubleRules.not_in)
  return _internal_mutable_not_in();
}

// optional bool finite = 8[json_name = "finite", (.buf.validate.predefined) = {
inline bool DoubleRules::_internal_has_finite() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DoubleRules::has_finite() const {
  return _internal_has_finite();
}
inline void DoubleRules::clear_finite() {
  finite_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool DoubleRules::_internal_finite() const {
  return finite_;
}
inline bool DoubleRules::finite() const {
  // @@protoc_insertion_point(field_get:buf.validate.DoubleRules.finite)
  return _internal_finite();
}
inline void DoubleRules::_internal_set_finite(bool value) {
  _has_bits_[0] |= 0x00000002u;
  finite_ = value;
}
inline void DoubleRules::set_finite(bool value) {
  _internal_set_finite(value);
  // @@protoc_insertion_point(field_set:buf.validate.DoubleRules.finite)
}

// repeated double example = 9[json_name = "example", (.buf.validate.predefined) = {
inline int DoubleRules::_internal_example_size() const {
  return example_.size();
}
inline int DoubleRules::example_size() const {
  return _internal_example_size();
}
inline void DoubleRules::clear_example() {
  example_.Clear();
}
inline double DoubleRules::_internal_example(int index) const {
  return example_.Get(index);
}
inline double DoubleRules::example(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.DoubleRules.example)
  return _internal_example(index);
}
inline void DoubleRules::set_example(int index, double value) {
  example_.Set(index, value);
  // @@protoc_insertion_point(field_set:buf.validate.DoubleRules.example)
}
inline void DoubleRules::_internal_add_example(double value) {
  example_.Add(value);
}
inline void DoubleRules::add_example(double value) {
  _internal_add_example(value);
  // @@protoc_insertion_point(field_add:buf.validate.DoubleRules.example)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
DoubleRules::_internal_example() const {
  return example_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
DoubleRules::example() const {
  // @@protoc_insertion_point(field_list:buf.validate.DoubleRules.example)
  return _internal_example();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
DoubleRules::_internal_mutable_example() {
  return &example_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
DoubleRules::mutable_example() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.DoubleRules.example)
  return _internal_mutable_example();
}

inline bool DoubleRules::has_less_than() const {
  return less_than_case() != LESS_THAN_NOT_SET;
}
inline void DoubleRules::clear_has_less_than() {
  _oneof_case_[0] = LESS_THAN_NOT_SET;
}
inline bool DoubleRules::has_greater_than() const {
  return greater_than_case() != GREATER_THAN_NOT_SET;
}
inline void DoubleRules::clear_has_greater_than() {
  _oneof_case_[1] = GREATER_THAN_NOT_SET;
}
inline DoubleRules::LessThanCase DoubleRules::less_than_case() const {
  return DoubleRules::LessThanCase(_oneof_case_[0]);
}
inline DoubleRules::GreaterThanCase DoubleRules::greater_than_case() const {
  return DoubleRules::GreaterThanCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// Int32Rules

// optional int32 const = 1[json_name = "const", (.buf.validate.predefined) = {
inline bool Int32Rules::_internal_has_const_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Int32Rules::has_const_() const {
  return _internal_has_const_();
}
inline void Int32Rules::clear_const_() {
  const__ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Int32Rules::_internal_const_() const {
  return const__;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Int32Rules::const_() const {
  // @@protoc_insertion_point(field_get:buf.validate.Int32Rules.const)
  return _internal_const_();
}
inline void Int32Rules::_internal_set_const_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  const__ = value;
}
inline void Int32Rules::set_const_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_const_(value);
  // @@protoc_insertion_point(field_set:buf.validate.Int32Rules.const)
}

// int32 lt = 2[json_name = "lt", (.buf.validate.predefined) = {
inline bool Int32Rules::_internal_has_lt() const {
  return less_than_case() == kLt;
}
inline bool Int32Rules::has_lt() const {
  return _internal_has_lt();
}
inline void Int32Rules::set_has_lt() {
  _oneof_case_[0] = kLt;
}
inline void Int32Rules::clear_lt() {
  if (_internal_has_lt()) {
    less_than_.lt_ = 0;
    clear_has_less_than();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Int32Rules::_internal_lt() const {
  if (_internal_has_lt()) {
    return less_than_.lt_;
  }
  return 0;
}
inline void Int32Rules::_internal_set_lt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_lt()) {
    clear_less_than();
    set_has_lt();
  }
  less_than_.lt_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Int32Rules::lt() const {
  // @@protoc_insertion_point(field_get:buf.validate.Int32Rules.lt)
  return _internal_lt();
}
inline void Int32Rules::set_lt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lt(value);
  // @@protoc_insertion_point(field_set:buf.validate.Int32Rules.lt)
}

// int32 lte = 3[json_name = "lte", (.buf.validate.predefined) = {
inline bool Int32Rules::_internal_has_lte() const {
  return less_than_case() == kLte;
}
inline bool Int32Rules::has_lte() const {
  return _internal_has_lte();
}
inline void Int32Rules::set_has_lte() {
  _oneof_case_[0] = kLte;
}
inline void Int32Rules::clear_lte() {
  if (_internal_has_lte()) {
    less_than_.lte_ = 0;
    clear_has_less_than();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Int32Rules::_internal_lte() const {
  if (_internal_has_lte()) {
    return less_than_.lte_;
  }
  return 0;
}
inline void Int32Rules::_internal_set_lte(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_lte()) {
    clear_less_than();
    set_has_lte();
  }
  less_than_.lte_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Int32Rules::lte() const {
  // @@protoc_insertion_point(field_get:buf.validate.Int32Rules.lte)
  return _internal_lte();
}
inline void Int32Rules::set_lte(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lte(value);
  // @@protoc_insertion_point(field_set:buf.validate.Int32Rules.lte)
}

// int32 gt = 4[json_name = "gt", (.buf.validate.predefined) = {
inline bool Int32Rules::_internal_has_gt() const {
  return greater_than_case() == kGt;
}
inline bool Int32Rules::has_gt() const {
  return _internal_has_gt();
}
inline void Int32Rules::set_has_gt() {
  _oneof_case_[1] = kGt;
}
inline void Int32Rules::clear_gt() {
  if (_internal_has_gt()) {
    greater_than_.gt_ = 0;
    clear_has_greater_than();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Int32Rules::_internal_gt() const {
  if (_internal_has_gt()) {
    return greater_than_.gt_;
  }
  return 0;
}
inline void Int32Rules::_internal_set_gt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_gt()) {
    clear_greater_than();
    set_has_gt();
  }
  greater_than_.gt_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Int32Rules::gt() const {
  // @@protoc_insertion_point(field_get:buf.validate.Int32Rules.gt)
  return _internal_gt();
}
inline void Int32Rules::set_gt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gt(value);
  // @@protoc_insertion_point(field_set:buf.validate.Int32Rules.gt)
}

// int32 gte = 5[json_name = "gte", (.buf.validate.predefined) = {
inline bool Int32Rules::_internal_has_gte() const {
  return greater_than_case() == kGte;
}
inline bool Int32Rules::has_gte() const {
  return _internal_has_gte();
}
inline void Int32Rules::set_has_gte() {
  _oneof_case_[1] = kGte;
}
inline void Int32Rules::clear_gte() {
  if (_internal_has_gte()) {
    greater_than_.gte_ = 0;
    clear_has_greater_than();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Int32Rules::_internal_gte() const {
  if (_internal_has_gte()) {
    return greater_than_.gte_;
  }
  return 0;
}
inline void Int32Rules::_internal_set_gte(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_gte()) {
    clear_greater_than();
    set_has_gte();
  }
  greater_than_.gte_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Int32Rules::gte() const {
  // @@protoc_insertion_point(field_get:buf.validate.Int32Rules.gte)
  return _internal_gte();
}
inline void Int32Rules::set_gte(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gte(value);
  // @@protoc_insertion_point(field_set:buf.validate.Int32Rules.gte)
}

// repeated int32 in = 6[json_name = "in", (.buf.validate.predefined) = {
inline int Int32Rules::_internal_in_size() const {
  return in_.size();
}
inline int Int32Rules::in_size() const {
  return _internal_in_size();
}
inline void Int32Rules::clear_in() {
  in_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Int32Rules::_internal_in(int index) const {
  return in_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Int32Rules::in(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.Int32Rules.in)
  return _internal_in(index);
}
inline void Int32Rules::set_in(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  in_.Set(index, value);
  // @@protoc_insertion_point(field_set:buf.validate.Int32Rules.in)
}
inline void Int32Rules::_internal_add_in(::PROTOBUF_NAMESPACE_ID::int32 value) {
  in_.Add(value);
}
inline void Int32Rules::add_in(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_in(value);
  // @@protoc_insertion_point(field_add:buf.validate.Int32Rules.in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Int32Rules::_internal_in() const {
  return in_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Int32Rules::in() const {
  // @@protoc_insertion_point(field_list:buf.validate.Int32Rules.in)
  return _internal_in();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Int32Rules::_internal_mutable_in() {
  return &in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Int32Rules::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.Int32Rules.in)
  return _internal_mutable_in();
}

// repeated int32 not_in = 7[json_name = "notIn", (.buf.validate.predefined) = {
inline int Int32Rules::_internal_not_in_size() const {
  return not_in_.size();
}
inline int Int32Rules::not_in_size() const {
  return _internal_not_in_size();
}
inline void Int32Rules::clear_not_in() {
  not_in_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Int32Rules::_internal_not_in(int index) const {
  return not_in_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Int32Rules::not_in(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.Int32Rules.not_in)
  return _internal_not_in(index);
}
inline void Int32Rules::set_not_in(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  not_in_.Set(index, value);
  // @@protoc_insertion_point(field_set:buf.validate.Int32Rules.not_in)
}
inline void Int32Rules::_internal_add_not_in(::PROTOBUF_NAMESPACE_ID::int32 value) {
  not_in_.Add(value);
}
inline void Int32Rules::add_not_in(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_not_in(value);
  // @@protoc_insertion_point(field_add:buf.validate.Int32Rules.not_in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Int32Rules::_internal_not_in() const {
  return not_in_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Int32Rules::not_in() const {
  // @@protoc_insertion_point(field_list:buf.validate.Int32Rules.not_in)
  return _internal_not_in();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Int32Rules::_internal_mutable_not_in() {
  return &not_in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Int32Rules::mutable_not_in() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.Int32Rules.not_in)
  return _internal_mutable_not_in();
}

// repeated int32 example = 8[json_name = "example", (.buf.validate.predefined) = {
inline int Int32Rules::_internal_example_size() const {
  return example_.size();
}
inline int Int32Rules::example_size() const {
  return _internal_example_size();
}
inline void Int32Rules::clear_example() {
  example_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Int32Rules::_internal_example(int index) const {
  return example_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Int32Rules::example(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.Int32Rules.example)
  return _internal_example(index);
}
inline void Int32Rules::set_example(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  example_.Set(index, value);
  // @@protoc_insertion_point(field_set:buf.validate.Int32Rules.example)
}
inline void Int32Rules::_internal_add_example(::PROTOBUF_NAMESPACE_ID::int32 value) {
  example_.Add(value);
}
inline void Int32Rules::add_example(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_example(value);
  // @@protoc_insertion_point(field_add:buf.validate.Int32Rules.example)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Int32Rules::_internal_example() const {
  return example_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Int32Rules::example() const {
  // @@protoc_insertion_point(field_list:buf.validate.Int32Rules.example)
  return _internal_example();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Int32Rules::_internal_mutable_example() {
  return &example_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Int32Rules::mutable_example() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.Int32Rules.example)
  return _internal_mutable_example();
}

inline bool Int32Rules::has_less_than() const {
  return less_than_case() != LESS_THAN_NOT_SET;
}
inline void Int32Rules::clear_has_less_than() {
  _oneof_case_[0] = LESS_THAN_NOT_SET;
}
inline bool Int32Rules::has_greater_than() const {
  return greater_than_case() != GREATER_THAN_NOT_SET;
}
inline void Int32Rules::clear_has_greater_than() {
  _oneof_case_[1] = GREATER_THAN_NOT_SET;
}
inline Int32Rules::LessThanCase Int32Rules::less_than_case() const {
  return Int32Rules::LessThanCase(_oneof_case_[0]);
}
inline Int32Rules::GreaterThanCase Int32Rules::greater_than_case() const {
  return Int32Rules::GreaterThanCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// Int64Rules

// optional int64 const = 1[json_name = "const", (.buf.validate.predefined) = {
inline bool Int64Rules::_internal_has_const_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Int64Rules::has_const_() const {
  return _internal_has_const_();
}
inline void Int64Rules::clear_const_() {
  const__ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Int64Rules::_internal_const_() const {
  return const__;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Int64Rules::const_() const {
  // @@protoc_insertion_point(field_get:buf.validate.Int64Rules.const)
  return _internal_const_();
}
inline void Int64Rules::_internal_set_const_(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  const__ = value;
}
inline void Int64Rules::set_const_(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_const_(value);
  // @@protoc_insertion_point(field_set:buf.validate.Int64Rules.const)
}

// int64 lt = 2[json_name = "lt", (.buf.validate.predefined) = {
inline bool Int64Rules::_internal_has_lt() const {
  return less_than_case() == kLt;
}
inline bool Int64Rules::has_lt() const {
  return _internal_has_lt();
}
inline void Int64Rules::set_has_lt() {
  _oneof_case_[0] = kLt;
}
inline void Int64Rules::clear_lt() {
  if (_internal_has_lt()) {
    less_than_.lt_ = PROTOBUF_LONGLONG(0);
    clear_has_less_than();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Int64Rules::_internal_lt() const {
  if (_internal_has_lt()) {
    return less_than_.lt_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void Int64Rules::_internal_set_lt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_lt()) {
    clear_less_than();
    set_has_lt();
  }
  less_than_.lt_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Int64Rules::lt() const {
  // @@protoc_insertion_point(field_get:buf.validate.Int64Rules.lt)
  return _internal_lt();
}
inline void Int64Rules::set_lt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_lt(value);
  // @@protoc_insertion_point(field_set:buf.validate.Int64Rules.lt)
}

// int64 lte = 3[json_name = "lte", (.buf.validate.predefined) = {
inline bool Int64Rules::_internal_has_lte() const {
  return less_than_case() == kLte;
}
inline bool Int64Rules::has_lte() const {
  return _internal_has_lte();
}
inline void Int64Rules::set_has_lte() {
  _oneof_case_[0] = kLte;
}
inline void Int64Rules::clear_lte() {
  if (_internal_has_lte()) {
    less_than_.lte_ = PROTOBUF_LONGLONG(0);
    clear_has_less_than();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Int64Rules::_internal_lte() const {
  if (_internal_has_lte()) {
    return less_than_.lte_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void Int64Rules::_internal_set_lte(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_lte()) {
    clear_less_than();
    set_has_lte();
  }
  less_than_.lte_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Int64Rules::lte() const {
  // @@protoc_insertion_point(field_get:buf.validate.Int64Rules.lte)
  return _internal_lte();
}
inline void Int64Rules::set_lte(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_lte(value);
  // @@protoc_insertion_point(field_set:buf.validate.Int64Rules.lte)
}

// int64 gt = 4[json_name = "gt", (.buf.validate.predefined) = {
inline bool Int64Rules::_internal_has_gt() const {
  return greater_than_case() == kGt;
}
inline bool Int64Rules::has_gt() const {
  return _internal_has_gt();
}
inline void Int64Rules::set_has_gt() {
  _oneof_case_[1] = kGt;
}
inline void Int64Rules::clear_gt() {
  if (_internal_has_gt()) {
    greater_than_.gt_ = PROTOBUF_LONGLONG(0);
    clear_has_greater_than();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Int64Rules::_internal_gt() const {
  if (_internal_has_gt()) {
    return greater_than_.gt_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void Int64Rules::_internal_set_gt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_gt()) {
    clear_greater_than();
    set_has_gt();
  }
  greater_than_.gt_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Int64Rules::gt() const {
  // @@protoc_insertion_point(field_get:buf.validate.Int64Rules.gt)
  return _internal_gt();
}
inline void Int64Rules::set_gt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_gt(value);
  // @@protoc_insertion_point(field_set:buf.validate.Int64Rules.gt)
}

// int64 gte = 5[json_name = "gte", (.buf.validate.predefined) = {
inline bool Int64Rules::_internal_has_gte() const {
  return greater_than_case() == kGte;
}
inline bool Int64Rules::has_gte() const {
  return _internal_has_gte();
}
inline void Int64Rules::set_has_gte() {
  _oneof_case_[1] = kGte;
}
inline void Int64Rules::clear_gte() {
  if (_internal_has_gte()) {
    greater_than_.gte_ = PROTOBUF_LONGLONG(0);
    clear_has_greater_than();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Int64Rules::_internal_gte() const {
  if (_internal_has_gte()) {
    return greater_than_.gte_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void Int64Rules::_internal_set_gte(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_gte()) {
    clear_greater_than();
    set_has_gte();
  }
  greater_than_.gte_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Int64Rules::gte() const {
  // @@protoc_insertion_point(field_get:buf.validate.Int64Rules.gte)
  return _internal_gte();
}
inline void Int64Rules::set_gte(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_gte(value);
  // @@protoc_insertion_point(field_set:buf.validate.Int64Rules.gte)
}

// repeated int64 in = 6[json_name = "in", (.buf.validate.predefined) = {
inline int Int64Rules::_internal_in_size() const {
  return in_.size();
}
inline int Int64Rules::in_size() const {
  return _internal_in_size();
}
inline void Int64Rules::clear_in() {
  in_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Int64Rules::_internal_in(int index) const {
  return in_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Int64Rules::in(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.Int64Rules.in)
  return _internal_in(index);
}
inline void Int64Rules::set_in(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  in_.Set(index, value);
  // @@protoc_insertion_point(field_set:buf.validate.Int64Rules.in)
}
inline void Int64Rules::_internal_add_in(::PROTOBUF_NAMESPACE_ID::int64 value) {
  in_.Add(value);
}
inline void Int64Rules::add_in(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_in(value);
  // @@protoc_insertion_point(field_add:buf.validate.Int64Rules.in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
Int64Rules::_internal_in() const {
  return in_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
Int64Rules::in() const {
  // @@protoc_insertion_point(field_list:buf.validate.Int64Rules.in)
  return _internal_in();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
Int64Rules::_internal_mutable_in() {
  return &in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
Int64Rules::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.Int64Rules.in)
  return _internal_mutable_in();
}

// repeated int64 not_in = 7[json_name = "notIn", (.buf.validate.predefined) = {
inline int Int64Rules::_internal_not_in_size() const {
  return not_in_.size();
}
inline int Int64Rules::not_in_size() const {
  return _internal_not_in_size();
}
inline void Int64Rules::clear_not_in() {
  not_in_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Int64Rules::_internal_not_in(int index) const {
  return not_in_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Int64Rules::not_in(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.Int64Rules.not_in)
  return _internal_not_in(index);
}
inline void Int64Rules::set_not_in(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  not_in_.Set(index, value);
  // @@protoc_insertion_point(field_set:buf.validate.Int64Rules.not_in)
}
inline void Int64Rules::_internal_add_not_in(::PROTOBUF_NAMESPACE_ID::int64 value) {
  not_in_.Add(value);
}
inline void Int64Rules::add_not_in(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_not_in(value);
  // @@protoc_insertion_point(field_add:buf.validate.Int64Rules.not_in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
Int64Rules::_internal_not_in() const {
  return not_in_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
Int64Rules::not_in() const {
  // @@protoc_insertion_point(field_list:buf.validate.Int64Rules.not_in)
  return _internal_not_in();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
Int64Rules::_internal_mutable_not_in() {
  return &not_in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
Int64Rules::mutable_not_in() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.Int64Rules.not_in)
  return _internal_mutable_not_in();
}

// repeated int64 example = 9[json_name = "example", (.buf.validate.predefined) = {
inline int Int64Rules::_internal_example_size() const {
  return example_.size();
}
inline int Int64Rules::example_size() const {
  return _internal_example_size();
}
inline void Int64Rules::clear_example() {
  example_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Int64Rules::_internal_example(int index) const {
  return example_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Int64Rules::example(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.Int64Rules.example)
  return _internal_example(index);
}
inline void Int64Rules::set_example(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  example_.Set(index, value);
  // @@protoc_insertion_point(field_set:buf.validate.Int64Rules.example)
}
inline void Int64Rules::_internal_add_example(::PROTOBUF_NAMESPACE_ID::int64 value) {
  example_.Add(value);
}
inline void Int64Rules::add_example(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_example(value);
  // @@protoc_insertion_point(field_add:buf.validate.Int64Rules.example)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
Int64Rules::_internal_example() const {
  return example_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
Int64Rules::example() const {
  // @@protoc_insertion_point(field_list:buf.validate.Int64Rules.example)
  return _internal_example();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
Int64Rules::_internal_mutable_example() {
  return &example_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
Int64Rules::mutable_example() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.Int64Rules.example)
  return _internal_mutable_example();
}

inline bool Int64Rules::has_less_than() const {
  return less_than_case() != LESS_THAN_NOT_SET;
}
inline void Int64Rules::clear_has_less_than() {
  _oneof_case_[0] = LESS_THAN_NOT_SET;
}
inline bool Int64Rules::has_greater_than() const {
  return greater_than_case() != GREATER_THAN_NOT_SET;
}
inline void Int64Rules::clear_has_greater_than() {
  _oneof_case_[1] = GREATER_THAN_NOT_SET;
}
inline Int64Rules::LessThanCase Int64Rules::less_than_case() const {
  return Int64Rules::LessThanCase(_oneof_case_[0]);
}
inline Int64Rules::GreaterThanCase Int64Rules::greater_than_case() const {
  return Int64Rules::GreaterThanCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// UInt32Rules

// optional uint32 const = 1[json_name = "const", (.buf.validate.predefined) = {
inline bool UInt32Rules::_internal_has_const_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UInt32Rules::has_const_() const {
  return _internal_has_const_();
}
inline void UInt32Rules::clear_const_() {
  const__ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UInt32Rules::_internal_const_() const {
  return const__;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UInt32Rules::const_() const {
  // @@protoc_insertion_point(field_get:buf.validate.UInt32Rules.const)
  return _internal_const_();
}
inline void UInt32Rules::_internal_set_const_(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  const__ = value;
}
inline void UInt32Rules::set_const_(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_const_(value);
  // @@protoc_insertion_point(field_set:buf.validate.UInt32Rules.const)
}

// uint32 lt = 2[json_name = "lt", (.buf.validate.predefined) = {
inline bool UInt32Rules::_internal_has_lt() const {
  return less_than_case() == kLt;
}
inline bool UInt32Rules::has_lt() const {
  return _internal_has_lt();
}
inline void UInt32Rules::set_has_lt() {
  _oneof_case_[0] = kLt;
}
inline void UInt32Rules::clear_lt() {
  if (_internal_has_lt()) {
    less_than_.lt_ = 0u;
    clear_has_less_than();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UInt32Rules::_internal_lt() const {
  if (_internal_has_lt()) {
    return less_than_.lt_;
  }
  return 0u;
}
inline void UInt32Rules::_internal_set_lt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_lt()) {
    clear_less_than();
    set_has_lt();
  }
  less_than_.lt_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UInt32Rules::lt() const {
  // @@protoc_insertion_point(field_get:buf.validate.UInt32Rules.lt)
  return _internal_lt();
}
inline void UInt32Rules::set_lt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lt(value);
  // @@protoc_insertion_point(field_set:buf.validate.UInt32Rules.lt)
}

// uint32 lte = 3[json_name = "lte", (.buf.validate.predefined) = {
inline bool UInt32Rules::_internal_has_lte() const {
  return less_than_case() == kLte;
}
inline bool UInt32Rules::has_lte() const {
  return _internal_has_lte();
}
inline void UInt32Rules::set_has_lte() {
  _oneof_case_[0] = kLte;
}
inline void UInt32Rules::clear_lte() {
  if (_internal_has_lte()) {
    less_than_.lte_ = 0u;
    clear_has_less_than();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UInt32Rules::_internal_lte() const {
  if (_internal_has_lte()) {
    return less_than_.lte_;
  }
  return 0u;
}
inline void UInt32Rules::_internal_set_lte(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_lte()) {
    clear_less_than();
    set_has_lte();
  }
  less_than_.lte_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UInt32Rules::lte() const {
  // @@protoc_insertion_point(field_get:buf.validate.UInt32Rules.lte)
  return _internal_lte();
}
inline void UInt32Rules::set_lte(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lte(value);
  // @@protoc_insertion_point(field_set:buf.validate.UInt32Rules.lte)
}

// uint32 gt = 4[json_name = "gt", (.buf.validate.predefined) = {
inline bool UInt32Rules::_internal_has_gt() const {
  return greater_than_case() == kGt;
}
inline bool UInt32Rules::has_gt() const {
  return _internal_has_gt();
}
inline void UInt32Rules::set_has_gt() {
  _oneof_case_[1] = kGt;
}
inline void UInt32Rules::clear_gt() {
  if (_internal_has_gt()) {
    greater_than_.gt_ = 0u;
    clear_has_greater_than();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UInt32Rules::_internal_gt() const {
  if (_internal_has_gt()) {
    return greater_than_.gt_;
  }
  return 0u;
}
inline void UInt32Rules::_internal_set_gt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_gt()) {
    clear_greater_than();
    set_has_gt();
  }
  greater_than_.gt_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UInt32Rules::gt() const {
  // @@protoc_insertion_point(field_get:buf.validate.UInt32Rules.gt)
  return _internal_gt();
}
inline void UInt32Rules::set_gt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gt(value);
  // @@protoc_insertion_point(field_set:buf.validate.UInt32Rules.gt)
}

// uint32 gte = 5[json_name = "gte", (.buf.validate.predefined) = {
inline bool UInt32Rules::_internal_has_gte() const {
  return greater_than_case() == kGte;
}
inline bool UInt32Rules::has_gte() const {
  return _internal_has_gte();
}
inline void UInt32Rules::set_has_gte() {
  _oneof_case_[1] = kGte;
}
inline void UInt32Rules::clear_gte() {
  if (_internal_has_gte()) {
    greater_than_.gte_ = 0u;
    clear_has_greater_than();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UInt32Rules::_internal_gte() const {
  if (_internal_has_gte()) {
    return greater_than_.gte_;
  }
  return 0u;
}
inline void UInt32Rules::_internal_set_gte(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_gte()) {
    clear_greater_than();
    set_has_gte();
  }
  greater_than_.gte_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UInt32Rules::gte() const {
  // @@protoc_insertion_point(field_get:buf.validate.UInt32Rules.gte)
  return _internal_gte();
}
inline void UInt32Rules::set_gte(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gte(value);
  // @@protoc_insertion_point(field_set:buf.validate.UInt32Rules.gte)
}

// repeated uint32 in = 6[json_name = "in", (.buf.validate.predefined) = {
inline int UInt32Rules::_internal_in_size() const {
  return in_.size();
}
inline int UInt32Rules::in_size() const {
  return _internal_in_size();
}
inline void UInt32Rules::clear_in() {
  in_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UInt32Rules::_internal_in(int index) const {
  return in_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UInt32Rules::in(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.UInt32Rules.in)
  return _internal_in(index);
}
inline void UInt32Rules::set_in(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  in_.Set(index, value);
  // @@protoc_insertion_point(field_set:buf.validate.UInt32Rules.in)
}
inline void UInt32Rules::_internal_add_in(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  in_.Add(value);
}
inline void UInt32Rules::add_in(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_in(value);
  // @@protoc_insertion_point(field_add:buf.validate.UInt32Rules.in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
UInt32Rules::_internal_in() const {
  return in_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
UInt32Rules::in() const {
  // @@protoc_insertion_point(field_list:buf.validate.UInt32Rules.in)
  return _internal_in();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
UInt32Rules::_internal_mutable_in() {
  return &in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
UInt32Rules::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.UInt32Rules.in)
  return _internal_mutable_in();
}

// repeated uint32 not_in = 7[json_name = "notIn", (.buf.validate.predefined) = {
inline int UInt32Rules::_internal_not_in_size() const {
  return not_in_.size();
}
inline int UInt32Rules::not_in_size() const {
  return _internal_not_in_size();
}
inline void UInt32Rules::clear_not_in() {
  not_in_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UInt32Rules::_internal_not_in(int index) const {
  return not_in_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UInt32Rules::not_in(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.UInt32Rules.not_in)
  return _internal_not_in(index);
}
inline void UInt32Rules::set_not_in(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  not_in_.Set(index, value);
  // @@protoc_insertion_point(field_set:buf.validate.UInt32Rules.not_in)
}
inline void UInt32Rules::_internal_add_not_in(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  not_in_.Add(value);
}
inline void UInt32Rules::add_not_in(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_not_in(value);
  // @@protoc_insertion_point(field_add:buf.validate.UInt32Rules.not_in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
UInt32Rules::_internal_not_in() const {
  return not_in_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
UInt32Rules::not_in() const {
  // @@protoc_insertion_point(field_list:buf.validate.UInt32Rules.not_in)
  return _internal_not_in();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
UInt32Rules::_internal_mutable_not_in() {
  return &not_in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
UInt32Rules::mutable_not_in() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.UInt32Rules.not_in)
  return _internal_mutable_not_in();
}

// repeated uint32 example = 8[json_name = "example", (.buf.validate.predefined) = {
inline int UInt32Rules::_internal_example_size() const {
  return example_.size();
}
inline int UInt32Rules::example_size() const {
  return _internal_example_size();
}
inline void UInt32Rules::clear_example() {
  example_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UInt32Rules::_internal_example(int index) const {
  return example_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UInt32Rules::example(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.UInt32Rules.example)
  return _internal_example(index);
}
inline void UInt32Rules::set_example(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  example_.Set(index, value);
  // @@protoc_insertion_point(field_set:buf.validate.UInt32Rules.example)
}
inline void UInt32Rules::_internal_add_example(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  example_.Add(value);
}
inline void UInt32Rules::add_example(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_example(value);
  // @@protoc_insertion_point(field_add:buf.validate.UInt32Rules.example)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
UInt32Rules::_internal_example() const {
  return example_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
UInt32Rules::example() const {
  // @@protoc_insertion_point(field_list:buf.validate.UInt32Rules.example)
  return _internal_example();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
UInt32Rules::_internal_mutable_example() {
  return &example_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
UInt32Rules::mutable_example() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.UInt32Rules.example)
  return _internal_mutable_example();
}

inline bool UInt32Rules::has_less_than() const {
  return less_than_case() != LESS_THAN_NOT_SET;
}
inline void UInt32Rules::clear_has_less_than() {
  _oneof_case_[0] = LESS_THAN_NOT_SET;
}
inline bool UInt32Rules::has_greater_than() const {
  return greater_than_case() != GREATER_THAN_NOT_SET;
}
inline void UInt32Rules::clear_has_greater_than() {
  _oneof_case_[1] = GREATER_THAN_NOT_SET;
}
inline UInt32Rules::LessThanCase UInt32Rules::less_than_case() const {
  return UInt32Rules::LessThanCase(_oneof_case_[0]);
}
inline UInt32Rules::GreaterThanCase UInt32Rules::greater_than_case() const {
  return UInt32Rules::GreaterThanCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// UInt64Rules

// optional uint64 const = 1[json_name = "const", (.buf.validate.predefined) = {
inline bool UInt64Rules::_internal_has_const_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UInt64Rules::has_const_() const {
  return _internal_has_const_();
}
inline void UInt64Rules::clear_const_() {
  const__ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UInt64Rules::_internal_const_() const {
  return const__;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UInt64Rules::const_() const {
  // @@protoc_insertion_point(field_get:buf.validate.UInt64Rules.const)
  return _internal_const_();
}
inline void UInt64Rules::_internal_set_const_(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  const__ = value;
}
inline void UInt64Rules::set_const_(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_const_(value);
  // @@protoc_insertion_point(field_set:buf.validate.UInt64Rules.const)
}

// uint64 lt = 2[json_name = "lt", (.buf.validate.predefined) = {
inline bool UInt64Rules::_internal_has_lt() const {
  return less_than_case() == kLt;
}
inline bool UInt64Rules::has_lt() const {
  return _internal_has_lt();
}
inline void UInt64Rules::set_has_lt() {
  _oneof_case_[0] = kLt;
}
inline void UInt64Rules::clear_lt() {
  if (_internal_has_lt()) {
    less_than_.lt_ = PROTOBUF_ULONGLONG(0);
    clear_has_less_than();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UInt64Rules::_internal_lt() const {
  if (_internal_has_lt()) {
    return less_than_.lt_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void UInt64Rules::_internal_set_lt(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_lt()) {
    clear_less_than();
    set_has_lt();
  }
  less_than_.lt_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UInt64Rules::lt() const {
  // @@protoc_insertion_point(field_get:buf.validate.UInt64Rules.lt)
  return _internal_lt();
}
inline void UInt64Rules::set_lt(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lt(value);
  // @@protoc_insertion_point(field_set:buf.validate.UInt64Rules.lt)
}

// uint64 lte = 3[json_name = "lte", (.buf.validate.predefined) = {
inline bool UInt64Rules::_internal_has_lte() const {
  return less_than_case() == kLte;
}
inline bool UInt64Rules::has_lte() const {
  return _internal_has_lte();
}
inline void UInt64Rules::set_has_lte() {
  _oneof_case_[0] = kLte;
}
inline void UInt64Rules::clear_lte() {
  if (_internal_has_lte()) {
    less_than_.lte_ = PROTOBUF_ULONGLONG(0);
    clear_has_less_than();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UInt64Rules::_internal_lte() const {
  if (_internal_has_lte()) {
    return less_than_.lte_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void UInt64Rules::_internal_set_lte(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_lte()) {
    clear_less_than();
    set_has_lte();
  }
  less_than_.lte_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UInt64Rules::lte() const {
  // @@protoc_insertion_point(field_get:buf.validate.UInt64Rules.lte)
  return _internal_lte();
}
inline void UInt64Rules::set_lte(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lte(value);
  // @@protoc_insertion_point(field_set:buf.validate.UInt64Rules.lte)
}

// uint64 gt = 4[json_name = "gt", (.buf.validate.predefined) = {
inline bool UInt64Rules::_internal_has_gt() const {
  return greater_than_case() == kGt;
}
inline bool UInt64Rules::has_gt() const {
  return _internal_has_gt();
}
inline void UInt64Rules::set_has_gt() {
  _oneof_case_[1] = kGt;
}
inline void UInt64Rules::clear_gt() {
  if (_internal_has_gt()) {
    greater_than_.gt_ = PROTOBUF_ULONGLONG(0);
    clear_has_greater_than();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UInt64Rules::_internal_gt() const {
  if (_internal_has_gt()) {
    return greater_than_.gt_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void UInt64Rules::_internal_set_gt(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_gt()) {
    clear_greater_than();
    set_has_gt();
  }
  greater_than_.gt_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UInt64Rules::gt() const {
  // @@protoc_insertion_point(field_get:buf.validate.UInt64Rules.gt)
  return _internal_gt();
}
inline void UInt64Rules::set_gt(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_gt(value);
  // @@protoc_insertion_point(field_set:buf.validate.UInt64Rules.gt)
}

// uint64 gte = 5[json_name = "gte", (.buf.validate.predefined) = {
inline bool UInt64Rules::_internal_has_gte() const {
  return greater_than_case() == kGte;
}
inline bool UInt64Rules::has_gte() const {
  return _internal_has_gte();
}
inline void UInt64Rules::set_has_gte() {
  _oneof_case_[1] = kGte;
}
inline void UInt64Rules::clear_gte() {
  if (_internal_has_gte()) {
    greater_than_.gte_ = PROTOBUF_ULONGLONG(0);
    clear_has_greater_than();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UInt64Rules::_internal_gte() const {
  if (_internal_has_gte()) {
    return greater_than_.gte_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void UInt64Rules::_internal_set_gte(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_gte()) {
    clear_greater_than();
    set_has_gte();
  }
  greater_than_.gte_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UInt64Rules::gte() const {
  // @@protoc_insertion_point(field_get:buf.validate.UInt64Rules.gte)
  return _internal_gte();
}
inline void UInt64Rules::set_gte(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_gte(value);
  // @@protoc_insertion_point(field_set:buf.validate.UInt64Rules.gte)
}

// repeated uint64 in = 6[json_name = "in", (.buf.validate.predefined) = {
inline int UInt64Rules::_internal_in_size() const {
  return in_.size();
}
inline int UInt64Rules::in_size() const {
  return _internal_in_size();
}
inline void UInt64Rules::clear_in() {
  in_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UInt64Rules::_internal_in(int index) const {
  return in_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UInt64Rules::in(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.UInt64Rules.in)
  return _internal_in(index);
}
inline void UInt64Rules::set_in(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  in_.Set(index, value);
  // @@protoc_insertion_point(field_set:buf.validate.UInt64Rules.in)
}
inline void UInt64Rules::_internal_add_in(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  in_.Add(value);
}
inline void UInt64Rules::add_in(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_in(value);
  // @@protoc_insertion_point(field_add:buf.validate.UInt64Rules.in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
UInt64Rules::_internal_in() const {
  return in_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
UInt64Rules::in() const {
  // @@protoc_insertion_point(field_list:buf.validate.UInt64Rules.in)
  return _internal_in();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
UInt64Rules::_internal_mutable_in() {
  return &in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
UInt64Rules::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.UInt64Rules.in)
  return _internal_mutable_in();
}

// repeated uint64 not_in = 7[json_name = "notIn", (.buf.validate.predefined) = {
inline int UInt64Rules::_internal_not_in_size() const {
  return not_in_.size();
}
inline int UInt64Rules::not_in_size() const {
  return _internal_not_in_size();
}
inline void UInt64Rules::clear_not_in() {
  not_in_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UInt64Rules::_internal_not_in(int index) const {
  return not_in_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UInt64Rules::not_in(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.UInt64Rules.not_in)
  return _internal_not_in(index);
}
inline void UInt64Rules::set_not_in(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  not_in_.Set(index, value);
  // @@protoc_insertion_point(field_set:buf.validate.UInt64Rules.not_in)
}
inline void UInt64Rules::_internal_add_not_in(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  not_in_.Add(value);
}
inline void UInt64Rules::add_not_in(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_not_in(value);
  // @@protoc_insertion_point(field_add:buf.validate.UInt64Rules.not_in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
UInt64Rules::_internal_not_in() const {
  return not_in_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
UInt64Rules::not_in() const {
  // @@protoc_insertion_point(field_list:buf.validate.UInt64Rules.not_in)
  return _internal_not_in();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
UInt64Rules::_internal_mutable_not_in() {
  return &not_in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
UInt64Rules::mutable_not_in() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.UInt64Rules.not_in)
  return _internal_mutable_not_in();
}

// repeated uint64 example = 8[json_name = "example", (.buf.validate.predefined) = {
inline int UInt64Rules::_internal_example_size() const {
  return example_.size();
}
inline int UInt64Rules::example_size() const {
  return _internal_example_size();
}
inline void UInt64Rules::clear_example() {
  example_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UInt64Rules::_internal_example(int index) const {
  return example_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UInt64Rules::example(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.UInt64Rules.example)
  return _internal_example(index);
}
inline void UInt64Rules::set_example(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  example_.Set(index, value);
  // @@protoc_insertion_point(field_set:buf.validate.UInt64Rules.example)
}
inline void UInt64Rules::_internal_add_example(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  example_.Add(value);
}
inline void UInt64Rules::add_example(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_example(value);
  // @@protoc_insertion_point(field_add:buf.validate.UInt64Rules.example)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
UInt64Rules::_internal_example() const {
  return example_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
UInt64Rules::example() const {
  // @@protoc_insertion_point(field_list:buf.validate.UInt64Rules.example)
  return _internal_example();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
UInt64Rules::_internal_mutable_example() {
  return &example_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
UInt64Rules::mutable_example() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.UInt64Rules.example)
  return _internal_mutable_example();
}

inline bool UInt64Rules::has_less_than() const {
  return less_than_case() != LESS_THAN_NOT_SET;
}
inline void UInt64Rules::clear_has_less_than() {
  _oneof_case_[0] = LESS_THAN_NOT_SET;
}
inline bool UInt64Rules::has_greater_than() const {
  return greater_than_case() != GREATER_THAN_NOT_SET;
}
inline void UInt64Rules::clear_has_greater_than() {
  _oneof_case_[1] = GREATER_THAN_NOT_SET;
}
inline UInt64Rules::LessThanCase UInt64Rules::less_than_case() const {
  return UInt64Rules::LessThanCase(_oneof_case_[0]);
}
inline UInt64Rules::GreaterThanCase UInt64Rules::greater_than_case() const {
  return UInt64Rules::GreaterThanCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// SInt32Rules

// optional sint32 const = 1[json_name = "const", (.buf.validate.predefined) = {
inline bool SInt32Rules::_internal_has_const_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SInt32Rules::has_const_() const {
  return _internal_has_const_();
}
inline void SInt32Rules::clear_const_() {
  const__ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SInt32Rules::_internal_const_() const {
  return const__;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SInt32Rules::const_() const {
  // @@protoc_insertion_point(field_get:buf.validate.SInt32Rules.const)
  return _internal_const_();
}
inline void SInt32Rules::_internal_set_const_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  const__ = value;
}
inline void SInt32Rules::set_const_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_const_(value);
  // @@protoc_insertion_point(field_set:buf.validate.SInt32Rules.const)
}

// sint32 lt = 2[json_name = "lt", (.buf.validate.predefined) = {
inline bool SInt32Rules::_internal_has_lt() const {
  return less_than_case() == kLt;
}
inline bool SInt32Rules::has_lt() const {
  return _internal_has_lt();
}
inline void SInt32Rules::set_has_lt() {
  _oneof_case_[0] = kLt;
}
inline void SInt32Rules::clear_lt() {
  if (_internal_has_lt()) {
    less_than_.lt_ = 0;
    clear_has_less_than();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SInt32Rules::_internal_lt() const {
  if (_internal_has_lt()) {
    return less_than_.lt_;
  }
  return 0;
}
inline void SInt32Rules::_internal_set_lt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_lt()) {
    clear_less_than();
    set_has_lt();
  }
  less_than_.lt_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SInt32Rules::lt() const {
  // @@protoc_insertion_point(field_get:buf.validate.SInt32Rules.lt)
  return _internal_lt();
}
inline void SInt32Rules::set_lt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lt(value);
  // @@protoc_insertion_point(field_set:buf.validate.SInt32Rules.lt)
}

// sint32 lte = 3[json_name = "lte", (.buf.validate.predefined) = {
inline bool SInt32Rules::_internal_has_lte() const {
  return less_than_case() == kLte;
}
inline bool SInt32Rules::has_lte() const {
  return _internal_has_lte();
}
inline void SInt32Rules::set_has_lte() {
  _oneof_case_[0] = kLte;
}
inline void SInt32Rules::clear_lte() {
  if (_internal_has_lte()) {
    less_than_.lte_ = 0;
    clear_has_less_than();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SInt32Rules::_internal_lte() const {
  if (_internal_has_lte()) {
    return less_than_.lte_;
  }
  return 0;
}
inline void SInt32Rules::_internal_set_lte(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_lte()) {
    clear_less_than();
    set_has_lte();
  }
  less_than_.lte_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SInt32Rules::lte() const {
  // @@protoc_insertion_point(field_get:buf.validate.SInt32Rules.lte)
  return _internal_lte();
}
inline void SInt32Rules::set_lte(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lte(value);
  // @@protoc_insertion_point(field_set:buf.validate.SInt32Rules.lte)
}

// sint32 gt = 4[json_name = "gt", (.buf.validate.predefined) = {
inline bool SInt32Rules::_internal_has_gt() const {
  return greater_than_case() == kGt;
}
inline bool SInt32Rules::has_gt() const {
  return _internal_has_gt();
}
inline void SInt32Rules::set_has_gt() {
  _oneof_case_[1] = kGt;
}
inline void SInt32Rules::clear_gt() {
  if (_internal_has_gt()) {
    greater_than_.gt_ = 0;
    clear_has_greater_than();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SInt32Rules::_internal_gt() const {
  if (_internal_has_gt()) {
    return greater_than_.gt_;
  }
  return 0;
}
inline void SInt32Rules::_internal_set_gt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_gt()) {
    clear_greater_than();
    set_has_gt();
  }
  greater_than_.gt_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SInt32Rules::gt() const {
  // @@protoc_insertion_point(field_get:buf.validate.SInt32Rules.gt)
  return _internal_gt();
}
inline void SInt32Rules::set_gt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gt(value);
  // @@protoc_insertion_point(field_set:buf.validate.SInt32Rules.gt)
}

// sint32 gte = 5[json_name = "gte", (.buf.validate.predefined) = {
inline bool SInt32Rules::_internal_has_gte() const {
  return greater_than_case() == kGte;
}
inline bool SInt32Rules::has_gte() const {
  return _internal_has_gte();
}
inline void SInt32Rules::set_has_gte() {
  _oneof_case_[1] = kGte;
}
inline void SInt32Rules::clear_gte() {
  if (_internal_has_gte()) {
    greater_than_.gte_ = 0;
    clear_has_greater_than();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SInt32Rules::_internal_gte() const {
  if (_internal_has_gte()) {
    return greater_than_.gte_;
  }
  return 0;
}
inline void SInt32Rules::_internal_set_gte(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_gte()) {
    clear_greater_than();
    set_has_gte();
  }
  greater_than_.gte_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SInt32Rules::gte() const {
  // @@protoc_insertion_point(field_get:buf.validate.SInt32Rules.gte)
  return _internal_gte();
}
inline void SInt32Rules::set_gte(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gte(value);
  // @@protoc_insertion_point(field_set:buf.validate.SInt32Rules.gte)
}

// repeated sint32 in = 6[json_name = "in", (.buf.validate.predefined) = {
inline int SInt32Rules::_internal_in_size() const {
  return in_.size();
}
inline int SInt32Rules::in_size() const {
  return _internal_in_size();
}
inline void SInt32Rules::clear_in() {
  in_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SInt32Rules::_internal_in(int index) const {
  return in_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SInt32Rules::in(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.SInt32Rules.in)
  return _internal_in(index);
}
inline void SInt32Rules::set_in(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  in_.Set(index, value);
  // @@protoc_insertion_point(field_set:buf.validate.SInt32Rules.in)
}
inline void SInt32Rules::_internal_add_in(::PROTOBUF_NAMESPACE_ID::int32 value) {
  in_.Add(value);
}
inline void SInt32Rules::add_in(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_in(value);
  // @@protoc_insertion_point(field_add:buf.validate.SInt32Rules.in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SInt32Rules::_internal_in() const {
  return in_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SInt32Rules::in() const {
  // @@protoc_insertion_point(field_list:buf.validate.SInt32Rules.in)
  return _internal_in();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SInt32Rules::_internal_mutable_in() {
  return &in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SInt32Rules::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.SInt32Rules.in)
  return _internal_mutable_in();
}

// repeated sint32 not_in = 7[json_name = "notIn", (.buf.validate.predefined) = {
inline int SInt32Rules::_internal_not_in_size() const {
  return not_in_.size();
}
inline int SInt32Rules::not_in_size() const {
  return _internal_not_in_size();
}
inline void SInt32Rules::clear_not_in() {
  not_in_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SInt32Rules::_internal_not_in(int index) const {
  return not_in_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SInt32Rules::not_in(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.SInt32Rules.not_in)
  return _internal_not_in(index);
}
inline void SInt32Rules::set_not_in(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  not_in_.Set(index, value);
  // @@protoc_insertion_point(field_set:buf.validate.SInt32Rules.not_in)
}
inline void SInt32Rules::_internal_add_not_in(::PROTOBUF_NAMESPACE_ID::int32 value) {
  not_in_.Add(value);
}
inline void SInt32Rules::add_not_in(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_not_in(value);
  // @@protoc_insertion_point(field_add:buf.validate.SInt32Rules.not_in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SInt32Rules::_internal_not_in() const {
  return not_in_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SInt32Rules::not_in() const {
  // @@protoc_insertion_point(field_list:buf.validate.SInt32Rules.not_in)
  return _internal_not_in();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SInt32Rules::_internal_mutable_not_in() {
  return &not_in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SInt32Rules::mutable_not_in() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.SInt32Rules.not_in)
  return _internal_mutable_not_in();
}

// repeated sint32 example = 8[json_name = "example", (.buf.validate.predefined) = {
inline int SInt32Rules::_internal_example_size() const {
  return example_.size();
}
inline int SInt32Rules::example_size() const {
  return _internal_example_size();
}
inline void SInt32Rules::clear_example() {
  example_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SInt32Rules::_internal_example(int index) const {
  return example_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SInt32Rules::example(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.SInt32Rules.example)
  return _internal_example(index);
}
inline void SInt32Rules::set_example(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  example_.Set(index, value);
  // @@protoc_insertion_point(field_set:buf.validate.SInt32Rules.example)
}
inline void SInt32Rules::_internal_add_example(::PROTOBUF_NAMESPACE_ID::int32 value) {
  example_.Add(value);
}
inline void SInt32Rules::add_example(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_example(value);
  // @@protoc_insertion_point(field_add:buf.validate.SInt32Rules.example)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SInt32Rules::_internal_example() const {
  return example_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SInt32Rules::example() const {
  // @@protoc_insertion_point(field_list:buf.validate.SInt32Rules.example)
  return _internal_example();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SInt32Rules::_internal_mutable_example() {
  return &example_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SInt32Rules::mutable_example() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.SInt32Rules.example)
  return _internal_mutable_example();
}

inline bool SInt32Rules::has_less_than() const {
  return less_than_case() != LESS_THAN_NOT_SET;
}
inline void SInt32Rules::clear_has_less_than() {
  _oneof_case_[0] = LESS_THAN_NOT_SET;
}
inline bool SInt32Rules::has_greater_than() const {
  return greater_than_case() != GREATER_THAN_NOT_SET;
}
inline void SInt32Rules::clear_has_greater_than() {
  _oneof_case_[1] = GREATER_THAN_NOT_SET;
}
inline SInt32Rules::LessThanCase SInt32Rules::less_than_case() const {
  return SInt32Rules::LessThanCase(_oneof_case_[0]);
}
inline SInt32Rules::GreaterThanCase SInt32Rules::greater_than_case() const {
  return SInt32Rules::GreaterThanCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// SInt64Rules

// optional sint64 const = 1[json_name = "const", (.buf.validate.predefined) = {
inline bool SInt64Rules::_internal_has_const_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SInt64Rules::has_const_() const {
  return _internal_has_const_();
}
inline void SInt64Rules::clear_const_() {
  const__ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SInt64Rules::_internal_const_() const {
  return const__;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SInt64Rules::const_() const {
  // @@protoc_insertion_point(field_get:buf.validate.SInt64Rules.const)
  return _internal_const_();
}
inline void SInt64Rules::_internal_set_const_(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  const__ = value;
}
inline void SInt64Rules::set_const_(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_const_(value);
  // @@protoc_insertion_point(field_set:buf.validate.SInt64Rules.const)
}

// sint64 lt = 2[json_name = "lt", (.buf.validate.predefined) = {
inline bool SInt64Rules::_internal_has_lt() const {
  return less_than_case() == kLt;
}
inline bool SInt64Rules::has_lt() const {
  return _internal_has_lt();
}
inline void SInt64Rules::set_has_lt() {
  _oneof_case_[0] = kLt;
}
inline void SInt64Rules::clear_lt() {
  if (_internal_has_lt()) {
    less_than_.lt_ = PROTOBUF_LONGLONG(0);
    clear_has_less_than();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SInt64Rules::_internal_lt() const {
  if (_internal_has_lt()) {
    return less_than_.lt_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void SInt64Rules::_internal_set_lt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_lt()) {
    clear_less_than();
    set_has_lt();
  }
  less_than_.lt_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SInt64Rules::lt() const {
  // @@protoc_insertion_point(field_get:buf.validate.SInt64Rules.lt)
  return _internal_lt();
}
inline void SInt64Rules::set_lt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_lt(value);
  // @@protoc_insertion_point(field_set:buf.validate.SInt64Rules.lt)
}

// sint64 lte = 3[json_name = "lte", (.buf.validate.predefined) = {
inline bool SInt64Rules::_internal_has_lte() const {
  return less_than_case() == kLte;
}
inline bool SInt64Rules::has_lte() const {
  return _internal_has_lte();
}
inline void SInt64Rules::set_has_lte() {
  _oneof_case_[0] = kLte;
}
inline void SInt64Rules::clear_lte() {
  if (_internal_has_lte()) {
    less_than_.lte_ = PROTOBUF_LONGLONG(0);
    clear_has_less_than();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SInt64Rules::_internal_lte() const {
  if (_internal_has_lte()) {
    return less_than_.lte_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void SInt64Rules::_internal_set_lte(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_lte()) {
    clear_less_than();
    set_has_lte();
  }
  less_than_.lte_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SInt64Rules::lte() const {
  // @@protoc_insertion_point(field_get:buf.validate.SInt64Rules.lte)
  return _internal_lte();
}
inline void SInt64Rules::set_lte(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_lte(value);
  // @@protoc_insertion_point(field_set:buf.validate.SInt64Rules.lte)
}

// sint64 gt = 4[json_name = "gt", (.buf.validate.predefined) = {
inline bool SInt64Rules::_internal_has_gt() const {
  return greater_than_case() == kGt;
}
inline bool SInt64Rules::has_gt() const {
  return _internal_has_gt();
}
inline void SInt64Rules::set_has_gt() {
  _oneof_case_[1] = kGt;
}
inline void SInt64Rules::clear_gt() {
  if (_internal_has_gt()) {
    greater_than_.gt_ = PROTOBUF_LONGLONG(0);
    clear_has_greater_than();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SInt64Rules::_internal_gt() const {
  if (_internal_has_gt()) {
    return greater_than_.gt_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void SInt64Rules::_internal_set_gt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_gt()) {
    clear_greater_than();
    set_has_gt();
  }
  greater_than_.gt_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SInt64Rules::gt() const {
  // @@protoc_insertion_point(field_get:buf.validate.SInt64Rules.gt)
  return _internal_gt();
}
inline void SInt64Rules::set_gt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_gt(value);
  // @@protoc_insertion_point(field_set:buf.validate.SInt64Rules.gt)
}

// sint64 gte = 5[json_name = "gte", (.buf.validate.predefined) = {
inline bool SInt64Rules::_internal_has_gte() const {
  return greater_than_case() == kGte;
}
inline bool SInt64Rules::has_gte() const {
  return _internal_has_gte();
}
inline void SInt64Rules::set_has_gte() {
  _oneof_case_[1] = kGte;
}
inline void SInt64Rules::clear_gte() {
  if (_internal_has_gte()) {
    greater_than_.gte_ = PROTOBUF_LONGLONG(0);
    clear_has_greater_than();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SInt64Rules::_internal_gte() const {
  if (_internal_has_gte()) {
    return greater_than_.gte_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void SInt64Rules::_internal_set_gte(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_gte()) {
    clear_greater_than();
    set_has_gte();
  }
  greater_than_.gte_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SInt64Rules::gte() const {
  // @@protoc_insertion_point(field_get:buf.validate.SInt64Rules.gte)
  return _internal_gte();
}
inline void SInt64Rules::set_gte(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_gte(value);
  // @@protoc_insertion_point(field_set:buf.validate.SInt64Rules.gte)
}

// repeated sint64 in = 6[json_name = "in", (.buf.validate.predefined) = {
inline int SInt64Rules::_internal_in_size() const {
  return in_.size();
}
inline int SInt64Rules::in_size() const {
  return _internal_in_size();
}
inline void SInt64Rules::clear_in() {
  in_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SInt64Rules::_internal_in(int index) const {
  return in_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SInt64Rules::in(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.SInt64Rules.in)
  return _internal_in(index);
}
inline void SInt64Rules::set_in(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  in_.Set(index, value);
  // @@protoc_insertion_point(field_set:buf.validate.SInt64Rules.in)
}
inline void SInt64Rules::_internal_add_in(::PROTOBUF_NAMESPACE_ID::int64 value) {
  in_.Add(value);
}
inline void SInt64Rules::add_in(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_in(value);
  // @@protoc_insertion_point(field_add:buf.validate.SInt64Rules.in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
SInt64Rules::_internal_in() const {
  return in_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
SInt64Rules::in() const {
  // @@protoc_insertion_point(field_list:buf.validate.SInt64Rules.in)
  return _internal_in();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
SInt64Rules::_internal_mutable_in() {
  return &in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
SInt64Rules::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.SInt64Rules.in)
  return _internal_mutable_in();
}

// repeated sint64 not_in = 7[json_name = "notIn", (.buf.validate.predefined) = {
inline int SInt64Rules::_internal_not_in_size() const {
  return not_in_.size();
}
inline int SInt64Rules::not_in_size() const {
  return _internal_not_in_size();
}
inline void SInt64Rules::clear_not_in() {
  not_in_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SInt64Rules::_internal_not_in(int index) const {
  return not_in_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SInt64Rules::not_in(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.SInt64Rules.not_in)
  return _internal_not_in(index);
}
inline void SInt64Rules::set_not_in(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  not_in_.Set(index, value);
  // @@protoc_insertion_point(field_set:buf.validate.SInt64Rules.not_in)
}
inline void SInt64Rules::_internal_add_not_in(::PROTOBUF_NAMESPACE_ID::int64 value) {
  not_in_.Add(value);
}
inline void SInt64Rules::add_not_in(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_not_in(value);
  // @@protoc_insertion_point(field_add:buf.validate.SInt64Rules.not_in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
SInt64Rules::_internal_not_in() const {
  return not_in_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
SInt64Rules::not_in() const {
  // @@protoc_insertion_point(field_list:buf.validate.SInt64Rules.not_in)
  return _internal_not_in();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
SInt64Rules::_internal_mutable_not_in() {
  return &not_in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
SInt64Rules::mutable_not_in() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.SInt64Rules.not_in)
  return _internal_mutable_not_in();
}

// repeated sint64 example = 8[json_name = "example", (.buf.validate.predefined) = {
inline int SInt64Rules::_internal_example_size() const {
  return example_.size();
}
inline int SInt64Rules::example_size() const {
  return _internal_example_size();
}
inline void SInt64Rules::clear_example() {
  example_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SInt64Rules::_internal_example(int index) const {
  return example_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SInt64Rules::example(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.SInt64Rules.example)
  return _internal_example(index);
}
inline void SInt64Rules::set_example(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  example_.Set(index, value);
  // @@protoc_insertion_point(field_set:buf.validate.SInt64Rules.example)
}
inline void SInt64Rules::_internal_add_example(::PROTOBUF_NAMESPACE_ID::int64 value) {
  example_.Add(value);
}
inline void SInt64Rules::add_example(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_example(value);
  // @@protoc_insertion_point(field_add:buf.validate.SInt64Rules.example)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
SInt64Rules::_internal_example() const {
  return example_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
SInt64Rules::example() const {
  // @@protoc_insertion_point(field_list:buf.validate.SInt64Rules.example)
  return _internal_example();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
SInt64Rules::_internal_mutable_example() {
  return &example_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
SInt64Rules::mutable_example() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.SInt64Rules.example)
  return _internal_mutable_example();
}

inline bool SInt64Rules::has_less_than() const {
  return less_than_case() != LESS_THAN_NOT_SET;
}
inline void SInt64Rules::clear_has_less_than() {
  _oneof_case_[0] = LESS_THAN_NOT_SET;
}
inline bool SInt64Rules::has_greater_than() const {
  return greater_than_case() != GREATER_THAN_NOT_SET;
}
inline void SInt64Rules::clear_has_greater_than() {
  _oneof_case_[1] = GREATER_THAN_NOT_SET;
}
inline SInt64Rules::LessThanCase SInt64Rules::less_than_case() const {
  return SInt64Rules::LessThanCase(_oneof_case_[0]);
}
inline SInt64Rules::GreaterThanCase SInt64Rules::greater_than_case() const {
  return SInt64Rules::GreaterThanCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// Fixed32Rules

// optional fixed32 const = 1[json_name = "const", (.buf.validate.predefined) = {
inline bool Fixed32Rules::_internal_has_const_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Fixed32Rules::has_const_() const {
  return _internal_has_const_();
}
inline void Fixed32Rules::clear_const_() {
  const__ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fixed32Rules::_internal_const_() const {
  return const__;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fixed32Rules::const_() const {
  // @@protoc_insertion_point(field_get:buf.validate.Fixed32Rules.const)
  return _internal_const_();
}
inline void Fixed32Rules::_internal_set_const_(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  const__ = value;
}
inline void Fixed32Rules::set_const_(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_const_(value);
  // @@protoc_insertion_point(field_set:buf.validate.Fixed32Rules.const)
}

// fixed32 lt = 2[json_name = "lt", (.buf.validate.predefined) = {
inline bool Fixed32Rules::_internal_has_lt() const {
  return less_than_case() == kLt;
}
inline bool Fixed32Rules::has_lt() const {
  return _internal_has_lt();
}
inline void Fixed32Rules::set_has_lt() {
  _oneof_case_[0] = kLt;
}
inline void Fixed32Rules::clear_lt() {
  if (_internal_has_lt()) {
    less_than_.lt_ = 0u;
    clear_has_less_than();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fixed32Rules::_internal_lt() const {
  if (_internal_has_lt()) {
    return less_than_.lt_;
  }
  return 0u;
}
inline void Fixed32Rules::_internal_set_lt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_lt()) {
    clear_less_than();
    set_has_lt();
  }
  less_than_.lt_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fixed32Rules::lt() const {
  // @@protoc_insertion_point(field_get:buf.validate.Fixed32Rules.lt)
  return _internal_lt();
}
inline void Fixed32Rules::set_lt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lt(value);
  // @@protoc_insertion_point(field_set:buf.validate.Fixed32Rules.lt)
}

// fixed32 lte = 3[json_name = "lte", (.buf.validate.predefined) = {
inline bool Fixed32Rules::_internal_has_lte() const {
  return less_than_case() == kLte;
}
inline bool Fixed32Rules::has_lte() const {
  return _internal_has_lte();
}
inline void Fixed32Rules::set_has_lte() {
  _oneof_case_[0] = kLte;
}
inline void Fixed32Rules::clear_lte() {
  if (_internal_has_lte()) {
    less_than_.lte_ = 0u;
    clear_has_less_than();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fixed32Rules::_internal_lte() const {
  if (_internal_has_lte()) {
    return less_than_.lte_;
  }
  return 0u;
}
inline void Fixed32Rules::_internal_set_lte(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_lte()) {
    clear_less_than();
    set_has_lte();
  }
  less_than_.lte_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fixed32Rules::lte() const {
  // @@protoc_insertion_point(field_get:buf.validate.Fixed32Rules.lte)
  return _internal_lte();
}
inline void Fixed32Rules::set_lte(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lte(value);
  // @@protoc_insertion_point(field_set:buf.validate.Fixed32Rules.lte)
}

// fixed32 gt = 4[json_name = "gt", (.buf.validate.predefined) = {
inline bool Fixed32Rules::_internal_has_gt() const {
  return greater_than_case() == kGt;
}
inline bool Fixed32Rules::has_gt() const {
  return _internal_has_gt();
}
inline void Fixed32Rules::set_has_gt() {
  _oneof_case_[1] = kGt;
}
inline void Fixed32Rules::clear_gt() {
  if (_internal_has_gt()) {
    greater_than_.gt_ = 0u;
    clear_has_greater_than();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fixed32Rules::_internal_gt() const {
  if (_internal_has_gt()) {
    return greater_than_.gt_;
  }
  return 0u;
}
inline void Fixed32Rules::_internal_set_gt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_gt()) {
    clear_greater_than();
    set_has_gt();
  }
  greater_than_.gt_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fixed32Rules::gt() const {
  // @@protoc_insertion_point(field_get:buf.validate.Fixed32Rules.gt)
  return _internal_gt();
}
inline void Fixed32Rules::set_gt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gt(value);
  // @@protoc_insertion_point(field_set:buf.validate.Fixed32Rules.gt)
}

// fixed32 gte = 5[json_name = "gte", (.buf.validate.predefined) = {
inline bool Fixed32Rules::_internal_has_gte() const {
  return greater_than_case() == kGte;
}
inline bool Fixed32Rules::has_gte() const {
  return _internal_has_gte();
}
inline void Fixed32Rules::set_has_gte() {
  _oneof_case_[1] = kGte;
}
inline void Fixed32Rules::clear_gte() {
  if (_internal_has_gte()) {
    greater_than_.gte_ = 0u;
    clear_has_greater_than();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fixed32Rules::_internal_gte() const {
  if (_internal_has_gte()) {
    return greater_than_.gte_;
  }
  return 0u;
}
inline void Fixed32Rules::_internal_set_gte(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_gte()) {
    clear_greater_than();
    set_has_gte();
  }
  greater_than_.gte_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fixed32Rules::gte() const {
  // @@protoc_insertion_point(field_get:buf.validate.Fixed32Rules.gte)
  return _internal_gte();
}
inline void Fixed32Rules::set_gte(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gte(value);
  // @@protoc_insertion_point(field_set:buf.validate.Fixed32Rules.gte)
}

// repeated fixed32 in = 6[json_name = "in", (.buf.validate.predefined) = {
inline int Fixed32Rules::_internal_in_size() const {
  return in_.size();
}
inline int Fixed32Rules::in_size() const {
  return _internal_in_size();
}
inline void Fixed32Rules::clear_in() {
  in_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fixed32Rules::_internal_in(int index) const {
  return in_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fixed32Rules::in(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.Fixed32Rules.in)
  return _internal_in(index);
}
inline void Fixed32Rules::set_in(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  in_.Set(index, value);
  // @@protoc_insertion_point(field_set:buf.validate.Fixed32Rules.in)
}
inline void Fixed32Rules::_internal_add_in(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  in_.Add(value);
}
inline void Fixed32Rules::add_in(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_in(value);
  // @@protoc_insertion_point(field_add:buf.validate.Fixed32Rules.in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Fixed32Rules::_internal_in() const {
  return in_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Fixed32Rules::in() const {
  // @@protoc_insertion_point(field_list:buf.validate.Fixed32Rules.in)
  return _internal_in();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Fixed32Rules::_internal_mutable_in() {
  return &in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Fixed32Rules::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.Fixed32Rules.in)
  return _internal_mutable_in();
}

// repeated fixed32 not_in = 7[json_name = "notIn", (.buf.validate.predefined) = {
inline int Fixed32Rules::_internal_not_in_size() const {
  return not_in_.size();
}
inline int Fixed32Rules::not_in_size() const {
  return _internal_not_in_size();
}
inline void Fixed32Rules::clear_not_in() {
  not_in_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fixed32Rules::_internal_not_in(int index) const {
  return not_in_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fixed32Rules::not_in(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.Fixed32Rules.not_in)
  return _internal_not_in(index);
}
inline void Fixed32Rules::set_not_in(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  not_in_.Set(index, value);
  // @@protoc_insertion_point(field_set:buf.validate.Fixed32Rules.not_in)
}
inline void Fixed32Rules::_internal_add_not_in(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  not_in_.Add(value);
}
inline void Fixed32Rules::add_not_in(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_not_in(value);
  // @@protoc_insertion_point(field_add:buf.validate.Fixed32Rules.not_in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Fixed32Rules::_internal_not_in() const {
  return not_in_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Fixed32Rules::not_in() const {
  // @@protoc_insertion_point(field_list:buf.validate.Fixed32Rules.not_in)
  return _internal_not_in();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Fixed32Rules::_internal_mutable_not_in() {
  return &not_in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Fixed32Rules::mutable_not_in() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.Fixed32Rules.not_in)
  return _internal_mutable_not_in();
}

// repeated fixed32 example = 8[json_name = "example", (.buf.validate.predefined) = {
inline int Fixed32Rules::_internal_example_size() const {
  return example_.size();
}
inline int Fixed32Rules::example_size() const {
  return _internal_example_size();
}
inline void Fixed32Rules::clear_example() {
  example_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fixed32Rules::_internal_example(int index) const {
  return example_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fixed32Rules::example(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.Fixed32Rules.example)
  return _internal_example(index);
}
inline void Fixed32Rules::set_example(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  example_.Set(index, value);
  // @@protoc_insertion_point(field_set:buf.validate.Fixed32Rules.example)
}
inline void Fixed32Rules::_internal_add_example(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  example_.Add(value);
}
inline void Fixed32Rules::add_example(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_example(value);
  // @@protoc_insertion_point(field_add:buf.validate.Fixed32Rules.example)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Fixed32Rules::_internal_example() const {
  return example_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Fixed32Rules::example() const {
  // @@protoc_insertion_point(field_list:buf.validate.Fixed32Rules.example)
  return _internal_example();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Fixed32Rules::_internal_mutable_example() {
  return &example_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Fixed32Rules::mutable_example() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.Fixed32Rules.example)
  return _internal_mutable_example();
}

inline bool Fixed32Rules::has_less_than() const {
  return less_than_case() != LESS_THAN_NOT_SET;
}
inline void Fixed32Rules::clear_has_less_than() {
  _oneof_case_[0] = LESS_THAN_NOT_SET;
}
inline bool Fixed32Rules::has_greater_than() const {
  return greater_than_case() != GREATER_THAN_NOT_SET;
}
inline void Fixed32Rules::clear_has_greater_than() {
  _oneof_case_[1] = GREATER_THAN_NOT_SET;
}
inline Fixed32Rules::LessThanCase Fixed32Rules::less_than_case() const {
  return Fixed32Rules::LessThanCase(_oneof_case_[0]);
}
inline Fixed32Rules::GreaterThanCase Fixed32Rules::greater_than_case() const {
  return Fixed32Rules::GreaterThanCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// Fixed64Rules

// optional fixed64 const = 1[json_name = "const", (.buf.validate.predefined) = {
inline bool Fixed64Rules::_internal_has_const_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Fixed64Rules::has_const_() const {
  return _internal_has_const_();
}
inline void Fixed64Rules::clear_const_() {
  const__ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fixed64Rules::_internal_const_() const {
  return const__;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fixed64Rules::const_() const {
  // @@protoc_insertion_point(field_get:buf.validate.Fixed64Rules.const)
  return _internal_const_();
}
inline void Fixed64Rules::_internal_set_const_(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  const__ = value;
}
inline void Fixed64Rules::set_const_(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_const_(value);
  // @@protoc_insertion_point(field_set:buf.validate.Fixed64Rules.const)
}

// fixed64 lt = 2[json_name = "lt", (.buf.validate.predefined) = {
inline bool Fixed64Rules::_internal_has_lt() const {
  return less_than_case() == kLt;
}
inline bool Fixed64Rules::has_lt() const {
  return _internal_has_lt();
}
inline void Fixed64Rules::set_has_lt() {
  _oneof_case_[0] = kLt;
}
inline void Fixed64Rules::clear_lt() {
  if (_internal_has_lt()) {
    less_than_.lt_ = PROTOBUF_ULONGLONG(0);
    clear_has_less_than();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fixed64Rules::_internal_lt() const {
  if (_internal_has_lt()) {
    return less_than_.lt_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void Fixed64Rules::_internal_set_lt(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_lt()) {
    clear_less_than();
    set_has_lt();
  }
  less_than_.lt_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fixed64Rules::lt() const {
  // @@protoc_insertion_point(field_get:buf.validate.Fixed64Rules.lt)
  return _internal_lt();
}
inline void Fixed64Rules::set_lt(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lt(value);
  // @@protoc_insertion_point(field_set:buf.validate.Fixed64Rules.lt)
}

// fixed64 lte = 3[json_name = "lte", (.buf.validate.predefined) = {
inline bool Fixed64Rules::_internal_has_lte() const {
  return less_than_case() == kLte;
}
inline bool Fixed64Rules::has_lte() const {
  return _internal_has_lte();
}
inline void Fixed64Rules::set_has_lte() {
  _oneof_case_[0] = kLte;
}
inline void Fixed64Rules::clear_lte() {
  if (_internal_has_lte()) {
    less_than_.lte_ = PROTOBUF_ULONGLONG(0);
    clear_has_less_than();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fixed64Rules::_internal_lte() const {
  if (_internal_has_lte()) {
    return less_than_.lte_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void Fixed64Rules::_internal_set_lte(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_lte()) {
    clear_less_than();
    set_has_lte();
  }
  less_than_.lte_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fixed64Rules::lte() const {
  // @@protoc_insertion_point(field_get:buf.validate.Fixed64Rules.lte)
  return _internal_lte();
}
inline void Fixed64Rules::set_lte(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lte(value);
  // @@protoc_insertion_point(field_set:buf.validate.Fixed64Rules.lte)
}

// fixed64 gt = 4[json_name = "gt", (.buf.validate.predefined) = {
inline bool Fixed64Rules::_internal_has_gt() const {
  return greater_than_case() == kGt;
}
inline bool Fixed64Rules::has_gt() const {
  return _internal_has_gt();
}
inline void Fixed64Rules::set_has_gt() {
  _oneof_case_[1] = kGt;
}
inline void Fixed64Rules::clear_gt() {
  if (_internal_has_gt()) {
    greater_than_.gt_ = PROTOBUF_ULONGLONG(0);
    clear_has_greater_than();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fixed64Rules::_internal_gt() const {
  if (_internal_has_gt()) {
    return greater_than_.gt_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void Fixed64Rules::_internal_set_gt(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_gt()) {
    clear_greater_than();
    set_has_gt();
  }
  greater_than_.gt_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fixed64Rules::gt() const {
  // @@protoc_insertion_point(field_get:buf.validate.Fixed64Rules.gt)
  return _internal_gt();
}
inline void Fixed64Rules::set_gt(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_gt(value);
  // @@protoc_insertion_point(field_set:buf.validate.Fixed64Rules.gt)
}

// fixed64 gte = 5[json_name = "gte", (.buf.validate.predefined) = {
inline bool Fixed64Rules::_internal_has_gte() const {
  return greater_than_case() == kGte;
}
inline bool Fixed64Rules::has_gte() const {
  return _internal_has_gte();
}
inline void Fixed64Rules::set_has_gte() {
  _oneof_case_[1] = kGte;
}
inline void Fixed64Rules::clear_gte() {
  if (_internal_has_gte()) {
    greater_than_.gte_ = PROTOBUF_ULONGLONG(0);
    clear_has_greater_than();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fixed64Rules::_internal_gte() const {
  if (_internal_has_gte()) {
    return greater_than_.gte_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void Fixed64Rules::_internal_set_gte(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_gte()) {
    clear_greater_than();
    set_has_gte();
  }
  greater_than_.gte_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fixed64Rules::gte() const {
  // @@protoc_insertion_point(field_get:buf.validate.Fixed64Rules.gte)
  return _internal_gte();
}
inline void Fixed64Rules::set_gte(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_gte(value);
  // @@protoc_insertion_point(field_set:buf.validate.Fixed64Rules.gte)
}

// repeated fixed64 in = 6[json_name = "in", (.buf.validate.predefined) = {
inline int Fixed64Rules::_internal_in_size() const {
  return in_.size();
}
inline int Fixed64Rules::in_size() const {
  return _internal_in_size();
}
inline void Fixed64Rules::clear_in() {
  in_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fixed64Rules::_internal_in(int index) const {
  return in_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fixed64Rules::in(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.Fixed64Rules.in)
  return _internal_in(index);
}
inline void Fixed64Rules::set_in(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  in_.Set(index, value);
  // @@protoc_insertion_point(field_set:buf.validate.Fixed64Rules.in)
}
inline void Fixed64Rules::_internal_add_in(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  in_.Add(value);
}
inline void Fixed64Rules::add_in(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_in(value);
  // @@protoc_insertion_point(field_add:buf.validate.Fixed64Rules.in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Fixed64Rules::_internal_in() const {
  return in_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Fixed64Rules::in() const {
  // @@protoc_insertion_point(field_list:buf.validate.Fixed64Rules.in)
  return _internal_in();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Fixed64Rules::_internal_mutable_in() {
  return &in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Fixed64Rules::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.Fixed64Rules.in)
  return _internal_mutable_in();
}

// repeated fixed64 not_in = 7[json_name = "notIn", (.buf.validate.predefined) = {
inline int Fixed64Rules::_internal_not_in_size() const {
  return not_in_.size();
}
inline int Fixed64Rules::not_in_size() const {
  return _internal_not_in_size();
}
inline void Fixed64Rules::clear_not_in() {
  not_in_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fixed64Rules::_internal_not_in(int index) const {
  return not_in_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fixed64Rules::not_in(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.Fixed64Rules.not_in)
  return _internal_not_in(index);
}
inline void Fixed64Rules::set_not_in(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  not_in_.Set(index, value);
  // @@protoc_insertion_point(field_set:buf.validate.Fixed64Rules.not_in)
}
inline void Fixed64Rules::_internal_add_not_in(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  not_in_.Add(value);
}
inline void Fixed64Rules::add_not_in(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_not_in(value);
  // @@protoc_insertion_point(field_add:buf.validate.Fixed64Rules.not_in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Fixed64Rules::_internal_not_in() const {
  return not_in_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Fixed64Rules::not_in() const {
  // @@protoc_insertion_point(field_list:buf.validate.Fixed64Rules.not_in)
  return _internal_not_in();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Fixed64Rules::_internal_mutable_not_in() {
  return &not_in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Fixed64Rules::mutable_not_in() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.Fixed64Rules.not_in)
  return _internal_mutable_not_in();
}

// repeated fixed64 example = 8[json_name = "example", (.buf.validate.predefined) = {
inline int Fixed64Rules::_internal_example_size() const {
  return example_.size();
}
inline int Fixed64Rules::example_size() const {
  return _internal_example_size();
}
inline void Fixed64Rules::clear_example() {
  example_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fixed64Rules::_internal_example(int index) const {
  return example_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Fixed64Rules::example(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.Fixed64Rules.example)
  return _internal_example(index);
}
inline void Fixed64Rules::set_example(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  example_.Set(index, value);
  // @@protoc_insertion_point(field_set:buf.validate.Fixed64Rules.example)
}
inline void Fixed64Rules::_internal_add_example(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  example_.Add(value);
}
inline void Fixed64Rules::add_example(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_example(value);
  // @@protoc_insertion_point(field_add:buf.validate.Fixed64Rules.example)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Fixed64Rules::_internal_example() const {
  return example_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Fixed64Rules::example() const {
  // @@protoc_insertion_point(field_list:buf.validate.Fixed64Rules.example)
  return _internal_example();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Fixed64Rules::_internal_mutable_example() {
  return &example_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Fixed64Rules::mutable_example() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.Fixed64Rules.example)
  return _internal_mutable_example();
}

inline bool Fixed64Rules::has_less_than() const {
  return less_than_case() != LESS_THAN_NOT_SET;
}
inline void Fixed64Rules::clear_has_less_than() {
  _oneof_case_[0] = LESS_THAN_NOT_SET;
}
inline bool Fixed64Rules::has_greater_than() const {
  return greater_than_case() != GREATER_THAN_NOT_SET;
}
inline void Fixed64Rules::clear_has_greater_than() {
  _oneof_case_[1] = GREATER_THAN_NOT_SET;
}
inline Fixed64Rules::LessThanCase Fixed64Rules::less_than_case() const {
  return Fixed64Rules::LessThanCase(_oneof_case_[0]);
}
inline Fixed64Rules::GreaterThanCase Fixed64Rules::greater_than_case() const {
  return Fixed64Rules::GreaterThanCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// SFixed32Rules

// optional sfixed32 const = 1[json_name = "const", (.buf.validate.predefined) = {
inline bool SFixed32Rules::_internal_has_const_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SFixed32Rules::has_const_() const {
  return _internal_has_const_();
}
inline void SFixed32Rules::clear_const_() {
  const__ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SFixed32Rules::_internal_const_() const {
  return const__;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SFixed32Rules::const_() const {
  // @@protoc_insertion_point(field_get:buf.validate.SFixed32Rules.const)
  return _internal_const_();
}
inline void SFixed32Rules::_internal_set_const_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  const__ = value;
}
inline void SFixed32Rules::set_const_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_const_(value);
  // @@protoc_insertion_point(field_set:buf.validate.SFixed32Rules.const)
}

// sfixed32 lt = 2[json_name = "lt", (.buf.validate.predefined) = {
inline bool SFixed32Rules::_internal_has_lt() const {
  return less_than_case() == kLt;
}
inline bool SFixed32Rules::has_lt() const {
  return _internal_has_lt();
}
inline void SFixed32Rules::set_has_lt() {
  _oneof_case_[0] = kLt;
}
inline void SFixed32Rules::clear_lt() {
  if (_internal_has_lt()) {
    less_than_.lt_ = 0;
    clear_has_less_than();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SFixed32Rules::_internal_lt() const {
  if (_internal_has_lt()) {
    return less_than_.lt_;
  }
  return 0;
}
inline void SFixed32Rules::_internal_set_lt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_lt()) {
    clear_less_than();
    set_has_lt();
  }
  less_than_.lt_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SFixed32Rules::lt() const {
  // @@protoc_insertion_point(field_get:buf.validate.SFixed32Rules.lt)
  return _internal_lt();
}
inline void SFixed32Rules::set_lt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lt(value);
  // @@protoc_insertion_point(field_set:buf.validate.SFixed32Rules.lt)
}

// sfixed32 lte = 3[json_name = "lte", (.buf.validate.predefined) = {
inline bool SFixed32Rules::_internal_has_lte() const {
  return less_than_case() == kLte;
}
inline bool SFixed32Rules::has_lte() const {
  return _internal_has_lte();
}
inline void SFixed32Rules::set_has_lte() {
  _oneof_case_[0] = kLte;
}
inline void SFixed32Rules::clear_lte() {
  if (_internal_has_lte()) {
    less_than_.lte_ = 0;
    clear_has_less_than();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SFixed32Rules::_internal_lte() const {
  if (_internal_has_lte()) {
    return less_than_.lte_;
  }
  return 0;
}
inline void SFixed32Rules::_internal_set_lte(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_lte()) {
    clear_less_than();
    set_has_lte();
  }
  less_than_.lte_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SFixed32Rules::lte() const {
  // @@protoc_insertion_point(field_get:buf.validate.SFixed32Rules.lte)
  return _internal_lte();
}
inline void SFixed32Rules::set_lte(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lte(value);
  // @@protoc_insertion_point(field_set:buf.validate.SFixed32Rules.lte)
}

// sfixed32 gt = 4[json_name = "gt", (.buf.validate.predefined) = {
inline bool SFixed32Rules::_internal_has_gt() const {
  return greater_than_case() == kGt;
}
inline bool SFixed32Rules::has_gt() const {
  return _internal_has_gt();
}
inline void SFixed32Rules::set_has_gt() {
  _oneof_case_[1] = kGt;
}
inline void SFixed32Rules::clear_gt() {
  if (_internal_has_gt()) {
    greater_than_.gt_ = 0;
    clear_has_greater_than();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SFixed32Rules::_internal_gt() const {
  if (_internal_has_gt()) {
    return greater_than_.gt_;
  }
  return 0;
}
inline void SFixed32Rules::_internal_set_gt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_gt()) {
    clear_greater_than();
    set_has_gt();
  }
  greater_than_.gt_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SFixed32Rules::gt() const {
  // @@protoc_insertion_point(field_get:buf.validate.SFixed32Rules.gt)
  return _internal_gt();
}
inline void SFixed32Rules::set_gt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gt(value);
  // @@protoc_insertion_point(field_set:buf.validate.SFixed32Rules.gt)
}

// sfixed32 gte = 5[json_name = "gte", (.buf.validate.predefined) = {
inline bool SFixed32Rules::_internal_has_gte() const {
  return greater_than_case() == kGte;
}
inline bool SFixed32Rules::has_gte() const {
  return _internal_has_gte();
}
inline void SFixed32Rules::set_has_gte() {
  _oneof_case_[1] = kGte;
}
inline void SFixed32Rules::clear_gte() {
  if (_internal_has_gte()) {
    greater_than_.gte_ = 0;
    clear_has_greater_than();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SFixed32Rules::_internal_gte() const {
  if (_internal_has_gte()) {
    return greater_than_.gte_;
  }
  return 0;
}
inline void SFixed32Rules::_internal_set_gte(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_gte()) {
    clear_greater_than();
    set_has_gte();
  }
  greater_than_.gte_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SFixed32Rules::gte() const {
  // @@protoc_insertion_point(field_get:buf.validate.SFixed32Rules.gte)
  return _internal_gte();
}
inline void SFixed32Rules::set_gte(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gte(value);
  // @@protoc_insertion_point(field_set:buf.validate.SFixed32Rules.gte)
}

// repeated sfixed32 in = 6[json_name = "in", (.buf.validate.predefined) = {
inline int SFixed32Rules::_internal_in_size() const {
  return in_.size();
}
inline int SFixed32Rules::in_size() const {
  return _internal_in_size();
}
inline void SFixed32Rules::clear_in() {
  in_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SFixed32Rules::_internal_in(int index) const {
  return in_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SFixed32Rules::in(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.SFixed32Rules.in)
  return _internal_in(index);
}
inline void SFixed32Rules::set_in(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  in_.Set(index, value);
  // @@protoc_insertion_point(field_set:buf.validate.SFixed32Rules.in)
}
inline void SFixed32Rules::_internal_add_in(::PROTOBUF_NAMESPACE_ID::int32 value) {
  in_.Add(value);
}
inline void SFixed32Rules::add_in(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_in(value);
  // @@protoc_insertion_point(field_add:buf.validate.SFixed32Rules.in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SFixed32Rules::_internal_in() const {
  return in_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SFixed32Rules::in() const {
  // @@protoc_insertion_point(field_list:buf.validate.SFixed32Rules.in)
  return _internal_in();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SFixed32Rules::_internal_mutable_in() {
  return &in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SFixed32Rules::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.SFixed32Rules.in)
  return _internal_mutable_in();
}

// repeated sfixed32 not_in = 7[json_name = "notIn", (.buf.validate.predefined) = {
inline int SFixed32Rules::_internal_not_in_size() const {
  return not_in_.size();
}
inline int SFixed32Rules::not_in_size() const {
  return _internal_not_in_size();
}
inline void SFixed32Rules::clear_not_in() {
  not_in_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SFixed32Rules::_internal_not_in(int index) const {
  return not_in_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SFixed32Rules::not_in(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.SFixed32Rules.not_in)
  return _internal_not_in(index);
}
inline void SFixed32Rules::set_not_in(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  not_in_.Set(index, value);
  // @@protoc_insertion_point(field_set:buf.validate.SFixed32Rules.not_in)
}
inline void SFixed32Rules::_internal_add_not_in(::PROTOBUF_NAMESPACE_ID::int32 value) {
  not_in_.Add(value);
}
inline void SFixed32Rules::add_not_in(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_not_in(value);
  // @@protoc_insertion_point(field_add:buf.validate.SFixed32Rules.not_in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SFixed32Rules::_internal_not_in() const {
  return not_in_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SFixed32Rules::not_in() const {
  // @@protoc_insertion_point(field_list:buf.validate.SFixed32Rules.not_in)
  return _internal_not_in();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SFixed32Rules::_internal_mutable_not_in() {
  return &not_in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SFixed32Rules::mutable_not_in() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.SFixed32Rules.not_in)
  return _internal_mutable_not_in();
}

// repeated sfixed32 example = 8[json_name = "example", (.buf.validate.predefined) = {
inline int SFixed32Rules::_internal_example_size() const {
  return example_.size();
}
inline int SFixed32Rules::example_size() const {
  return _internal_example_size();
}
inline void SFixed32Rules::clear_example() {
  example_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SFixed32Rules::_internal_example(int index) const {
  return example_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SFixed32Rules::example(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.SFixed32Rules.example)
  return _internal_example(index);
}
inline void SFixed32Rules::set_example(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  example_.Set(index, value);
  // @@protoc_insertion_point(field_set:buf.validate.SFixed32Rules.example)
}
inline void SFixed32Rules::_internal_add_example(::PROTOBUF_NAMESPACE_ID::int32 value) {
  example_.Add(value);
}
inline void SFixed32Rules::add_example(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_example(value);
  // @@protoc_insertion_point(field_add:buf.validate.SFixed32Rules.example)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SFixed32Rules::_internal_example() const {
  return example_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SFixed32Rules::example() const {
  // @@protoc_insertion_point(field_list:buf.validate.SFixed32Rules.example)
  return _internal_example();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SFixed32Rules::_internal_mutable_example() {
  return &example_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SFixed32Rules::mutable_example() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.SFixed32Rules.example)
  return _internal_mutable_example();
}

inline bool SFixed32Rules::has_less_than() const {
  return less_than_case() != LESS_THAN_NOT_SET;
}
inline void SFixed32Rules::clear_has_less_than() {
  _oneof_case_[0] = LESS_THAN_NOT_SET;
}
inline bool SFixed32Rules::has_greater_than() const {
  return greater_than_case() != GREATER_THAN_NOT_SET;
}
inline void SFixed32Rules::clear_has_greater_than() {
  _oneof_case_[1] = GREATER_THAN_NOT_SET;
}
inline SFixed32Rules::LessThanCase SFixed32Rules::less_than_case() const {
  return SFixed32Rules::LessThanCase(_oneof_case_[0]);
}
inline SFixed32Rules::GreaterThanCase SFixed32Rules::greater_than_case() const {
  return SFixed32Rules::GreaterThanCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// SFixed64Rules

// optional sfixed64 const = 1[json_name = "const", (.buf.validate.predefined) = {
inline bool SFixed64Rules::_internal_has_const_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SFixed64Rules::has_const_() const {
  return _internal_has_const_();
}
inline void SFixed64Rules::clear_const_() {
  const__ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SFixed64Rules::_internal_const_() const {
  return const__;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SFixed64Rules::const_() const {
  // @@protoc_insertion_point(field_get:buf.validate.SFixed64Rules.const)
  return _internal_const_();
}
inline void SFixed64Rules::_internal_set_const_(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  const__ = value;
}
inline void SFixed64Rules::set_const_(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_const_(value);
  // @@protoc_insertion_point(field_set:buf.validate.SFixed64Rules.const)
}

// sfixed64 lt = 2[json_name = "lt", (.buf.validate.predefined) = {
inline bool SFixed64Rules::_internal_has_lt() const {
  return less_than_case() == kLt;
}
inline bool SFixed64Rules::has_lt() const {
  return _internal_has_lt();
}
inline void SFixed64Rules::set_has_lt() {
  _oneof_case_[0] = kLt;
}
inline void SFixed64Rules::clear_lt() {
  if (_internal_has_lt()) {
    less_than_.lt_ = PROTOBUF_LONGLONG(0);
    clear_has_less_than();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SFixed64Rules::_internal_lt() const {
  if (_internal_has_lt()) {
    return less_than_.lt_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void SFixed64Rules::_internal_set_lt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_lt()) {
    clear_less_than();
    set_has_lt();
  }
  less_than_.lt_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SFixed64Rules::lt() const {
  // @@protoc_insertion_point(field_get:buf.validate.SFixed64Rules.lt)
  return _internal_lt();
}
inline void SFixed64Rules::set_lt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_lt(value);
  // @@protoc_insertion_point(field_set:buf.validate.SFixed64Rules.lt)
}

// sfixed64 lte = 3[json_name = "lte", (.buf.validate.predefined) = {
inline bool SFixed64Rules::_internal_has_lte() const {
  return less_than_case() == kLte;
}
inline bool SFixed64Rules::has_lte() const {
  return _internal_has_lte();
}
inline void SFixed64Rules::set_has_lte() {
  _oneof_case_[0] = kLte;
}
inline void SFixed64Rules::clear_lte() {
  if (_internal_has_lte()) {
    less_than_.lte_ = PROTOBUF_LONGLONG(0);
    clear_has_less_than();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SFixed64Rules::_internal_lte() const {
  if (_internal_has_lte()) {
    return less_than_.lte_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void SFixed64Rules::_internal_set_lte(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_lte()) {
    clear_less_than();
    set_has_lte();
  }
  less_than_.lte_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SFixed64Rules::lte() const {
  // @@protoc_insertion_point(field_get:buf.validate.SFixed64Rules.lte)
  return _internal_lte();
}
inline void SFixed64Rules::set_lte(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_lte(value);
  // @@protoc_insertion_point(field_set:buf.validate.SFixed64Rules.lte)
}

// sfixed64 gt = 4[json_name = "gt", (.buf.validate.predefined) = {
inline bool SFixed64Rules::_internal_has_gt() const {
  return greater_than_case() == kGt;
}
inline bool SFixed64Rules::has_gt() const {
  return _internal_has_gt();
}
inline void SFixed64Rules::set_has_gt() {
  _oneof_case_[1] = kGt;
}
inline void SFixed64Rules::clear_gt() {
  if (_internal_has_gt()) {
    greater_than_.gt_ = PROTOBUF_LONGLONG(0);
    clear_has_greater_than();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SFixed64Rules::_internal_gt() const {
  if (_internal_has_gt()) {
    return greater_than_.gt_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void SFixed64Rules::_internal_set_gt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_gt()) {
    clear_greater_than();
    set_has_gt();
  }
  greater_than_.gt_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SFixed64Rules::gt() const {
  // @@protoc_insertion_point(field_get:buf.validate.SFixed64Rules.gt)
  return _internal_gt();
}
inline void SFixed64Rules::set_gt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_gt(value);
  // @@protoc_insertion_point(field_set:buf.validate.SFixed64Rules.gt)
}

// sfixed64 gte = 5[json_name = "gte", (.buf.validate.predefined) = {
inline bool SFixed64Rules::_internal_has_gte() const {
  return greater_than_case() == kGte;
}
inline bool SFixed64Rules::has_gte() const {
  return _internal_has_gte();
}
inline void SFixed64Rules::set_has_gte() {
  _oneof_case_[1] = kGte;
}
inline void SFixed64Rules::clear_gte() {
  if (_internal_has_gte()) {
    greater_than_.gte_ = PROTOBUF_LONGLONG(0);
    clear_has_greater_than();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SFixed64Rules::_internal_gte() const {
  if (_internal_has_gte()) {
    return greater_than_.gte_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void SFixed64Rules::_internal_set_gte(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_gte()) {
    clear_greater_than();
    set_has_gte();
  }
  greater_than_.gte_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SFixed64Rules::gte() const {
  // @@protoc_insertion_point(field_get:buf.validate.SFixed64Rules.gte)
  return _internal_gte();
}
inline void SFixed64Rules::set_gte(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_gte(value);
  // @@protoc_insertion_point(field_set:buf.validate.SFixed64Rules.gte)
}

// repeated sfixed64 in = 6[json_name = "in", (.buf.validate.predefined) = {
inline int SFixed64Rules::_internal_in_size() const {
  return in_.size();
}
inline int SFixed64Rules::in_size() const {
  return _internal_in_size();
}
inline void SFixed64Rules::clear_in() {
  in_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SFixed64Rules::_internal_in(int index) const {
  return in_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SFixed64Rules::in(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.SFixed64Rules.in)
  return _internal_in(index);
}
inline void SFixed64Rules::set_in(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  in_.Set(index, value);
  // @@protoc_insertion_point(field_set:buf.validate.SFixed64Rules.in)
}
inline void SFixed64Rules::_internal_add_in(::PROTOBUF_NAMESPACE_ID::int64 value) {
  in_.Add(value);
}
inline void SFixed64Rules::add_in(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_in(value);
  // @@protoc_insertion_point(field_add:buf.validate.SFixed64Rules.in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
SFixed64Rules::_internal_in() const {
  return in_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
SFixed64Rules::in() const {
  // @@protoc_insertion_point(field_list:buf.validate.SFixed64Rules.in)
  return _internal_in();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
SFixed64Rules::_internal_mutable_in() {
  return &in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
SFixed64Rules::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.SFixed64Rules.in)
  return _internal_mutable_in();
}

// repeated sfixed64 not_in = 7[json_name = "notIn", (.buf.validate.predefined) = {
inline int SFixed64Rules::_internal_not_in_size() const {
  return not_in_.size();
}
inline int SFixed64Rules::not_in_size() const {
  return _internal_not_in_size();
}
inline void SFixed64Rules::clear_not_in() {
  not_in_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SFixed64Rules::_internal_not_in(int index) const {
  return not_in_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SFixed64Rules::not_in(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.SFixed64Rules.not_in)
  return _internal_not_in(index);
}
inline void SFixed64Rules::set_not_in(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  not_in_.Set(index, value);
  // @@protoc_insertion_point(field_set:buf.validate.SFixed64Rules.not_in)
}
inline void SFixed64Rules::_internal_add_not_in(::PROTOBUF_NAMESPACE_ID::int64 value) {
  not_in_.Add(value);
}
inline void SFixed64Rules::add_not_in(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_not_in(value);
  // @@protoc_insertion_point(field_add:buf.validate.SFixed64Rules.not_in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
SFixed64Rules::_internal_not_in() const {
  return not_in_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
SFixed64Rules::not_in() const {
  // @@protoc_insertion_point(field_list:buf.validate.SFixed64Rules.not_in)
  return _internal_not_in();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
SFixed64Rules::_internal_mutable_not_in() {
  return &not_in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
SFixed64Rules::mutable_not_in() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.SFixed64Rules.not_in)
  return _internal_mutable_not_in();
}

// repeated sfixed64 example = 8[json_name = "example", (.buf.validate.predefined) = {
inline int SFixed64Rules::_internal_example_size() const {
  return example_.size();
}
inline int SFixed64Rules::example_size() const {
  return _internal_example_size();
}
inline void SFixed64Rules::clear_example() {
  example_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SFixed64Rules::_internal_example(int index) const {
  return example_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SFixed64Rules::example(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.SFixed64Rules.example)
  return _internal_example(index);
}
inline void SFixed64Rules::set_example(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  example_.Set(index, value);
  // @@protoc_insertion_point(field_set:buf.validate.SFixed64Rules.example)
}
inline void SFixed64Rules::_internal_add_example(::PROTOBUF_NAMESPACE_ID::int64 value) {
  example_.Add(value);
}
inline void SFixed64Rules::add_example(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_example(value);
  // @@protoc_insertion_point(field_add:buf.validate.SFixed64Rules.example)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
SFixed64Rules::_internal_example() const {
  return example_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
SFixed64Rules::example() const {
  // @@protoc_insertion_point(field_list:buf.validate.SFixed64Rules.example)
  return _internal_example();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
SFixed64Rules::_internal_mutable_example() {
  return &example_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
SFixed64Rules::mutable_example() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.SFixed64Rules.example)
  return _internal_mutable_example();
}

inline bool SFixed64Rules::has_less_than() const {
  return less_than_case() != LESS_THAN_NOT_SET;
}
inline void SFixed64Rules::clear_has_less_than() {
  _oneof_case_[0] = LESS_THAN_NOT_SET;
}
inline bool SFixed64Rules::has_greater_than() const {
  return greater_than_case() != GREATER_THAN_NOT_SET;
}
inline void SFixed64Rules::clear_has_greater_than() {
  _oneof_case_[1] = GREATER_THAN_NOT_SET;
}
inline SFixed64Rules::LessThanCase SFixed64Rules::less_than_case() const {
  return SFixed64Rules::LessThanCase(_oneof_case_[0]);
}
inline SFixed64Rules::GreaterThanCase SFixed64Rules::greater_than_case() const {
  return SFixed64Rules::GreaterThanCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// BoolRules

// optional bool const = 1[json_name = "const", (.buf.validate.predefined) = {
inline bool BoolRules::_internal_has_const_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BoolRules::has_const_() const {
  return _internal_has_const_();
}
inline void BoolRules::clear_const_() {
  const__ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool BoolRules::_internal_const_() const {
  return const__;
}
inline bool BoolRules::const_() const {
  // @@protoc_insertion_point(field_get:buf.validate.BoolRules.const)
  return _internal_const_();
}
inline void BoolRules::_internal_set_const_(bool value) {
  _has_bits_[0] |= 0x00000001u;
  const__ = value;
}
inline void BoolRules::set_const_(bool value) {
  _internal_set_const_(value);
  // @@protoc_insertion_point(field_set:buf.validate.BoolRules.const)
}

// repeated bool example = 2[json_name = "example", (.buf.validate.predefined) = {
inline int BoolRules::_internal_example_size() const {
  return example_.size();
}
inline int BoolRules::example_size() const {
  return _internal_example_size();
}
inline void BoolRules::clear_example() {
  example_.Clear();
}
inline bool BoolRules::_internal_example(int index) const {
  return example_.Get(index);
}
inline bool BoolRules::example(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.BoolRules.example)
  return _internal_example(index);
}
inline void BoolRules::set_example(int index, bool value) {
  example_.Set(index, value);
  // @@protoc_insertion_point(field_set:buf.validate.BoolRules.example)
}
inline void BoolRules::_internal_add_example(bool value) {
  example_.Add(value);
}
inline void BoolRules::add_example(bool value) {
  _internal_add_example(value);
  // @@protoc_insertion_point(field_add:buf.validate.BoolRules.example)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
BoolRules::_internal_example() const {
  return example_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
BoolRules::example() const {
  // @@protoc_insertion_point(field_list:buf.validate.BoolRules.example)
  return _internal_example();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
BoolRules::_internal_mutable_example() {
  return &example_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
BoolRules::mutable_example() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.BoolRules.example)
  return _internal_mutable_example();
}

// -------------------------------------------------------------------

// StringRules

// optional string const = 1[json_name = "const", (.buf.validate.predefined) = {
inline bool StringRules::_internal_has_const_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StringRules::has_const_() const {
  return _internal_has_const_();
}
inline void StringRules::clear_const_() {
  const__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StringRules::const_() const {
  // @@protoc_insertion_point(field_get:buf.validate.StringRules.const)
  return _internal_const_();
}
inline void StringRules::set_const_(const std::string& value) {
  _internal_set_const_(value);
  // @@protoc_insertion_point(field_set:buf.validate.StringRules.const)
}
inline std::string* StringRules::mutable_const_() {
  // @@protoc_insertion_point(field_mutable:buf.validate.StringRules.const)
  return _internal_mutable_const_();
}
inline const std::string& StringRules::_internal_const_() const {
  return const__.Get();
}
inline void StringRules::_internal_set_const_(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  const__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StringRules::set_const_(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  const__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:buf.validate.StringRules.const)
}
inline void StringRules::set_const_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  const__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:buf.validate.StringRules.const)
}
inline void StringRules::set_const_(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  const__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:buf.validate.StringRules.const)
}
inline std::string* StringRules::_internal_mutable_const_() {
  _has_bits_[0] |= 0x00000001u;
  return const__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StringRules::release_const_() {
  // @@protoc_insertion_point(field_release:buf.validate.StringRules.const)
  if (!_internal_has_const_()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return const__.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StringRules::set_allocated_const_(std::string* const_) {
  if (const_ != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  const__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), const_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:buf.validate.StringRules.const)
}
inline std::string* StringRules::unsafe_arena_release_const_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:buf.validate.StringRules.const)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return const__.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StringRules::unsafe_arena_set_allocated_const_(
    std::string* const_) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (const_ != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  const__.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      const_, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:buf.validate.StringRules.const)
}

// optional uint64 len = 19[json_name = "len", (.buf.validate.predefined) = {
inline bool StringRules::_internal_has_len() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool StringRules::has_len() const {
  return _internal_has_len();
}
inline void StringRules::clear_len() {
  len_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StringRules::_internal_len() const {
  return len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StringRules::len() const {
  // @@protoc_insertion_point(field_get:buf.validate.StringRules.len)
  return _internal_len();
}
inline void StringRules::_internal_set_len(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000800u;
  len_ = value;
}
inline void StringRules::set_len(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:buf.validate.StringRules.len)
}

// optional uint64 min_len = 2[json_name = "minLen", (.buf.validate.predefined) = {
inline bool StringRules::_internal_has_min_len() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool StringRules::has_min_len() const {
  return _internal_has_min_len();
}
inline void StringRules::clear_min_len() {
  min_len_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StringRules::_internal_min_len() const {
  return min_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StringRules::min_len() const {
  // @@protoc_insertion_point(field_get:buf.validate.StringRules.min_len)
  return _internal_min_len();
}
inline void StringRules::_internal_set_min_len(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  min_len_ = value;
}
inline void StringRules::set_min_len(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_min_len(value);
  // @@protoc_insertion_point(field_set:buf.validate.StringRules.min_len)
}

// optional uint64 max_len = 3[json_name = "maxLen", (.buf.validate.predefined) = {
inline bool StringRules::_internal_has_max_len() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool StringRules::has_max_len() const {
  return _internal_has_max_len();
}
inline void StringRules::clear_max_len() {
  max_len_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StringRules::_internal_max_len() const {
  return max_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StringRules::max_len() const {
  // @@protoc_insertion_point(field_get:buf.validate.StringRules.max_len)
  return _internal_max_len();
}
inline void StringRules::_internal_set_max_len(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  max_len_ = value;
}
inline void StringRules::set_max_len(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_max_len(value);
  // @@protoc_insertion_point(field_set:buf.validate.StringRules.max_len)
}

// optional uint64 len_bytes = 20[json_name = "lenBytes", (.buf.validate.predefined) = {
inline bool StringRules::_internal_has_len_bytes() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool StringRules::has_len_bytes() const {
  return _internal_has_len_bytes();
}
inline void StringRules::clear_len_bytes() {
  len_bytes_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StringRules::_internal_len_bytes() const {
  return len_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StringRules::len_bytes() const {
  // @@protoc_insertion_point(field_get:buf.validate.StringRules.len_bytes)
  return _internal_len_bytes();
}
inline void StringRules::_internal_set_len_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00001000u;
  len_bytes_ = value;
}
inline void StringRules::set_len_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_len_bytes(value);
  // @@protoc_insertion_point(field_set:buf.validate.StringRules.len_bytes)
}

// optional uint64 min_bytes = 4[json_name = "minBytes", (.buf.validate.predefined) = {
inline bool StringRules::_internal_has_min_bytes() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool StringRules::has_min_bytes() const {
  return _internal_has_min_bytes();
}
inline void StringRules::clear_min_bytes() {
  min_bytes_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StringRules::_internal_min_bytes() const {
  return min_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StringRules::min_bytes() const {
  // @@protoc_insertion_point(field_get:buf.validate.StringRules.min_bytes)
  return _internal_min_bytes();
}
inline void StringRules::_internal_set_min_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  min_bytes_ = value;
}
inline void StringRules::set_min_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_min_bytes(value);
  // @@protoc_insertion_point(field_set:buf.validate.StringRules.min_bytes)
}

// optional uint64 max_bytes = 5[json_name = "maxBytes", (.buf.validate.predefined) = {
inline bool StringRules::_internal_has_max_bytes() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool StringRules::has_max_bytes() const {
  return _internal_has_max_bytes();
}
inline void StringRules::clear_max_bytes() {
  max_bytes_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StringRules::_internal_max_bytes() const {
  return max_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StringRules::max_bytes() const {
  // @@protoc_insertion_point(field_get:buf.validate.StringRules.max_bytes)
  return _internal_max_bytes();
}
inline void StringRules::_internal_set_max_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000200u;
  max_bytes_ = value;
}
inline void StringRules::set_max_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_max_bytes(value);
  // @@protoc_insertion_point(field_set:buf.validate.StringRules.max_bytes)
}

// optional string pattern = 6[json_name = "pattern", (.buf.validate.predefined) = {
inline bool StringRules::_internal_has_pattern() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StringRules::has_pattern() const {
  return _internal_has_pattern();
}
inline void StringRules::clear_pattern() {
  pattern_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& StringRules::pattern() const {
  // @@protoc_insertion_point(field_get:buf.validate.StringRules.pattern)
  return _internal_pattern();
}
inline void StringRules::set_pattern(const std::string& value) {
  _internal_set_pattern(value);
  // @@protoc_insertion_point(field_set:buf.validate.StringRules.pattern)
}
inline std::string* StringRules::mutable_pattern() {
  // @@protoc_insertion_point(field_mutable:buf.validate.StringRules.pattern)
  return _internal_mutable_pattern();
}
inline const std::string& StringRules::_internal_pattern() const {
  return pattern_.Get();
}
inline void StringRules::_internal_set_pattern(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  pattern_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StringRules::set_pattern(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  pattern_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:buf.validate.StringRules.pattern)
}
inline void StringRules::set_pattern(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  pattern_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:buf.validate.StringRules.pattern)
}
inline void StringRules::set_pattern(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  pattern_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:buf.validate.StringRules.pattern)
}
inline std::string* StringRules::_internal_mutable_pattern() {
  _has_bits_[0] |= 0x00000002u;
  return pattern_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StringRules::release_pattern() {
  // @@protoc_insertion_point(field_release:buf.validate.StringRules.pattern)
  if (!_internal_has_pattern()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return pattern_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StringRules::set_allocated_pattern(std::string* pattern) {
  if (pattern != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pattern_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pattern,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:buf.validate.StringRules.pattern)
}
inline std::string* StringRules::unsafe_arena_release_pattern() {
  // @@protoc_insertion_point(field_unsafe_arena_release:buf.validate.StringRules.pattern)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return pattern_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StringRules::unsafe_arena_set_allocated_pattern(
    std::string* pattern) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pattern != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pattern_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pattern, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:buf.validate.StringRules.pattern)
}

// optional string prefix = 7[json_name = "prefix", (.buf.validate.predefined) = {
inline bool StringRules::_internal_has_prefix() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StringRules::has_prefix() const {
  return _internal_has_prefix();
}
inline void StringRules::clear_prefix() {
  prefix_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& StringRules::prefix() const {
  // @@protoc_insertion_point(field_get:buf.validate.StringRules.prefix)
  return _internal_prefix();
}
inline void StringRules::set_prefix(const std::string& value) {
  _internal_set_prefix(value);
  // @@protoc_insertion_point(field_set:buf.validate.StringRules.prefix)
}
inline std::string* StringRules::mutable_prefix() {
  // @@protoc_insertion_point(field_mutable:buf.validate.StringRules.prefix)
  return _internal_mutable_prefix();
}
inline const std::string& StringRules::_internal_prefix() const {
  return prefix_.Get();
}
inline void StringRules::_internal_set_prefix(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StringRules::set_prefix(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  prefix_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:buf.validate.StringRules.prefix)
}
inline void StringRules::set_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:buf.validate.StringRules.prefix)
}
inline void StringRules::set_prefix(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:buf.validate.StringRules.prefix)
}
inline std::string* StringRules::_internal_mutable_prefix() {
  _has_bits_[0] |= 0x00000004u;
  return prefix_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StringRules::release_prefix() {
  // @@protoc_insertion_point(field_release:buf.validate.StringRules.prefix)
  if (!_internal_has_prefix()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return prefix_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StringRules::set_allocated_prefix(std::string* prefix) {
  if (prefix != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  prefix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prefix,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:buf.validate.StringRules.prefix)
}
inline std::string* StringRules::unsafe_arena_release_prefix() {
  // @@protoc_insertion_point(field_unsafe_arena_release:buf.validate.StringRules.prefix)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return prefix_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StringRules::unsafe_arena_set_allocated_prefix(
    std::string* prefix) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (prefix != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  prefix_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      prefix, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:buf.validate.StringRules.prefix)
}

// optional string suffix = 8[json_name = "suffix", (.buf.validate.predefined) = {
inline bool StringRules::_internal_has_suffix() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool StringRules::has_suffix() const {
  return _internal_has_suffix();
}
inline void StringRules::clear_suffix() {
  suffix_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& StringRules::suffix() const {
  // @@protoc_insertion_point(field_get:buf.validate.StringRules.suffix)
  return _internal_suffix();
}
inline void StringRules::set_suffix(const std::string& value) {
  _internal_set_suffix(value);
  // @@protoc_insertion_point(field_set:buf.validate.StringRules.suffix)
}
inline std::string* StringRules::mutable_suffix() {
  // @@protoc_insertion_point(field_mutable:buf.validate.StringRules.suffix)
  return _internal_mutable_suffix();
}
inline const std::string& StringRules::_internal_suffix() const {
  return suffix_.Get();
}
inline void StringRules::_internal_set_suffix(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  suffix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StringRules::set_suffix(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  suffix_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:buf.validate.StringRules.suffix)
}
inline void StringRules::set_suffix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  suffix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:buf.validate.StringRules.suffix)
}
inline void StringRules::set_suffix(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  suffix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:buf.validate.StringRules.suffix)
}
inline std::string* StringRules::_internal_mutable_suffix() {
  _has_bits_[0] |= 0x00000008u;
  return suffix_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StringRules::release_suffix() {
  // @@protoc_insertion_point(field_release:buf.validate.StringRules.suffix)
  if (!_internal_has_suffix()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return suffix_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StringRules::set_allocated_suffix(std::string* suffix) {
  if (suffix != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  suffix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), suffix,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:buf.validate.StringRules.suffix)
}
inline std::string* StringRules::unsafe_arena_release_suffix() {
  // @@protoc_insertion_point(field_unsafe_arena_release:buf.validate.StringRules.suffix)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return suffix_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StringRules::unsafe_arena_set_allocated_suffix(
    std::string* suffix) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (suffix != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  suffix_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      suffix, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:buf.validate.StringRules.suffix)
}

// optional string contains = 9[json_name = "contains", (.buf.validate.predefined) = {
inline bool StringRules::_internal_has_contains() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool StringRules::has_contains() const {
  return _internal_has_contains();
}
inline void StringRules::clear_contains() {
  contains_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& StringRules::contains() const {
  // @@protoc_insertion_point(field_get:buf.validate.StringRules.contains)
  return _internal_contains();
}
inline void StringRules::set_contains(const std::string& value) {
  _internal_set_contains(value);
  // @@protoc_insertion_point(field_set:buf.validate.StringRules.contains)
}
inline std::string* StringRules::mutable_contains() {
  // @@protoc_insertion_point(field_mutable:buf.validate.StringRules.contains)
  return _internal_mutable_contains();
}
inline const std::string& StringRules::_internal_contains() const {
  return contains_.Get();
}
inline void StringRules::_internal_set_contains(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  contains_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StringRules::set_contains(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  contains_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:buf.validate.StringRules.contains)
}
inline void StringRules::set_contains(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  contains_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:buf.validate.StringRules.contains)
}
inline void StringRules::set_contains(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  contains_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:buf.validate.StringRules.contains)
}
inline std::string* StringRules::_internal_mutable_contains() {
  _has_bits_[0] |= 0x00000010u;
  return contains_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StringRules::release_contains() {
  // @@protoc_insertion_point(field_release:buf.validate.StringRules.contains)
  if (!_internal_has_contains()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return contains_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StringRules::set_allocated_contains(std::string* contains) {
  if (contains != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  contains_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contains,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:buf.validate.StringRules.contains)
}
inline std::string* StringRules::unsafe_arena_release_contains() {
  // @@protoc_insertion_point(field_unsafe_arena_release:buf.validate.StringRules.contains)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000010u;
  return contains_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StringRules::unsafe_arena_set_allocated_contains(
    std::string* contains) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (contains != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  contains_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      contains, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:buf.validate.StringRules.contains)
}

// optional string not_contains = 23[json_name = "notContains", (.buf.validate.predefined) = {
inline bool StringRules::_internal_has_not_contains() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool StringRules::has_not_contains() const {
  return _internal_has_not_contains();
}
inline void StringRules::clear_not_contains() {
  not_contains_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& StringRules::not_contains() const {
  // @@protoc_insertion_point(field_get:buf.validate.StringRules.not_contains)
  return _internal_not_contains();
}
inline void StringRules::set_not_contains(const std::string& value) {
  _internal_set_not_contains(value);
  // @@protoc_insertion_point(field_set:buf.validate.StringRules.not_contains)
}
inline std::string* StringRules::mutable_not_contains() {
  // @@protoc_insertion_point(field_mutable:buf.validate.StringRules.not_contains)
  return _internal_mutable_not_contains();
}
inline const std::string& StringRules::_internal_not_contains() const {
  return not_contains_.Get();
}
inline void StringRules::_internal_set_not_contains(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  not_contains_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StringRules::set_not_contains(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  not_contains_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:buf.validate.StringRules.not_contains)
}
inline void StringRules::set_not_contains(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  not_contains_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:buf.validate.StringRules.not_contains)
}
inline void StringRules::set_not_contains(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  not_contains_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:buf.validate.StringRules.not_contains)
}
inline std::string* StringRules::_internal_mutable_not_contains() {
  _has_bits_[0] |= 0x00000020u;
  return not_contains_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StringRules::release_not_contains() {
  // @@protoc_insertion_point(field_release:buf.validate.StringRules.not_contains)
  if (!_internal_has_not_contains()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return not_contains_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StringRules::set_allocated_not_contains(std::string* not_contains) {
  if (not_contains != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  not_contains_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), not_contains,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:buf.validate.StringRules.not_contains)
}
inline std::string* StringRules::unsafe_arena_release_not_contains() {
  // @@protoc_insertion_point(field_unsafe_arena_release:buf.validate.StringRules.not_contains)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000020u;
  return not_contains_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StringRules::unsafe_arena_set_allocated_not_contains(
    std::string* not_contains) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (not_contains != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  not_contains_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      not_contains, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:buf.validate.StringRules.not_contains)
}

// repeated string in = 10[json_name = "in", (.buf.validate.predefined) = {
inline int StringRules::_internal_in_size() const {
  return in_.size();
}
inline int StringRules::in_size() const {
  return _internal_in_size();
}
inline void StringRules::clear_in() {
  in_.Clear();
}
inline std::string* StringRules::add_in() {
  // @@protoc_insertion_point(field_add_mutable:buf.validate.StringRules.in)
  return _internal_add_in();
}
inline const std::string& StringRules::_internal_in(int index) const {
  return in_.Get(index);
}
inline const std::string& StringRules::in(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.StringRules.in)
  return _internal_in(index);
}
inline std::string* StringRules::mutable_in(int index) {
  // @@protoc_insertion_point(field_mutable:buf.validate.StringRules.in)
  return in_.Mutable(index);
}
inline void StringRules::set_in(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:buf.validate.StringRules.in)
  in_.Mutable(index)->assign(value);
}
inline void StringRules::set_in(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:buf.validate.StringRules.in)
  in_.Mutable(index)->assign(std::move(value));
}
inline void StringRules::set_in(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  in_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:buf.validate.StringRules.in)
}
inline void StringRules::set_in(int index, const char* value, size_t size) {
  in_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:buf.validate.StringRules.in)
}
inline std::string* StringRules::_internal_add_in() {
  return in_.Add();
}
inline void StringRules::add_in(const std::string& value) {
  in_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:buf.validate.StringRules.in)
}
inline void StringRules::add_in(std::string&& value) {
  in_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:buf.validate.StringRules.in)
}
inline void StringRules::add_in(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  in_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:buf.validate.StringRules.in)
}
inline void StringRules::add_in(const char* value, size_t size) {
  in_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:buf.validate.StringRules.in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StringRules::in() const {
  // @@protoc_insertion_point(field_list:buf.validate.StringRules.in)
  return in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StringRules::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.StringRules.in)
  return &in_;
}

// repeated string not_in = 11[json_name = "notIn", (.buf.validate.predefined) = {
inline int StringRules::_internal_not_in_size() const {
  return not_in_.size();
}
inline int StringRules::not_in_size() const {
  return _internal_not_in_size();
}
inline void StringRules::clear_not_in() {
  not_in_.Clear();
}
inline std::string* StringRules::add_not_in() {
  // @@protoc_insertion_point(field_add_mutable:buf.validate.StringRules.not_in)
  return _internal_add_not_in();
}
inline const std::string& StringRules::_internal_not_in(int index) const {
  return not_in_.Get(index);
}
inline const std::string& StringRules::not_in(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.StringRules.not_in)
  return _internal_not_in(index);
}
inline std::string* StringRules::mutable_not_in(int index) {
  // @@protoc_insertion_point(field_mutable:buf.validate.StringRules.not_in)
  return not_in_.Mutable(index);
}
inline void StringRules::set_not_in(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:buf.validate.StringRules.not_in)
  not_in_.Mutable(index)->assign(value);
}
inline void StringRules::set_not_in(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:buf.validate.StringRules.not_in)
  not_in_.Mutable(index)->assign(std::move(value));
}
inline void StringRules::set_not_in(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  not_in_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:buf.validate.StringRules.not_in)
}
inline void StringRules::set_not_in(int index, const char* value, size_t size) {
  not_in_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:buf.validate.StringRules.not_in)
}
inline std::string* StringRules::_internal_add_not_in() {
  return not_in_.Add();
}
inline void StringRules::add_not_in(const std::string& value) {
  not_in_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:buf.validate.StringRules.not_in)
}
inline void StringRules::add_not_in(std::string&& value) {
  not_in_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:buf.validate.StringRules.not_in)
}
inline void StringRules::add_not_in(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  not_in_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:buf.validate.StringRules.not_in)
}
inline void StringRules::add_not_in(const char* value, size_t size) {
  not_in_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:buf.validate.StringRules.not_in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StringRules::not_in() const {
  // @@protoc_insertion_point(field_list:buf.validate.StringRules.not_in)
  return not_in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StringRules::mutable_not_in() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.StringRules.not_in)
  return &not_in_;
}

// bool email = 12[json_name = "email", (.buf.validate.predefined) = {
inline bool StringRules::_internal_has_email() const {
  return well_known_case() == kEmail;
}
inline bool StringRules::has_email() const {
  return _internal_has_email();
}
inline void StringRules::set_has_email() {
  _oneof_case_[0] = kEmail;
}
inline void StringRules::clear_email() {
  if (_internal_has_email()) {
    well_known_.email_ = false;
    clear_has_well_known();
  }
}
inline bool StringRules::_internal_email() const {
  if (_internal_has_email()) {
    return well_known_.email_;
  }
  return false;
}
inline void StringRules::_internal_set_email(bool value) {
  if (!_internal_has_email()) {
    clear_well_known();
    set_has_email();
  }
  well_known_.email_ = value;
}
inline bool StringRules::email() const {
  // @@protoc_insertion_point(field_get:buf.validate.StringRules.email)
  return _internal_email();
}
inline void StringRules::set_email(bool value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:buf.validate.StringRules.email)
}

// bool hostname = 13[json_name = "hostname", (.buf.validate.predefined) = {
inline bool StringRules::_internal_has_hostname() const {
  return well_known_case() == kHostname;
}
inline bool StringRules::has_hostname() const {
  return _internal_has_hostname();
}
inline void StringRules::set_has_hostname() {
  _oneof_case_[0] = kHostname;
}
inline void StringRules::clear_hostname() {
  if (_internal_has_hostname()) {
    well_known_.hostname_ = false;
    clear_has_well_known();
  }
}
inline bool StringRules::_internal_hostname() const {
  if (_internal_has_hostname()) {
    return well_known_.hostname_;
  }
  return false;
}
inline void StringRules::_internal_set_hostname(bool value) {
  if (!_internal_has_hostname()) {
    clear_well_known();
    set_has_hostname();
  }
  well_known_.hostname_ = value;
}
inline bool StringRules::hostname() const {
  // @@protoc_insertion_point(field_get:buf.validate.StringRules.hostname)
  return _internal_hostname();
}
inline void StringRules::set_hostname(bool value) {
  _internal_set_hostname(value);
  // @@protoc_insertion_point(field_set:buf.validate.StringRules.hostname)
}

// bool ip = 14[json_name = "ip", (.buf.validate.predefined) = {
inline bool StringRules::_internal_has_ip() const {
  return well_known_case() == kIp;
}
inline bool StringRules::has_ip() const {
  return _internal_has_ip();
}
inline void StringRules::set_has_ip() {
  _oneof_case_[0] = kIp;
}
inline void StringRules::clear_ip() {
  if (_internal_has_ip()) {
    well_known_.ip_ = false;
    clear_has_well_known();
  }
}
inline bool StringRules::_internal_ip() const {
  if (_internal_has_ip()) {
    return well_known_.ip_;
  }
  return false;
}
inline void StringRules::_internal_set_ip(bool value) {
  if (!_internal_has_ip()) {
    clear_well_known();
    set_has_ip();
  }
  well_known_.ip_ = value;
}
inline bool StringRules::ip() const {
  // @@protoc_insertion_point(field_get:buf.validate.StringRules.ip)
  return _internal_ip();
}
inline void StringRules::set_ip(bool value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:buf.validate.StringRules.ip)
}

// bool ipv4 = 15[json_name = "ipv4", (.buf.validate.predefined) = {
inline bool StringRules::_internal_has_ipv4() const {
  return well_known_case() == kIpv4;
}
inline bool StringRules::has_ipv4() const {
  return _internal_has_ipv4();
}
inline void StringRules::set_has_ipv4() {
  _oneof_case_[0] = kIpv4;
}
inline void StringRules::clear_ipv4() {
  if (_internal_has_ipv4()) {
    well_known_.ipv4_ = false;
    clear_has_well_known();
  }
}
inline bool StringRules::_internal_ipv4() const {
  if (_internal_has_ipv4()) {
    return well_known_.ipv4_;
  }
  return false;
}
inline void StringRules::_internal_set_ipv4(bool value) {
  if (!_internal_has_ipv4()) {
    clear_well_known();
    set_has_ipv4();
  }
  well_known_.ipv4_ = value;
}
inline bool StringRules::ipv4() const {
  // @@protoc_insertion_point(field_get:buf.validate.StringRules.ipv4)
  return _internal_ipv4();
}
inline void StringRules::set_ipv4(bool value) {
  _internal_set_ipv4(value);
  // @@protoc_insertion_point(field_set:buf.validate.StringRules.ipv4)
}

// bool ipv6 = 16[json_name = "ipv6", (.buf.validate.predefined) = {
inline bool StringRules::_internal_has_ipv6() const {
  return well_known_case() == kIpv6;
}
inline bool StringRules::has_ipv6() const {
  return _internal_has_ipv6();
}
inline void StringRules::set_has_ipv6() {
  _oneof_case_[0] = kIpv6;
}
inline void StringRules::clear_ipv6() {
  if (_internal_has_ipv6()) {
    well_known_.ipv6_ = false;
    clear_has_well_known();
  }
}
inline bool StringRules::_internal_ipv6() const {
  if (_internal_has_ipv6()) {
    return well_known_.ipv6_;
  }
  return false;
}
inline void StringRules::_internal_set_ipv6(bool value) {
  if (!_internal_has_ipv6()) {
    clear_well_known();
    set_has_ipv6();
  }
  well_known_.ipv6_ = value;
}
inline bool StringRules::ipv6() const {
  // @@protoc_insertion_point(field_get:buf.validate.StringRules.ipv6)
  return _internal_ipv6();
}
inline void StringRules::set_ipv6(bool value) {
  _internal_set_ipv6(value);
  // @@protoc_insertion_point(field_set:buf.validate.StringRules.ipv6)
}

// bool uri = 17[json_name = "uri", (.buf.validate.predefined) = {
inline bool StringRules::_internal_has_uri() const {
  return well_known_case() == kUri;
}
inline bool StringRules::has_uri() const {
  return _internal_has_uri();
}
inline void StringRules::set_has_uri() {
  _oneof_case_[0] = kUri;
}
inline void StringRules::clear_uri() {
  if (_internal_has_uri()) {
    well_known_.uri_ = false;
    clear_has_well_known();
  }
}
inline bool StringRules::_internal_uri() const {
  if (_internal_has_uri()) {
    return well_known_.uri_;
  }
  return false;
}
inline void StringRules::_internal_set_uri(bool value) {
  if (!_internal_has_uri()) {
    clear_well_known();
    set_has_uri();
  }
  well_known_.uri_ = value;
}
inline bool StringRules::uri() const {
  // @@protoc_insertion_point(field_get:buf.validate.StringRules.uri)
  return _internal_uri();
}
inline void StringRules::set_uri(bool value) {
  _internal_set_uri(value);
  // @@protoc_insertion_point(field_set:buf.validate.StringRules.uri)
}

// bool uri_ref = 18[json_name = "uriRef", (.buf.validate.predefined) = {
inline bool StringRules::_internal_has_uri_ref() const {
  return well_known_case() == kUriRef;
}
inline bool StringRules::has_uri_ref() const {
  return _internal_has_uri_ref();
}
inline void StringRules::set_has_uri_ref() {
  _oneof_case_[0] = kUriRef;
}
inline void StringRules::clear_uri_ref() {
  if (_internal_has_uri_ref()) {
    well_known_.uri_ref_ = false;
    clear_has_well_known();
  }
}
inline bool StringRules::_internal_uri_ref() const {
  if (_internal_has_uri_ref()) {
    return well_known_.uri_ref_;
  }
  return false;
}
inline void StringRules::_internal_set_uri_ref(bool value) {
  if (!_internal_has_uri_ref()) {
    clear_well_known();
    set_has_uri_ref();
  }
  well_known_.uri_ref_ = value;
}
inline bool StringRules::uri_ref() const {
  // @@protoc_insertion_point(field_get:buf.validate.StringRules.uri_ref)
  return _internal_uri_ref();
}
inline void StringRules::set_uri_ref(bool value) {
  _internal_set_uri_ref(value);
  // @@protoc_insertion_point(field_set:buf.validate.StringRules.uri_ref)
}

// bool address = 21[json_name = "address", (.buf.validate.predefined) = {
inline bool StringRules::_internal_has_address() const {
  return well_known_case() == kAddress;
}
inline bool StringRules::has_address() const {
  return _internal_has_address();
}
inline void StringRules::set_has_address() {
  _oneof_case_[0] = kAddress;
}
inline void StringRules::clear_address() {
  if (_internal_has_address()) {
    well_known_.address_ = false;
    clear_has_well_known();
  }
}
inline bool StringRules::_internal_address() const {
  if (_internal_has_address()) {
    return well_known_.address_;
  }
  return false;
}
inline void StringRules::_internal_set_address(bool value) {
  if (!_internal_has_address()) {
    clear_well_known();
    set_has_address();
  }
  well_known_.address_ = value;
}
inline bool StringRules::address() const {
  // @@protoc_insertion_point(field_get:buf.validate.StringRules.address)
  return _internal_address();
}
inline void StringRules::set_address(bool value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:buf.validate.StringRules.address)
}

// bool uuid = 22[json_name = "uuid", (.buf.validate.predefined) = {
inline bool StringRules::_internal_has_uuid() const {
  return well_known_case() == kUuid;
}
inline bool StringRules::has_uuid() const {
  return _internal_has_uuid();
}
inline void StringRules::set_has_uuid() {
  _oneof_case_[0] = kUuid;
}
inline void StringRules::clear_uuid() {
  if (_internal_has_uuid()) {
    well_known_.uuid_ = false;
    clear_has_well_known();
  }
}
inline bool StringRules::_internal_uuid() const {
  if (_internal_has_uuid()) {
    return well_known_.uuid_;
  }
  return false;
}
inline void StringRules::_internal_set_uuid(bool value) {
  if (!_internal_has_uuid()) {
    clear_well_known();
    set_has_uuid();
  }
  well_known_.uuid_ = value;
}
inline bool StringRules::uuid() const {
  // @@protoc_insertion_point(field_get:buf.validate.StringRules.uuid)
  return _internal_uuid();
}
inline void StringRules::set_uuid(bool value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:buf.validate.StringRules.uuid)
}

// bool tuuid = 33[json_name = "tuuid", (.buf.validate.predefined) = {
inline bool StringRules::_internal_has_tuuid() const {
  return well_known_case() == kTuuid;
}
inline bool StringRules::has_tuuid() const {
  return _internal_has_tuuid();
}
inline void StringRules::set_has_tuuid() {
  _oneof_case_[0] = kTuuid;
}
inline void StringRules::clear_tuuid() {
  if (_internal_has_tuuid()) {
    well_known_.tuuid_ = false;
    clear_has_well_known();
  }
}
inline bool StringRules::_internal_tuuid() const {
  if (_internal_has_tuuid()) {
    return well_known_.tuuid_;
  }
  return false;
}
inline void StringRules::_internal_set_tuuid(bool value) {
  if (!_internal_has_tuuid()) {
    clear_well_known();
    set_has_tuuid();
  }
  well_known_.tuuid_ = value;
}
inline bool StringRules::tuuid() const {
  // @@protoc_insertion_point(field_get:buf.validate.StringRules.tuuid)
  return _internal_tuuid();
}
inline void StringRules::set_tuuid(bool value) {
  _internal_set_tuuid(value);
  // @@protoc_insertion_point(field_set:buf.validate.StringRules.tuuid)
}

// bool ip_with_prefixlen = 26[json_name = "ipWithPrefixlen", (.buf.validate.predefined) = {
inline bool StringRules::_internal_has_ip_with_prefixlen() const {
  return well_known_case() == kIpWithPrefixlen;
}
inline bool StringRules::has_ip_with_prefixlen() const {
  return _internal_has_ip_with_prefixlen();
}
inline void StringRules::set_has_ip_with_prefixlen() {
  _oneof_case_[0] = kIpWithPrefixlen;
}
inline void StringRules::clear_ip_with_prefixlen() {
  if (_internal_has_ip_with_prefixlen()) {
    well_known_.ip_with_prefixlen_ = false;
    clear_has_well_known();
  }
}
inline bool StringRules::_internal_ip_with_prefixlen() const {
  if (_internal_has_ip_with_prefixlen()) {
    return well_known_.ip_with_prefixlen_;
  }
  return false;
}
inline void StringRules::_internal_set_ip_with_prefixlen(bool value) {
  if (!_internal_has_ip_with_prefixlen()) {
    clear_well_known();
    set_has_ip_with_prefixlen();
  }
  well_known_.ip_with_prefixlen_ = value;
}
inline bool StringRules::ip_with_prefixlen() const {
  // @@protoc_insertion_point(field_get:buf.validate.StringRules.ip_with_prefixlen)
  return _internal_ip_with_prefixlen();
}
inline void StringRules::set_ip_with_prefixlen(bool value) {
  _internal_set_ip_with_prefixlen(value);
  // @@protoc_insertion_point(field_set:buf.validate.StringRules.ip_with_prefixlen)
}

// bool ipv4_with_prefixlen = 27[json_name = "ipv4WithPrefixlen", (.buf.validate.predefined) = {
inline bool StringRules::_internal_has_ipv4_with_prefixlen() const {
  return well_known_case() == kIpv4WithPrefixlen;
}
inline bool StringRules::has_ipv4_with_prefixlen() const {
  return _internal_has_ipv4_with_prefixlen();
}
inline void StringRules::set_has_ipv4_with_prefixlen() {
  _oneof_case_[0] = kIpv4WithPrefixlen;
}
inline void StringRules::clear_ipv4_with_prefixlen() {
  if (_internal_has_ipv4_with_prefixlen()) {
    well_known_.ipv4_with_prefixlen_ = false;
    clear_has_well_known();
  }
}
inline bool StringRules::_internal_ipv4_with_prefixlen() const {
  if (_internal_has_ipv4_with_prefixlen()) {
    return well_known_.ipv4_with_prefixlen_;
  }
  return false;
}
inline void StringRules::_internal_set_ipv4_with_prefixlen(bool value) {
  if (!_internal_has_ipv4_with_prefixlen()) {
    clear_well_known();
    set_has_ipv4_with_prefixlen();
  }
  well_known_.ipv4_with_prefixlen_ = value;
}
inline bool StringRules::ipv4_with_prefixlen() const {
  // @@protoc_insertion_point(field_get:buf.validate.StringRules.ipv4_with_prefixlen)
  return _internal_ipv4_with_prefixlen();
}
inline void StringRules::set_ipv4_with_prefixlen(bool value) {
  _internal_set_ipv4_with_prefixlen(value);
  // @@protoc_insertion_point(field_set:buf.validate.StringRules.ipv4_with_prefixlen)
}

// bool ipv6_with_prefixlen = 28[json_name = "ipv6WithPrefixlen", (.buf.validate.predefined) = {
inline bool StringRules::_internal_has_ipv6_with_prefixlen() const {
  return well_known_case() == kIpv6WithPrefixlen;
}
inline bool StringRules::has_ipv6_with_prefixlen() const {
  return _internal_has_ipv6_with_prefixlen();
}
inline void StringRules::set_has_ipv6_with_prefixlen() {
  _oneof_case_[0] = kIpv6WithPrefixlen;
}
inline void StringRules::clear_ipv6_with_prefixlen() {
  if (_internal_has_ipv6_with_prefixlen()) {
    well_known_.ipv6_with_prefixlen_ = false;
    clear_has_well_known();
  }
}
inline bool StringRules::_internal_ipv6_with_prefixlen() const {
  if (_internal_has_ipv6_with_prefixlen()) {
    return well_known_.ipv6_with_prefixlen_;
  }
  return false;
}
inline void StringRules::_internal_set_ipv6_with_prefixlen(bool value) {
  if (!_internal_has_ipv6_with_prefixlen()) {
    clear_well_known();
    set_has_ipv6_with_prefixlen();
  }
  well_known_.ipv6_with_prefixlen_ = value;
}
inline bool StringRules::ipv6_with_prefixlen() const {
  // @@protoc_insertion_point(field_get:buf.validate.StringRules.ipv6_with_prefixlen)
  return _internal_ipv6_with_prefixlen();
}
inline void StringRules::set_ipv6_with_prefixlen(bool value) {
  _internal_set_ipv6_with_prefixlen(value);
  // @@protoc_insertion_point(field_set:buf.validate.StringRules.ipv6_with_prefixlen)
}

// bool ip_prefix = 29[json_name = "ipPrefix", (.buf.validate.predefined) = {
inline bool StringRules::_internal_has_ip_prefix() const {
  return well_known_case() == kIpPrefix;
}
inline bool StringRules::has_ip_prefix() const {
  return _internal_has_ip_prefix();
}
inline void StringRules::set_has_ip_prefix() {
  _oneof_case_[0] = kIpPrefix;
}
inline void StringRules::clear_ip_prefix() {
  if (_internal_has_ip_prefix()) {
    well_known_.ip_prefix_ = false;
    clear_has_well_known();
  }
}
inline bool StringRules::_internal_ip_prefix() const {
  if (_internal_has_ip_prefix()) {
    return well_known_.ip_prefix_;
  }
  return false;
}
inline void StringRules::_internal_set_ip_prefix(bool value) {
  if (!_internal_has_ip_prefix()) {
    clear_well_known();
    set_has_ip_prefix();
  }
  well_known_.ip_prefix_ = value;
}
inline bool StringRules::ip_prefix() const {
  // @@protoc_insertion_point(field_get:buf.validate.StringRules.ip_prefix)
  return _internal_ip_prefix();
}
inline void StringRules::set_ip_prefix(bool value) {
  _internal_set_ip_prefix(value);
  // @@protoc_insertion_point(field_set:buf.validate.StringRules.ip_prefix)
}

// bool ipv4_prefix = 30[json_name = "ipv4Prefix", (.buf.validate.predefined) = {
inline bool StringRules::_internal_has_ipv4_prefix() const {
  return well_known_case() == kIpv4Prefix;
}
inline bool StringRules::has_ipv4_prefix() const {
  return _internal_has_ipv4_prefix();
}
inline void StringRules::set_has_ipv4_prefix() {
  _oneof_case_[0] = kIpv4Prefix;
}
inline void StringRules::clear_ipv4_prefix() {
  if (_internal_has_ipv4_prefix()) {
    well_known_.ipv4_prefix_ = false;
    clear_has_well_known();
  }
}
inline bool StringRules::_internal_ipv4_prefix() const {
  if (_internal_has_ipv4_prefix()) {
    return well_known_.ipv4_prefix_;
  }
  return false;
}
inline void StringRules::_internal_set_ipv4_prefix(bool value) {
  if (!_internal_has_ipv4_prefix()) {
    clear_well_known();
    set_has_ipv4_prefix();
  }
  well_known_.ipv4_prefix_ = value;
}
inline bool StringRules::ipv4_prefix() const {
  // @@protoc_insertion_point(field_get:buf.validate.StringRules.ipv4_prefix)
  return _internal_ipv4_prefix();
}
inline void StringRules::set_ipv4_prefix(bool value) {
  _internal_set_ipv4_prefix(value);
  // @@protoc_insertion_point(field_set:buf.validate.StringRules.ipv4_prefix)
}

// bool ipv6_prefix = 31[json_name = "ipv6Prefix", (.buf.validate.predefined) = {
inline bool StringRules::_internal_has_ipv6_prefix() const {
  return well_known_case() == kIpv6Prefix;
}
inline bool StringRules::has_ipv6_prefix() const {
  return _internal_has_ipv6_prefix();
}
inline void StringRules::set_has_ipv6_prefix() {
  _oneof_case_[0] = kIpv6Prefix;
}
inline void StringRules::clear_ipv6_prefix() {
  if (_internal_has_ipv6_prefix()) {
    well_known_.ipv6_prefix_ = false;
    clear_has_well_known();
  }
}
inline bool StringRules::_internal_ipv6_prefix() const {
  if (_internal_has_ipv6_prefix()) {
    return well_known_.ipv6_prefix_;
  }
  return false;
}
inline void StringRules::_internal_set_ipv6_prefix(bool value) {
  if (!_internal_has_ipv6_prefix()) {
    clear_well_known();
    set_has_ipv6_prefix();
  }
  well_known_.ipv6_prefix_ = value;
}
inline bool StringRules::ipv6_prefix() const {
  // @@protoc_insertion_point(field_get:buf.validate.StringRules.ipv6_prefix)
  return _internal_ipv6_prefix();
}
inline void StringRules::set_ipv6_prefix(bool value) {
  _internal_set_ipv6_prefix(value);
  // @@protoc_insertion_point(field_set:buf.validate.StringRules.ipv6_prefix)
}

// bool host_and_port = 32[json_name = "hostAndPort", (.buf.validate.predefined) = {
inline bool StringRules::_internal_has_host_and_port() const {
  return well_known_case() == kHostAndPort;
}
inline bool StringRules::has_host_and_port() const {
  return _internal_has_host_and_port();
}
inline void StringRules::set_has_host_and_port() {
  _oneof_case_[0] = kHostAndPort;
}
inline void StringRules::clear_host_and_port() {
  if (_internal_has_host_and_port()) {
    well_known_.host_and_port_ = false;
    clear_has_well_known();
  }
}
inline bool StringRules::_internal_host_and_port() const {
  if (_internal_has_host_and_port()) {
    return well_known_.host_and_port_;
  }
  return false;
}
inline void StringRules::_internal_set_host_and_port(bool value) {
  if (!_internal_has_host_and_port()) {
    clear_well_known();
    set_has_host_and_port();
  }
  well_known_.host_and_port_ = value;
}
inline bool StringRules::host_and_port() const {
  // @@protoc_insertion_point(field_get:buf.validate.StringRules.host_and_port)
  return _internal_host_and_port();
}
inline void StringRules::set_host_and_port(bool value) {
  _internal_set_host_and_port(value);
  // @@protoc_insertion_point(field_set:buf.validate.StringRules.host_and_port)
}

// .buf.validate.KnownRegex well_known_regex = 24[json_name = "wellKnownRegex", (.buf.validate.predefined) = {
inline bool StringRules::_internal_has_well_known_regex() const {
  return well_known_case() == kWellKnownRegex;
}
inline bool StringRules::has_well_known_regex() const {
  return _internal_has_well_known_regex();
}
inline void StringRules::set_has_well_known_regex() {
  _oneof_case_[0] = kWellKnownRegex;
}
inline void StringRules::clear_well_known_regex() {
  if (_internal_has_well_known_regex()) {
    well_known_.well_known_regex_ = 0;
    clear_has_well_known();
  }
}
inline ::buf::validate::KnownRegex StringRules::_internal_well_known_regex() const {
  if (_internal_has_well_known_regex()) {
    return static_cast< ::buf::validate::KnownRegex >(well_known_.well_known_regex_);
  }
  return static_cast< ::buf::validate::KnownRegex >(0);
}
inline ::buf::validate::KnownRegex StringRules::well_known_regex() const {
  // @@protoc_insertion_point(field_get:buf.validate.StringRules.well_known_regex)
  return _internal_well_known_regex();
}
inline void StringRules::_internal_set_well_known_regex(::buf::validate::KnownRegex value) {
  assert(::buf::validate::KnownRegex_IsValid(value));
  if (!_internal_has_well_known_regex()) {
    clear_well_known();
    set_has_well_known_regex();
  }
  well_known_.well_known_regex_ = value;
}
inline void StringRules::set_well_known_regex(::buf::validate::KnownRegex value) {
  // @@protoc_insertion_point(field_set:buf.validate.StringRules.well_known_regex)
  _internal_set_well_known_regex(value);
}

// optional bool strict = 25[json_name = "strict"];
inline bool StringRules::_internal_has_strict() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool StringRules::has_strict() const {
  return _internal_has_strict();
}
inline void StringRules::clear_strict() {
  strict_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool StringRules::_internal_strict() const {
  return strict_;
}
inline bool StringRules::strict() const {
  // @@protoc_insertion_point(field_get:buf.validate.StringRules.strict)
  return _internal_strict();
}
inline void StringRules::_internal_set_strict(bool value) {
  _has_bits_[0] |= 0x00000400u;
  strict_ = value;
}
inline void StringRules::set_strict(bool value) {
  _internal_set_strict(value);
  // @@protoc_insertion_point(field_set:buf.validate.StringRules.strict)
}

// repeated string example = 34[json_name = "example", (.buf.validate.predefined) = {
inline int StringRules::_internal_example_size() const {
  return example_.size();
}
inline int StringRules::example_size() const {
  return _internal_example_size();
}
inline void StringRules::clear_example() {
  example_.Clear();
}
inline std::string* StringRules::add_example() {
  // @@protoc_insertion_point(field_add_mutable:buf.validate.StringRules.example)
  return _internal_add_example();
}
inline const std::string& StringRules::_internal_example(int index) const {
  return example_.Get(index);
}
inline const std::string& StringRules::example(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.StringRules.example)
  return _internal_example(index);
}
inline std::string* StringRules::mutable_example(int index) {
  // @@protoc_insertion_point(field_mutable:buf.validate.StringRules.example)
  return example_.Mutable(index);
}
inline void StringRules::set_example(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:buf.validate.StringRules.example)
  example_.Mutable(index)->assign(value);
}
inline void StringRules::set_example(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:buf.validate.StringRules.example)
  example_.Mutable(index)->assign(std::move(value));
}
inline void StringRules::set_example(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  example_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:buf.validate.StringRules.example)
}
inline void StringRules::set_example(int index, const char* value, size_t size) {
  example_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:buf.validate.StringRules.example)
}
inline std::string* StringRules::_internal_add_example() {
  return example_.Add();
}
inline void StringRules::add_example(const std::string& value) {
  example_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:buf.validate.StringRules.example)
}
inline void StringRules::add_example(std::string&& value) {
  example_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:buf.validate.StringRules.example)
}
inline void StringRules::add_example(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  example_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:buf.validate.StringRules.example)
}
inline void StringRules::add_example(const char* value, size_t size) {
  example_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:buf.validate.StringRules.example)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StringRules::example() const {
  // @@protoc_insertion_point(field_list:buf.validate.StringRules.example)
  return example_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StringRules::mutable_example() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.StringRules.example)
  return &example_;
}

inline bool StringRules::has_well_known() const {
  return well_known_case() != WELL_KNOWN_NOT_SET;
}
inline void StringRules::clear_has_well_known() {
  _oneof_case_[0] = WELL_KNOWN_NOT_SET;
}
inline StringRules::WellKnownCase StringRules::well_known_case() const {
  return StringRules::WellKnownCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// BytesRules

// optional bytes const = 1[json_name = "const", (.buf.validate.predefined) = {
inline bool BytesRules::_internal_has_const_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BytesRules::has_const_() const {
  return _internal_has_const_();
}
inline void BytesRules::clear_const_() {
  const__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BytesRules::const_() const {
  // @@protoc_insertion_point(field_get:buf.validate.BytesRules.const)
  return _internal_const_();
}
inline void BytesRules::set_const_(const std::string& value) {
  _internal_set_const_(value);
  // @@protoc_insertion_point(field_set:buf.validate.BytesRules.const)
}
inline std::string* BytesRules::mutable_const_() {
  // @@protoc_insertion_point(field_mutable:buf.validate.BytesRules.const)
  return _internal_mutable_const_();
}
inline const std::string& BytesRules::_internal_const_() const {
  return const__.Get();
}
inline void BytesRules::_internal_set_const_(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  const__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BytesRules::set_const_(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  const__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:buf.validate.BytesRules.const)
}
inline void BytesRules::set_const_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  const__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:buf.validate.BytesRules.const)
}
inline void BytesRules::set_const_(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  const__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:buf.validate.BytesRules.const)
}
inline std::string* BytesRules::_internal_mutable_const_() {
  _has_bits_[0] |= 0x00000001u;
  return const__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BytesRules::release_const_() {
  // @@protoc_insertion_point(field_release:buf.validate.BytesRules.const)
  if (!_internal_has_const_()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return const__.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BytesRules::set_allocated_const_(std::string* const_) {
  if (const_ != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  const__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), const_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:buf.validate.BytesRules.const)
}
inline std::string* BytesRules::unsafe_arena_release_const_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:buf.validate.BytesRules.const)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return const__.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BytesRules::unsafe_arena_set_allocated_const_(
    std::string* const_) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (const_ != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  const__.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      const_, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:buf.validate.BytesRules.const)
}

// optional uint64 len = 13[json_name = "len", (.buf.validate.predefined) = {
inline bool BytesRules::_internal_has_len() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool BytesRules::has_len() const {
  return _internal_has_len();
}
inline void BytesRules::clear_len() {
  len_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BytesRules::_internal_len() const {
  return len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BytesRules::len() const {
  // @@protoc_insertion_point(field_get:buf.validate.BytesRules.len)
  return _internal_len();
}
inline void BytesRules::_internal_set_len(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  len_ = value;
}
inline void BytesRules::set_len(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:buf.validate.BytesRules.len)
}

// optional uint64 min_len = 2[json_name = "minLen", (.buf.validate.predefined) = {
inline bool BytesRules::_internal_has_min_len() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool BytesRules::has_min_len() const {
  return _internal_has_min_len();
}
inline void BytesRules::clear_min_len() {
  min_len_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BytesRules::_internal_min_len() const {
  return min_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BytesRules::min_len() const {
  // @@protoc_insertion_point(field_get:buf.validate.BytesRules.min_len)
  return _internal_min_len();
}
inline void BytesRules::_internal_set_min_len(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  min_len_ = value;
}
inline void BytesRules::set_min_len(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_min_len(value);
  // @@protoc_insertion_point(field_set:buf.validate.BytesRules.min_len)
}

// optional uint64 max_len = 3[json_name = "maxLen", (.buf.validate.predefined) = {
inline bool BytesRules::_internal_has_max_len() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool BytesRules::has_max_len() const {
  return _internal_has_max_len();
}
inline void BytesRules::clear_max_len() {
  max_len_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BytesRules::_internal_max_len() const {
  return max_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BytesRules::max_len() const {
  // @@protoc_insertion_point(field_get:buf.validate.BytesRules.max_len)
  return _internal_max_len();
}
inline void BytesRules::_internal_set_max_len(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  max_len_ = value;
}
inline void BytesRules::set_max_len(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_max_len(value);
  // @@protoc_insertion_point(field_set:buf.validate.BytesRules.max_len)
}

// optional string pattern = 4[json_name = "pattern", (.buf.validate.predefined) = {
inline bool BytesRules::_internal_has_pattern() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BytesRules::has_pattern() const {
  return _internal_has_pattern();
}
inline void BytesRules::clear_pattern() {
  pattern_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BytesRules::pattern() const {
  // @@protoc_insertion_point(field_get:buf.validate.BytesRules.pattern)
  return _internal_pattern();
}
inline void BytesRules::set_pattern(const std::string& value) {
  _internal_set_pattern(value);
  // @@protoc_insertion_point(field_set:buf.validate.BytesRules.pattern)
}
inline std::string* BytesRules::mutable_pattern() {
  // @@protoc_insertion_point(field_mutable:buf.validate.BytesRules.pattern)
  return _internal_mutable_pattern();
}
inline const std::string& BytesRules::_internal_pattern() const {
  return pattern_.Get();
}
inline void BytesRules::_internal_set_pattern(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  pattern_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BytesRules::set_pattern(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  pattern_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:buf.validate.BytesRules.pattern)
}
inline void BytesRules::set_pattern(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  pattern_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:buf.validate.BytesRules.pattern)
}
inline void BytesRules::set_pattern(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  pattern_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:buf.validate.BytesRules.pattern)
}
inline std::string* BytesRules::_internal_mutable_pattern() {
  _has_bits_[0] |= 0x00000002u;
  return pattern_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BytesRules::release_pattern() {
  // @@protoc_insertion_point(field_release:buf.validate.BytesRules.pattern)
  if (!_internal_has_pattern()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return pattern_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BytesRules::set_allocated_pattern(std::string* pattern) {
  if (pattern != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pattern_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pattern,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:buf.validate.BytesRules.pattern)
}
inline std::string* BytesRules::unsafe_arena_release_pattern() {
  // @@protoc_insertion_point(field_unsafe_arena_release:buf.validate.BytesRules.pattern)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return pattern_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BytesRules::unsafe_arena_set_allocated_pattern(
    std::string* pattern) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pattern != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pattern_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pattern, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:buf.validate.BytesRules.pattern)
}

// optional bytes prefix = 5[json_name = "prefix", (.buf.validate.predefined) = {
inline bool BytesRules::_internal_has_prefix() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BytesRules::has_prefix() const {
  return _internal_has_prefix();
}
inline void BytesRules::clear_prefix() {
  prefix_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& BytesRules::prefix() const {
  // @@protoc_insertion_point(field_get:buf.validate.BytesRules.prefix)
  return _internal_prefix();
}
inline void BytesRules::set_prefix(const std::string& value) {
  _internal_set_prefix(value);
  // @@protoc_insertion_point(field_set:buf.validate.BytesRules.prefix)
}
inline std::string* BytesRules::mutable_prefix() {
  // @@protoc_insertion_point(field_mutable:buf.validate.BytesRules.prefix)
  return _internal_mutable_prefix();
}
inline const std::string& BytesRules::_internal_prefix() const {
  return prefix_.Get();
}
inline void BytesRules::_internal_set_prefix(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BytesRules::set_prefix(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  prefix_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:buf.validate.BytesRules.prefix)
}
inline void BytesRules::set_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:buf.validate.BytesRules.prefix)
}
inline void BytesRules::set_prefix(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:buf.validate.BytesRules.prefix)
}
inline std::string* BytesRules::_internal_mutable_prefix() {
  _has_bits_[0] |= 0x00000004u;
  return prefix_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BytesRules::release_prefix() {
  // @@protoc_insertion_point(field_release:buf.validate.BytesRules.prefix)
  if (!_internal_has_prefix()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return prefix_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BytesRules::set_allocated_prefix(std::string* prefix) {
  if (prefix != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  prefix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prefix,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:buf.validate.BytesRules.prefix)
}
inline std::string* BytesRules::unsafe_arena_release_prefix() {
  // @@protoc_insertion_point(field_unsafe_arena_release:buf.validate.BytesRules.prefix)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return prefix_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BytesRules::unsafe_arena_set_allocated_prefix(
    std::string* prefix) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (prefix != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  prefix_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      prefix, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:buf.validate.BytesRules.prefix)
}

// optional bytes suffix = 6[json_name = "suffix", (.buf.validate.predefined) = {
inline bool BytesRules::_internal_has_suffix() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BytesRules::has_suffix() const {
  return _internal_has_suffix();
}
inline void BytesRules::clear_suffix() {
  suffix_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& BytesRules::suffix() const {
  // @@protoc_insertion_point(field_get:buf.validate.BytesRules.suffix)
  return _internal_suffix();
}
inline void BytesRules::set_suffix(const std::string& value) {
  _internal_set_suffix(value);
  // @@protoc_insertion_point(field_set:buf.validate.BytesRules.suffix)
}
inline std::string* BytesRules::mutable_suffix() {
  // @@protoc_insertion_point(field_mutable:buf.validate.BytesRules.suffix)
  return _internal_mutable_suffix();
}
inline const std::string& BytesRules::_internal_suffix() const {
  return suffix_.Get();
}
inline void BytesRules::_internal_set_suffix(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  suffix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BytesRules::set_suffix(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  suffix_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:buf.validate.BytesRules.suffix)
}
inline void BytesRules::set_suffix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  suffix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:buf.validate.BytesRules.suffix)
}
inline void BytesRules::set_suffix(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  suffix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:buf.validate.BytesRules.suffix)
}
inline std::string* BytesRules::_internal_mutable_suffix() {
  _has_bits_[0] |= 0x00000008u;
  return suffix_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BytesRules::release_suffix() {
  // @@protoc_insertion_point(field_release:buf.validate.BytesRules.suffix)
  if (!_internal_has_suffix()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return suffix_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BytesRules::set_allocated_suffix(std::string* suffix) {
  if (suffix != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  suffix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), suffix,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:buf.validate.BytesRules.suffix)
}
inline std::string* BytesRules::unsafe_arena_release_suffix() {
  // @@protoc_insertion_point(field_unsafe_arena_release:buf.validate.BytesRules.suffix)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return suffix_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BytesRules::unsafe_arena_set_allocated_suffix(
    std::string* suffix) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (suffix != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  suffix_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      suffix, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:buf.validate.BytesRules.suffix)
}

// optional bytes contains = 7[json_name = "contains", (.buf.validate.predefined) = {
inline bool BytesRules::_internal_has_contains() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BytesRules::has_contains() const {
  return _internal_has_contains();
}
inline void BytesRules::clear_contains() {
  contains_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& BytesRules::contains() const {
  // @@protoc_insertion_point(field_get:buf.validate.BytesRules.contains)
  return _internal_contains();
}
inline void BytesRules::set_contains(const std::string& value) {
  _internal_set_contains(value);
  // @@protoc_insertion_point(field_set:buf.validate.BytesRules.contains)
}
inline std::string* BytesRules::mutable_contains() {
  // @@protoc_insertion_point(field_mutable:buf.validate.BytesRules.contains)
  return _internal_mutable_contains();
}
inline const std::string& BytesRules::_internal_contains() const {
  return contains_.Get();
}
inline void BytesRules::_internal_set_contains(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  contains_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BytesRules::set_contains(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  contains_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:buf.validate.BytesRules.contains)
}
inline void BytesRules::set_contains(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  contains_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:buf.validate.BytesRules.contains)
}
inline void BytesRules::set_contains(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  contains_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:buf.validate.BytesRules.contains)
}
inline std::string* BytesRules::_internal_mutable_contains() {
  _has_bits_[0] |= 0x00000010u;
  return contains_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BytesRules::release_contains() {
  // @@protoc_insertion_point(field_release:buf.validate.BytesRules.contains)
  if (!_internal_has_contains()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return contains_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BytesRules::set_allocated_contains(std::string* contains) {
  if (contains != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  contains_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contains,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:buf.validate.BytesRules.contains)
}
inline std::string* BytesRules::unsafe_arena_release_contains() {
  // @@protoc_insertion_point(field_unsafe_arena_release:buf.validate.BytesRules.contains)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000010u;
  return contains_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BytesRules::unsafe_arena_set_allocated_contains(
    std::string* contains) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (contains != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  contains_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      contains, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:buf.validate.BytesRules.contains)
}

// repeated bytes in = 8[json_name = "in", (.buf.validate.predefined) = {
inline int BytesRules::_internal_in_size() const {
  return in_.size();
}
inline int BytesRules::in_size() const {
  return _internal_in_size();
}
inline void BytesRules::clear_in() {
  in_.Clear();
}
inline std::string* BytesRules::add_in() {
  // @@protoc_insertion_point(field_add_mutable:buf.validate.BytesRules.in)
  return _internal_add_in();
}
inline const std::string& BytesRules::_internal_in(int index) const {
  return in_.Get(index);
}
inline const std::string& BytesRules::in(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.BytesRules.in)
  return _internal_in(index);
}
inline std::string* BytesRules::mutable_in(int index) {
  // @@protoc_insertion_point(field_mutable:buf.validate.BytesRules.in)
  return in_.Mutable(index);
}
inline void BytesRules::set_in(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:buf.validate.BytesRules.in)
  in_.Mutable(index)->assign(value);
}
inline void BytesRules::set_in(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:buf.validate.BytesRules.in)
  in_.Mutable(index)->assign(std::move(value));
}
inline void BytesRules::set_in(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  in_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:buf.validate.BytesRules.in)
}
inline void BytesRules::set_in(int index, const void* value, size_t size) {
  in_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:buf.validate.BytesRules.in)
}
inline std::string* BytesRules::_internal_add_in() {
  return in_.Add();
}
inline void BytesRules::add_in(const std::string& value) {
  in_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:buf.validate.BytesRules.in)
}
inline void BytesRules::add_in(std::string&& value) {
  in_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:buf.validate.BytesRules.in)
}
inline void BytesRules::add_in(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  in_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:buf.validate.BytesRules.in)
}
inline void BytesRules::add_in(const void* value, size_t size) {
  in_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:buf.validate.BytesRules.in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BytesRules::in() const {
  // @@protoc_insertion_point(field_list:buf.validate.BytesRules.in)
  return in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BytesRules::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.BytesRules.in)
  return &in_;
}

// repeated bytes not_in = 9[json_name = "notIn", (.buf.validate.predefined) = {
inline int BytesRules::_internal_not_in_size() const {
  return not_in_.size();
}
inline int BytesRules::not_in_size() const {
  return _internal_not_in_size();
}
inline void BytesRules::clear_not_in() {
  not_in_.Clear();
}
inline std::string* BytesRules::add_not_in() {
  // @@protoc_insertion_point(field_add_mutable:buf.validate.BytesRules.not_in)
  return _internal_add_not_in();
}
inline const std::string& BytesRules::_internal_not_in(int index) const {
  return not_in_.Get(index);
}
inline const std::string& BytesRules::not_in(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.BytesRules.not_in)
  return _internal_not_in(index);
}
inline std::string* BytesRules::mutable_not_in(int index) {
  // @@protoc_insertion_point(field_mutable:buf.validate.BytesRules.not_in)
  return not_in_.Mutable(index);
}
inline void BytesRules::set_not_in(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:buf.validate.BytesRules.not_in)
  not_in_.Mutable(index)->assign(value);
}
inline void BytesRules::set_not_in(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:buf.validate.BytesRules.not_in)
  not_in_.Mutable(index)->assign(std::move(value));
}
inline void BytesRules::set_not_in(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  not_in_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:buf.validate.BytesRules.not_in)
}
inline void BytesRules::set_not_in(int index, const void* value, size_t size) {
  not_in_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:buf.validate.BytesRules.not_in)
}
inline std::string* BytesRules::_internal_add_not_in() {
  return not_in_.Add();
}
inline void BytesRules::add_not_in(const std::string& value) {
  not_in_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:buf.validate.BytesRules.not_in)
}
inline void BytesRules::add_not_in(std::string&& value) {
  not_in_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:buf.validate.BytesRules.not_in)
}
inline void BytesRules::add_not_in(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  not_in_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:buf.validate.BytesRules.not_in)
}
inline void BytesRules::add_not_in(const void* value, size_t size) {
  not_in_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:buf.validate.BytesRules.not_in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BytesRules::not_in() const {
  // @@protoc_insertion_point(field_list:buf.validate.BytesRules.not_in)
  return not_in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BytesRules::mutable_not_in() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.BytesRules.not_in)
  return &not_in_;
}

// bool ip = 10[json_name = "ip", (.buf.validate.predefined) = {
inline bool BytesRules::_internal_has_ip() const {
  return well_known_case() == kIp;
}
inline bool BytesRules::has_ip() const {
  return _internal_has_ip();
}
inline void BytesRules::set_has_ip() {
  _oneof_case_[0] = kIp;
}
inline void BytesRules::clear_ip() {
  if (_internal_has_ip()) {
    well_known_.ip_ = false;
    clear_has_well_known();
  }
}
inline bool BytesRules::_internal_ip() const {
  if (_internal_has_ip()) {
    return well_known_.ip_;
  }
  return false;
}
inline void BytesRules::_internal_set_ip(bool value) {
  if (!_internal_has_ip()) {
    clear_well_known();
    set_has_ip();
  }
  well_known_.ip_ = value;
}
inline bool BytesRules::ip() const {
  // @@protoc_insertion_point(field_get:buf.validate.BytesRules.ip)
  return _internal_ip();
}
inline void BytesRules::set_ip(bool value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:buf.validate.BytesRules.ip)
}

// bool ipv4 = 11[json_name = "ipv4", (.buf.validate.predefined) = {
inline bool BytesRules::_internal_has_ipv4() const {
  return well_known_case() == kIpv4;
}
inline bool BytesRules::has_ipv4() const {
  return _internal_has_ipv4();
}
inline void BytesRules::set_has_ipv4() {
  _oneof_case_[0] = kIpv4;
}
inline void BytesRules::clear_ipv4() {
  if (_internal_has_ipv4()) {
    well_known_.ipv4_ = false;
    clear_has_well_known();
  }
}
inline bool BytesRules::_internal_ipv4() const {
  if (_internal_has_ipv4()) {
    return well_known_.ipv4_;
  }
  return false;
}
inline void BytesRules::_internal_set_ipv4(bool value) {
  if (!_internal_has_ipv4()) {
    clear_well_known();
    set_has_ipv4();
  }
  well_known_.ipv4_ = value;
}
inline bool BytesRules::ipv4() const {
  // @@protoc_insertion_point(field_get:buf.validate.BytesRules.ipv4)
  return _internal_ipv4();
}
inline void BytesRules::set_ipv4(bool value) {
  _internal_set_ipv4(value);
  // @@protoc_insertion_point(field_set:buf.validate.BytesRules.ipv4)
}

// bool ipv6 = 12[json_name = "ipv6", (.buf.validate.predefined) = {
inline bool BytesRules::_internal_has_ipv6() const {
  return well_known_case() == kIpv6;
}
inline bool BytesRules::has_ipv6() const {
  return _internal_has_ipv6();
}
inline void BytesRules::set_has_ipv6() {
  _oneof_case_[0] = kIpv6;
}
inline void BytesRules::clear_ipv6() {
  if (_internal_has_ipv6()) {
    well_known_.ipv6_ = false;
    clear_has_well_known();
  }
}
inline bool BytesRules::_internal_ipv6() const {
  if (_internal_has_ipv6()) {
    return well_known_.ipv6_;
  }
  return false;
}
inline void BytesRules::_internal_set_ipv6(bool value) {
  if (!_internal_has_ipv6()) {
    clear_well_known();
    set_has_ipv6();
  }
  well_known_.ipv6_ = value;
}
inline bool BytesRules::ipv6() const {
  // @@protoc_insertion_point(field_get:buf.validate.BytesRules.ipv6)
  return _internal_ipv6();
}
inline void BytesRules::set_ipv6(bool value) {
  _internal_set_ipv6(value);
  // @@protoc_insertion_point(field_set:buf.validate.BytesRules.ipv6)
}

// repeated bytes example = 14[json_name = "example", (.buf.validate.predefined) = {
inline int BytesRules::_internal_example_size() const {
  return example_.size();
}
inline int BytesRules::example_size() const {
  return _internal_example_size();
}
inline void BytesRules::clear_example() {
  example_.Clear();
}
inline std::string* BytesRules::add_example() {
  // @@protoc_insertion_point(field_add_mutable:buf.validate.BytesRules.example)
  return _internal_add_example();
}
inline const std::string& BytesRules::_internal_example(int index) const {
  return example_.Get(index);
}
inline const std::string& BytesRules::example(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.BytesRules.example)
  return _internal_example(index);
}
inline std::string* BytesRules::mutable_example(int index) {
  // @@protoc_insertion_point(field_mutable:buf.validate.BytesRules.example)
  return example_.Mutable(index);
}
inline void BytesRules::set_example(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:buf.validate.BytesRules.example)
  example_.Mutable(index)->assign(value);
}
inline void BytesRules::set_example(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:buf.validate.BytesRules.example)
  example_.Mutable(index)->assign(std::move(value));
}
inline void BytesRules::set_example(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  example_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:buf.validate.BytesRules.example)
}
inline void BytesRules::set_example(int index, const void* value, size_t size) {
  example_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:buf.validate.BytesRules.example)
}
inline std::string* BytesRules::_internal_add_example() {
  return example_.Add();
}
inline void BytesRules::add_example(const std::string& value) {
  example_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:buf.validate.BytesRules.example)
}
inline void BytesRules::add_example(std::string&& value) {
  example_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:buf.validate.BytesRules.example)
}
inline void BytesRules::add_example(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  example_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:buf.validate.BytesRules.example)
}
inline void BytesRules::add_example(const void* value, size_t size) {
  example_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:buf.validate.BytesRules.example)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BytesRules::example() const {
  // @@protoc_insertion_point(field_list:buf.validate.BytesRules.example)
  return example_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BytesRules::mutable_example() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.BytesRules.example)
  return &example_;
}

inline bool BytesRules::has_well_known() const {
  return well_known_case() != WELL_KNOWN_NOT_SET;
}
inline void BytesRules::clear_has_well_known() {
  _oneof_case_[0] = WELL_KNOWN_NOT_SET;
}
inline BytesRules::WellKnownCase BytesRules::well_known_case() const {
  return BytesRules::WellKnownCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// EnumRules

// optional int32 const = 1[json_name = "const", (.buf.validate.predefined) = {
inline bool EnumRules::_internal_has_const_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EnumRules::has_const_() const {
  return _internal_has_const_();
}
inline void EnumRules::clear_const_() {
  const__ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnumRules::_internal_const_() const {
  return const__;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnumRules::const_() const {
  // @@protoc_insertion_point(field_get:buf.validate.EnumRules.const)
  return _internal_const_();
}
inline void EnumRules::_internal_set_const_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  const__ = value;
}
inline void EnumRules::set_const_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_const_(value);
  // @@protoc_insertion_point(field_set:buf.validate.EnumRules.const)
}

// optional bool defined_only = 2[json_name = "definedOnly"];
inline bool EnumRules::_internal_has_defined_only() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EnumRules::has_defined_only() const {
  return _internal_has_defined_only();
}
inline void EnumRules::clear_defined_only() {
  defined_only_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool EnumRules::_internal_defined_only() const {
  return defined_only_;
}
inline bool EnumRules::defined_only() const {
  // @@protoc_insertion_point(field_get:buf.validate.EnumRules.defined_only)
  return _internal_defined_only();
}
inline void EnumRules::_internal_set_defined_only(bool value) {
  _has_bits_[0] |= 0x00000002u;
  defined_only_ = value;
}
inline void EnumRules::set_defined_only(bool value) {
  _internal_set_defined_only(value);
  // @@protoc_insertion_point(field_set:buf.validate.EnumRules.defined_only)
}

// repeated int32 in = 3[json_name = "in", (.buf.validate.predefined) = {
inline int EnumRules::_internal_in_size() const {
  return in_.size();
}
inline int EnumRules::in_size() const {
  return _internal_in_size();
}
inline void EnumRules::clear_in() {
  in_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnumRules::_internal_in(int index) const {
  return in_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnumRules::in(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.EnumRules.in)
  return _internal_in(index);
}
inline void EnumRules::set_in(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  in_.Set(index, value);
  // @@protoc_insertion_point(field_set:buf.validate.EnumRules.in)
}
inline void EnumRules::_internal_add_in(::PROTOBUF_NAMESPACE_ID::int32 value) {
  in_.Add(value);
}
inline void EnumRules::add_in(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_in(value);
  // @@protoc_insertion_point(field_add:buf.validate.EnumRules.in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
EnumRules::_internal_in() const {
  return in_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
EnumRules::in() const {
  // @@protoc_insertion_point(field_list:buf.validate.EnumRules.in)
  return _internal_in();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
EnumRules::_internal_mutable_in() {
  return &in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
EnumRules::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.EnumRules.in)
  return _internal_mutable_in();
}

// repeated int32 not_in = 4[json_name = "notIn", (.buf.validate.predefined) = {
inline int EnumRules::_internal_not_in_size() const {
  return not_in_.size();
}
inline int EnumRules::not_in_size() const {
  return _internal_not_in_size();
}
inline void EnumRules::clear_not_in() {
  not_in_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnumRules::_internal_not_in(int index) const {
  return not_in_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnumRules::not_in(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.EnumRules.not_in)
  return _internal_not_in(index);
}
inline void EnumRules::set_not_in(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  not_in_.Set(index, value);
  // @@protoc_insertion_point(field_set:buf.validate.EnumRules.not_in)
}
inline void EnumRules::_internal_add_not_in(::PROTOBUF_NAMESPACE_ID::int32 value) {
  not_in_.Add(value);
}
inline void EnumRules::add_not_in(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_not_in(value);
  // @@protoc_insertion_point(field_add:buf.validate.EnumRules.not_in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
EnumRules::_internal_not_in() const {
  return not_in_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
EnumRules::not_in() const {
  // @@protoc_insertion_point(field_list:buf.validate.EnumRules.not_in)
  return _internal_not_in();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
EnumRules::_internal_mutable_not_in() {
  return &not_in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
EnumRules::mutable_not_in() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.EnumRules.not_in)
  return _internal_mutable_not_in();
}

// repeated int32 example = 5[json_name = "example", (.buf.validate.predefined) = {
inline int EnumRules::_internal_example_size() const {
  return example_.size();
}
inline int EnumRules::example_size() const {
  return _internal_example_size();
}
inline void EnumRules::clear_example() {
  example_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnumRules::_internal_example(int index) const {
  return example_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnumRules::example(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.EnumRules.example)
  return _internal_example(index);
}
inline void EnumRules::set_example(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  example_.Set(index, value);
  // @@protoc_insertion_point(field_set:buf.validate.EnumRules.example)
}
inline void EnumRules::_internal_add_example(::PROTOBUF_NAMESPACE_ID::int32 value) {
  example_.Add(value);
}
inline void EnumRules::add_example(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_example(value);
  // @@protoc_insertion_point(field_add:buf.validate.EnumRules.example)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
EnumRules::_internal_example() const {
  return example_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
EnumRules::example() const {
  // @@protoc_insertion_point(field_list:buf.validate.EnumRules.example)
  return _internal_example();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
EnumRules::_internal_mutable_example() {
  return &example_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
EnumRules::mutable_example() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.EnumRules.example)
  return _internal_mutable_example();
}

// -------------------------------------------------------------------

// RepeatedRules

// optional uint64 min_items = 1[json_name = "minItems", (.buf.validate.predefined) = {
inline bool RepeatedRules::_internal_has_min_items() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RepeatedRules::has_min_items() const {
  return _internal_has_min_items();
}
inline void RepeatedRules::clear_min_items() {
  min_items_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RepeatedRules::_internal_min_items() const {
  return min_items_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RepeatedRules::min_items() const {
  // @@protoc_insertion_point(field_get:buf.validate.RepeatedRules.min_items)
  return _internal_min_items();
}
inline void RepeatedRules::_internal_set_min_items(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  min_items_ = value;
}
inline void RepeatedRules::set_min_items(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_min_items(value);
  // @@protoc_insertion_point(field_set:buf.validate.RepeatedRules.min_items)
}

// optional uint64 max_items = 2[json_name = "maxItems", (.buf.validate.predefined) = {
inline bool RepeatedRules::_internal_has_max_items() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RepeatedRules::has_max_items() const {
  return _internal_has_max_items();
}
inline void RepeatedRules::clear_max_items() {
  max_items_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RepeatedRules::_internal_max_items() const {
  return max_items_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RepeatedRules::max_items() const {
  // @@protoc_insertion_point(field_get:buf.validate.RepeatedRules.max_items)
  return _internal_max_items();
}
inline void RepeatedRules::_internal_set_max_items(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  max_items_ = value;
}
inline void RepeatedRules::set_max_items(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_max_items(value);
  // @@protoc_insertion_point(field_set:buf.validate.RepeatedRules.max_items)
}

// optional bool unique = 3[json_name = "unique", (.buf.validate.predefined) = {
inline bool RepeatedRules::_internal_has_unique() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RepeatedRules::has_unique() const {
  return _internal_has_unique();
}
inline void RepeatedRules::clear_unique() {
  unique_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool RepeatedRules::_internal_unique() const {
  return unique_;
}
inline bool RepeatedRules::unique() const {
  // @@protoc_insertion_point(field_get:buf.validate.RepeatedRules.unique)
  return _internal_unique();
}
inline void RepeatedRules::_internal_set_unique(bool value) {
  _has_bits_[0] |= 0x00000008u;
  unique_ = value;
}
inline void RepeatedRules::set_unique(bool value) {
  _internal_set_unique(value);
  // @@protoc_insertion_point(field_set:buf.validate.RepeatedRules.unique)
}

// optional .buf.validate.FieldRules items = 4[json_name = "items"];
inline bool RepeatedRules::_internal_has_items() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || items_ != nullptr);
  return value;
}
inline bool RepeatedRules::has_items() const {
  return _internal_has_items();
}
inline void RepeatedRules::clear_items() {
  if (items_ != nullptr) items_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::buf::validate::FieldRules& RepeatedRules::_internal_items() const {
  const ::buf::validate::FieldRules* p = items_;
  return p != nullptr ? *p : *reinterpret_cast<const ::buf::validate::FieldRules*>(
      &::buf::validate::_FieldRules_default_instance_);
}
inline const ::buf::validate::FieldRules& RepeatedRules::items() const {
  // @@protoc_insertion_point(field_get:buf.validate.RepeatedRules.items)
  return _internal_items();
}
inline void RepeatedRules::unsafe_arena_set_allocated_items(
    ::buf::validate::FieldRules* items) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(items_);
  }
  items_ = items;
  if (items) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:buf.validate.RepeatedRules.items)
}
inline ::buf::validate::FieldRules* RepeatedRules::release_items() {
  auto temp = unsafe_arena_release_items();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::buf::validate::FieldRules* RepeatedRules::unsafe_arena_release_items() {
  // @@protoc_insertion_point(field_release:buf.validate.RepeatedRules.items)
  _has_bits_[0] &= ~0x00000001u;
  ::buf::validate::FieldRules* temp = items_;
  items_ = nullptr;
  return temp;
}
inline ::buf::validate::FieldRules* RepeatedRules::_internal_mutable_items() {
  _has_bits_[0] |= 0x00000001u;
  if (items_ == nullptr) {
    auto* p = CreateMaybeMessage<::buf::validate::FieldRules>(GetArena());
    items_ = p;
  }
  return items_;
}
inline ::buf::validate::FieldRules* RepeatedRules::mutable_items() {
  // @@protoc_insertion_point(field_mutable:buf.validate.RepeatedRules.items)
  return _internal_mutable_items();
}
inline void RepeatedRules::set_allocated_items(::buf::validate::FieldRules* items) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete items_;
  }
  if (items) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(items);
    if (message_arena != submessage_arena) {
      items = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, items, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  items_ = items;
  // @@protoc_insertion_point(field_set_allocated:buf.validate.RepeatedRules.items)
}

// -------------------------------------------------------------------

// MapRules

// optional uint64 min_pairs = 1[json_name = "minPairs", (.buf.validate.predefined) = {
inline bool MapRules::_internal_has_min_pairs() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MapRules::has_min_pairs() const {
  return _internal_has_min_pairs();
}
inline void MapRules::clear_min_pairs() {
  min_pairs_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MapRules::_internal_min_pairs() const {
  return min_pairs_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MapRules::min_pairs() const {
  // @@protoc_insertion_point(field_get:buf.validate.MapRules.min_pairs)
  return _internal_min_pairs();
}
inline void MapRules::_internal_set_min_pairs(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  min_pairs_ = value;
}
inline void MapRules::set_min_pairs(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_min_pairs(value);
  // @@protoc_insertion_point(field_set:buf.validate.MapRules.min_pairs)
}

// optional uint64 max_pairs = 2[json_name = "maxPairs", (.buf.validate.predefined) = {
inline bool MapRules::_internal_has_max_pairs() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MapRules::has_max_pairs() const {
  return _internal_has_max_pairs();
}
inline void MapRules::clear_max_pairs() {
  max_pairs_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MapRules::_internal_max_pairs() const {
  return max_pairs_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MapRules::max_pairs() const {
  // @@protoc_insertion_point(field_get:buf.validate.MapRules.max_pairs)
  return _internal_max_pairs();
}
inline void MapRules::_internal_set_max_pairs(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  max_pairs_ = value;
}
inline void MapRules::set_max_pairs(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_max_pairs(value);
  // @@protoc_insertion_point(field_set:buf.validate.MapRules.max_pairs)
}

// optional .buf.validate.FieldRules keys = 4[json_name = "keys"];
inline bool MapRules::_internal_has_keys() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || keys_ != nullptr);
  return value;
}
inline bool MapRules::has_keys() const {
  return _internal_has_keys();
}
inline void MapRules::clear_keys() {
  if (keys_ != nullptr) keys_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::buf::validate::FieldRules& MapRules::_internal_keys() const {
  const ::buf::validate::FieldRules* p = keys_;
  return p != nullptr ? *p : *reinterpret_cast<const ::buf::validate::FieldRules*>(
      &::buf::validate::_FieldRules_default_instance_);
}
inline const ::buf::validate::FieldRules& MapRules::keys() const {
  // @@protoc_insertion_point(field_get:buf.validate.MapRules.keys)
  return _internal_keys();
}
inline void MapRules::unsafe_arena_set_allocated_keys(
    ::buf::validate::FieldRules* keys) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(keys_);
  }
  keys_ = keys;
  if (keys) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:buf.validate.MapRules.keys)
}
inline ::buf::validate::FieldRules* MapRules::release_keys() {
  auto temp = unsafe_arena_release_keys();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::buf::validate::FieldRules* MapRules::unsafe_arena_release_keys() {
  // @@protoc_insertion_point(field_release:buf.validate.MapRules.keys)
  _has_bits_[0] &= ~0x00000001u;
  ::buf::validate::FieldRules* temp = keys_;
  keys_ = nullptr;
  return temp;
}
inline ::buf::validate::FieldRules* MapRules::_internal_mutable_keys() {
  _has_bits_[0] |= 0x00000001u;
  if (keys_ == nullptr) {
    auto* p = CreateMaybeMessage<::buf::validate::FieldRules>(GetArena());
    keys_ = p;
  }
  return keys_;
}
inline ::buf::validate::FieldRules* MapRules::mutable_keys() {
  // @@protoc_insertion_point(field_mutable:buf.validate.MapRules.keys)
  return _internal_mutable_keys();
}
inline void MapRules::set_allocated_keys(::buf::validate::FieldRules* keys) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete keys_;
  }
  if (keys) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(keys);
    if (message_arena != submessage_arena) {
      keys = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, keys, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  keys_ = keys;
  // @@protoc_insertion_point(field_set_allocated:buf.validate.MapRules.keys)
}

// optional .buf.validate.FieldRules values = 5[json_name = "values"];
inline bool MapRules::_internal_has_values() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || values_ != nullptr);
  return value;
}
inline bool MapRules::has_values() const {
  return _internal_has_values();
}
inline void MapRules::clear_values() {
  if (values_ != nullptr) values_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::buf::validate::FieldRules& MapRules::_internal_values() const {
  const ::buf::validate::FieldRules* p = values_;
  return p != nullptr ? *p : *reinterpret_cast<const ::buf::validate::FieldRules*>(
      &::buf::validate::_FieldRules_default_instance_);
}
inline const ::buf::validate::FieldRules& MapRules::values() const {
  // @@protoc_insertion_point(field_get:buf.validate.MapRules.values)
  return _internal_values();
}
inline void MapRules::unsafe_arena_set_allocated_values(
    ::buf::validate::FieldRules* values) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(values_);
  }
  values_ = values;
  if (values) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:buf.validate.MapRules.values)
}
inline ::buf::validate::FieldRules* MapRules::release_values() {
  auto temp = unsafe_arena_release_values();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::buf::validate::FieldRules* MapRules::unsafe_arena_release_values() {
  // @@protoc_insertion_point(field_release:buf.validate.MapRules.values)
  _has_bits_[0] &= ~0x00000002u;
  ::buf::validate::FieldRules* temp = values_;
  values_ = nullptr;
  return temp;
}
inline ::buf::validate::FieldRules* MapRules::_internal_mutable_values() {
  _has_bits_[0] |= 0x00000002u;
  if (values_ == nullptr) {
    auto* p = CreateMaybeMessage<::buf::validate::FieldRules>(GetArena());
    values_ = p;
  }
  return values_;
}
inline ::buf::validate::FieldRules* MapRules::mutable_values() {
  // @@protoc_insertion_point(field_mutable:buf.validate.MapRules.values)
  return _internal_mutable_values();
}
inline void MapRules::set_allocated_values(::buf::validate::FieldRules* values) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete values_;
  }
  if (values) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(values);
    if (message_arena != submessage_arena) {
      values = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, values, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  values_ = values;
  // @@protoc_insertion_point(field_set_allocated:buf.validate.MapRules.values)
}

// -------------------------------------------------------------------

// AnyRules

// repeated string in = 2[json_name = "in"];
inline int AnyRules::_internal_in_size() const {
  return in_.size();
}
inline int AnyRules::in_size() const {
  return _internal_in_size();
}
inline void AnyRules::clear_in() {
  in_.Clear();
}
inline std::string* AnyRules::add_in() {
  // @@protoc_insertion_point(field_add_mutable:buf.validate.AnyRules.in)
  return _internal_add_in();
}
inline const std::string& AnyRules::_internal_in(int index) const {
  return in_.Get(index);
}
inline const std::string& AnyRules::in(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.AnyRules.in)
  return _internal_in(index);
}
inline std::string* AnyRules::mutable_in(int index) {
  // @@protoc_insertion_point(field_mutable:buf.validate.AnyRules.in)
  return in_.Mutable(index);
}
inline void AnyRules::set_in(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:buf.validate.AnyRules.in)
  in_.Mutable(index)->assign(value);
}
inline void AnyRules::set_in(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:buf.validate.AnyRules.in)
  in_.Mutable(index)->assign(std::move(value));
}
inline void AnyRules::set_in(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  in_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:buf.validate.AnyRules.in)
}
inline void AnyRules::set_in(int index, const char* value, size_t size) {
  in_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:buf.validate.AnyRules.in)
}
inline std::string* AnyRules::_internal_add_in() {
  return in_.Add();
}
inline void AnyRules::add_in(const std::string& value) {
  in_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:buf.validate.AnyRules.in)
}
inline void AnyRules::add_in(std::string&& value) {
  in_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:buf.validate.AnyRules.in)
}
inline void AnyRules::add_in(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  in_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:buf.validate.AnyRules.in)
}
inline void AnyRules::add_in(const char* value, size_t size) {
  in_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:buf.validate.AnyRules.in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AnyRules::in() const {
  // @@protoc_insertion_point(field_list:buf.validate.AnyRules.in)
  return in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AnyRules::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.AnyRules.in)
  return &in_;
}

// repeated string not_in = 3[json_name = "notIn"];
inline int AnyRules::_internal_not_in_size() const {
  return not_in_.size();
}
inline int AnyRules::not_in_size() const {
  return _internal_not_in_size();
}
inline void AnyRules::clear_not_in() {
  not_in_.Clear();
}
inline std::string* AnyRules::add_not_in() {
  // @@protoc_insertion_point(field_add_mutable:buf.validate.AnyRules.not_in)
  return _internal_add_not_in();
}
inline const std::string& AnyRules::_internal_not_in(int index) const {
  return not_in_.Get(index);
}
inline const std::string& AnyRules::not_in(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.AnyRules.not_in)
  return _internal_not_in(index);
}
inline std::string* AnyRules::mutable_not_in(int index) {
  // @@protoc_insertion_point(field_mutable:buf.validate.AnyRules.not_in)
  return not_in_.Mutable(index);
}
inline void AnyRules::set_not_in(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:buf.validate.AnyRules.not_in)
  not_in_.Mutable(index)->assign(value);
}
inline void AnyRules::set_not_in(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:buf.validate.AnyRules.not_in)
  not_in_.Mutable(index)->assign(std::move(value));
}
inline void AnyRules::set_not_in(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  not_in_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:buf.validate.AnyRules.not_in)
}
inline void AnyRules::set_not_in(int index, const char* value, size_t size) {
  not_in_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:buf.validate.AnyRules.not_in)
}
inline std::string* AnyRules::_internal_add_not_in() {
  return not_in_.Add();
}
inline void AnyRules::add_not_in(const std::string& value) {
  not_in_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:buf.validate.AnyRules.not_in)
}
inline void AnyRules::add_not_in(std::string&& value) {
  not_in_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:buf.validate.AnyRules.not_in)
}
inline void AnyRules::add_not_in(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  not_in_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:buf.validate.AnyRules.not_in)
}
inline void AnyRules::add_not_in(const char* value, size_t size) {
  not_in_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:buf.validate.AnyRules.not_in)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AnyRules::not_in() const {
  // @@protoc_insertion_point(field_list:buf.validate.AnyRules.not_in)
  return not_in_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AnyRules::mutable_not_in() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.AnyRules.not_in)
  return &not_in_;
}

// -------------------------------------------------------------------

// DurationRules

// optional .google.protobuf.Duration const = 2[json_name = "const", (.buf.validate.predefined) = {
inline bool DurationRules::_internal_has_const_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || const__ != nullptr);
  return value;
}
inline bool DurationRules::has_const_() const {
  return _internal_has_const_();
}
inline const PROTOBUF_NAMESPACE_ID::Duration& DurationRules::_internal_const_() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = const__;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration*>(
      &PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& DurationRules::const_() const {
  // @@protoc_insertion_point(field_get:buf.validate.DurationRules.const)
  return _internal_const_();
}
inline void DurationRules::unsafe_arena_set_allocated_const_(
    PROTOBUF_NAMESPACE_ID::Duration* const_) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(const__);
  }
  const__ = const_;
  if (const_) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:buf.validate.DurationRules.const)
}
inline PROTOBUF_NAMESPACE_ID::Duration* DurationRules::release_const_() {
  auto temp = unsafe_arena_release_const_();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* DurationRules::unsafe_arena_release_const_() {
  // @@protoc_insertion_point(field_release:buf.validate.DurationRules.const)
  _has_bits_[0] &= ~0x00000001u;
  PROTOBUF_NAMESPACE_ID::Duration* temp = const__;
  const__ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* DurationRules::_internal_mutable_const_() {
  _has_bits_[0] |= 0x00000001u;
  if (const__ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArena());
    const__ = p;
  }
  return const__;
}
inline PROTOBUF_NAMESPACE_ID::Duration* DurationRules::mutable_const_() {
  // @@protoc_insertion_point(field_mutable:buf.validate.DurationRules.const)
  return _internal_mutable_const_();
}
inline void DurationRules::set_allocated_const_(PROTOBUF_NAMESPACE_ID::Duration* const_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(const__);
  }
  if (const_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(const_)->GetArena();
    if (message_arena != submessage_arena) {
      const_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, const_, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  const__ = const_;
  // @@protoc_insertion_point(field_set_allocated:buf.validate.DurationRules.const)
}

// .google.protobuf.Duration lt = 3[json_name = "lt", (.buf.validate.predefined) = {
inline bool DurationRules::_internal_has_lt() const {
  return less_than_case() == kLt;
}
inline bool DurationRules::has_lt() const {
  return _internal_has_lt();
}
inline void DurationRules::set_has_lt() {
  _oneof_case_[0] = kLt;
}
inline PROTOBUF_NAMESPACE_ID::Duration* DurationRules::release_lt() {
  // @@protoc_insertion_point(field_release:buf.validate.DurationRules.lt)
  if (_internal_has_lt()) {
    clear_has_less_than();
      PROTOBUF_NAMESPACE_ID::Duration* temp = less_than_.lt_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    less_than_.lt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Duration& DurationRules::_internal_lt() const {
  return _internal_has_lt()
      ? *less_than_.lt_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Duration*>(&PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& DurationRules::lt() const {
  // @@protoc_insertion_point(field_get:buf.validate.DurationRules.lt)
  return _internal_lt();
}
inline PROTOBUF_NAMESPACE_ID::Duration* DurationRules::unsafe_arena_release_lt() {
  // @@protoc_insertion_point(field_unsafe_arena_release:buf.validate.DurationRules.lt)
  if (_internal_has_lt()) {
    clear_has_less_than();
    PROTOBUF_NAMESPACE_ID::Duration* temp = less_than_.lt_;
    less_than_.lt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DurationRules::unsafe_arena_set_allocated_lt(PROTOBUF_NAMESPACE_ID::Duration* lt) {
  clear_less_than();
  if (lt) {
    set_has_lt();
    less_than_.lt_ = lt;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:buf.validate.DurationRules.lt)
}
inline PROTOBUF_NAMESPACE_ID::Duration* DurationRules::_internal_mutable_lt() {
  if (!_internal_has_lt()) {
    clear_less_than();
    set_has_lt();
    less_than_.lt_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Duration >(GetArena());
  }
  return less_than_.lt_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* DurationRules::mutable_lt() {
  // @@protoc_insertion_point(field_mutable:buf.validate.DurationRules.lt)
  return _internal_mutable_lt();
}

// .google.protobuf.Duration lte = 4[json_name = "lte", (.buf.validate.predefined) = {
inline bool DurationRules::_internal_has_lte() const {
  return less_than_case() == kLte;
}
inline bool DurationRules::has_lte() const {
  return _internal_has_lte();
}
inline void DurationRules::set_has_lte() {
  _oneof_case_[0] = kLte;
}
inline PROTOBUF_NAMESPACE_ID::Duration* DurationRules::release_lte() {
  // @@protoc_insertion_point(field_release:buf.validate.DurationRules.lte)
  if (_internal_has_lte()) {
    clear_has_less_than();
      PROTOBUF_NAMESPACE_ID::Duration* temp = less_than_.lte_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    less_than_.lte_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Duration& DurationRules::_internal_lte() const {
  return _internal_has_lte()
      ? *less_than_.lte_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Duration*>(&PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& DurationRules::lte() const {
  // @@protoc_insertion_point(field_get:buf.validate.DurationRules.lte)
  return _internal_lte();
}
inline PROTOBUF_NAMESPACE_ID::Duration* DurationRules::unsafe_arena_release_lte() {
  // @@protoc_insertion_point(field_unsafe_arena_release:buf.validate.DurationRules.lte)
  if (_internal_has_lte()) {
    clear_has_less_than();
    PROTOBUF_NAMESPACE_ID::Duration* temp = less_than_.lte_;
    less_than_.lte_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DurationRules::unsafe_arena_set_allocated_lte(PROTOBUF_NAMESPACE_ID::Duration* lte) {
  clear_less_than();
  if (lte) {
    set_has_lte();
    less_than_.lte_ = lte;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:buf.validate.DurationRules.lte)
}
inline PROTOBUF_NAMESPACE_ID::Duration* DurationRules::_internal_mutable_lte() {
  if (!_internal_has_lte()) {
    clear_less_than();
    set_has_lte();
    less_than_.lte_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Duration >(GetArena());
  }
  return less_than_.lte_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* DurationRules::mutable_lte() {
  // @@protoc_insertion_point(field_mutable:buf.validate.DurationRules.lte)
  return _internal_mutable_lte();
}

// .google.protobuf.Duration gt = 5[json_name = "gt", (.buf.validate.predefined) = {
inline bool DurationRules::_internal_has_gt() const {
  return greater_than_case() == kGt;
}
inline bool DurationRules::has_gt() const {
  return _internal_has_gt();
}
inline void DurationRules::set_has_gt() {
  _oneof_case_[1] = kGt;
}
inline PROTOBUF_NAMESPACE_ID::Duration* DurationRules::release_gt() {
  // @@protoc_insertion_point(field_release:buf.validate.DurationRules.gt)
  if (_internal_has_gt()) {
    clear_has_greater_than();
      PROTOBUF_NAMESPACE_ID::Duration* temp = greater_than_.gt_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    greater_than_.gt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Duration& DurationRules::_internal_gt() const {
  return _internal_has_gt()
      ? *greater_than_.gt_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Duration*>(&PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& DurationRules::gt() const {
  // @@protoc_insertion_point(field_get:buf.validate.DurationRules.gt)
  return _internal_gt();
}
inline PROTOBUF_NAMESPACE_ID::Duration* DurationRules::unsafe_arena_release_gt() {
  // @@protoc_insertion_point(field_unsafe_arena_release:buf.validate.DurationRules.gt)
  if (_internal_has_gt()) {
    clear_has_greater_than();
    PROTOBUF_NAMESPACE_ID::Duration* temp = greater_than_.gt_;
    greater_than_.gt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DurationRules::unsafe_arena_set_allocated_gt(PROTOBUF_NAMESPACE_ID::Duration* gt) {
  clear_greater_than();
  if (gt) {
    set_has_gt();
    greater_than_.gt_ = gt;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:buf.validate.DurationRules.gt)
}
inline PROTOBUF_NAMESPACE_ID::Duration* DurationRules::_internal_mutable_gt() {
  if (!_internal_has_gt()) {
    clear_greater_than();
    set_has_gt();
    greater_than_.gt_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Duration >(GetArena());
  }
  return greater_than_.gt_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* DurationRules::mutable_gt() {
  // @@protoc_insertion_point(field_mutable:buf.validate.DurationRules.gt)
  return _internal_mutable_gt();
}

// .google.protobuf.Duration gte = 6[json_name = "gte", (.buf.validate.predefined) = {
inline bool DurationRules::_internal_has_gte() const {
  return greater_than_case() == kGte;
}
inline bool DurationRules::has_gte() const {
  return _internal_has_gte();
}
inline void DurationRules::set_has_gte() {
  _oneof_case_[1] = kGte;
}
inline PROTOBUF_NAMESPACE_ID::Duration* DurationRules::release_gte() {
  // @@protoc_insertion_point(field_release:buf.validate.DurationRules.gte)
  if (_internal_has_gte()) {
    clear_has_greater_than();
      PROTOBUF_NAMESPACE_ID::Duration* temp = greater_than_.gte_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    greater_than_.gte_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Duration& DurationRules::_internal_gte() const {
  return _internal_has_gte()
      ? *greater_than_.gte_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Duration*>(&PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& DurationRules::gte() const {
  // @@protoc_insertion_point(field_get:buf.validate.DurationRules.gte)
  return _internal_gte();
}
inline PROTOBUF_NAMESPACE_ID::Duration* DurationRules::unsafe_arena_release_gte() {
  // @@protoc_insertion_point(field_unsafe_arena_release:buf.validate.DurationRules.gte)
  if (_internal_has_gte()) {
    clear_has_greater_than();
    PROTOBUF_NAMESPACE_ID::Duration* temp = greater_than_.gte_;
    greater_than_.gte_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DurationRules::unsafe_arena_set_allocated_gte(PROTOBUF_NAMESPACE_ID::Duration* gte) {
  clear_greater_than();
  if (gte) {
    set_has_gte();
    greater_than_.gte_ = gte;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:buf.validate.DurationRules.gte)
}
inline PROTOBUF_NAMESPACE_ID::Duration* DurationRules::_internal_mutable_gte() {
  if (!_internal_has_gte()) {
    clear_greater_than();
    set_has_gte();
    greater_than_.gte_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Duration >(GetArena());
  }
  return greater_than_.gte_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* DurationRules::mutable_gte() {
  // @@protoc_insertion_point(field_mutable:buf.validate.DurationRules.gte)
  return _internal_mutable_gte();
}

// repeated .google.protobuf.Duration in = 7[json_name = "in", (.buf.validate.predefined) = {
inline int DurationRules::_internal_in_size() const {
  return in_.size();
}
inline int DurationRules::in_size() const {
  return _internal_in_size();
}
inline PROTOBUF_NAMESPACE_ID::Duration* DurationRules::mutable_in(int index) {
  // @@protoc_insertion_point(field_mutable:buf.validate.DurationRules.in)
  return in_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Duration >*
DurationRules::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.DurationRules.in)
  return &in_;
}
inline const PROTOBUF_NAMESPACE_ID::Duration& DurationRules::_internal_in(int index) const {
  return in_.Get(index);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& DurationRules::in(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.DurationRules.in)
  return _internal_in(index);
}
inline PROTOBUF_NAMESPACE_ID::Duration* DurationRules::_internal_add_in() {
  return in_.Add();
}
inline PROTOBUF_NAMESPACE_ID::Duration* DurationRules::add_in() {
  // @@protoc_insertion_point(field_add:buf.validate.DurationRules.in)
  return _internal_add_in();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Duration >&
DurationRules::in() const {
  // @@protoc_insertion_point(field_list:buf.validate.DurationRules.in)
  return in_;
}

// repeated .google.protobuf.Duration not_in = 8[json_name = "notIn", (.buf.validate.predefined) = {
inline int DurationRules::_internal_not_in_size() const {
  return not_in_.size();
}
inline int DurationRules::not_in_size() const {
  return _internal_not_in_size();
}
inline PROTOBUF_NAMESPACE_ID::Duration* DurationRules::mutable_not_in(int index) {
  // @@protoc_insertion_point(field_mutable:buf.validate.DurationRules.not_in)
  return not_in_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Duration >*
DurationRules::mutable_not_in() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.DurationRules.not_in)
  return &not_in_;
}
inline const PROTOBUF_NAMESPACE_ID::Duration& DurationRules::_internal_not_in(int index) const {
  return not_in_.Get(index);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& DurationRules::not_in(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.DurationRules.not_in)
  return _internal_not_in(index);
}
inline PROTOBUF_NAMESPACE_ID::Duration* DurationRules::_internal_add_not_in() {
  return not_in_.Add();
}
inline PROTOBUF_NAMESPACE_ID::Duration* DurationRules::add_not_in() {
  // @@protoc_insertion_point(field_add:buf.validate.DurationRules.not_in)
  return _internal_add_not_in();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Duration >&
DurationRules::not_in() const {
  // @@protoc_insertion_point(field_list:buf.validate.DurationRules.not_in)
  return not_in_;
}

// repeated .google.protobuf.Duration example = 9[json_name = "example", (.buf.validate.predefined) = {
inline int DurationRules::_internal_example_size() const {
  return example_.size();
}
inline int DurationRules::example_size() const {
  return _internal_example_size();
}
inline PROTOBUF_NAMESPACE_ID::Duration* DurationRules::mutable_example(int index) {
  // @@protoc_insertion_point(field_mutable:buf.validate.DurationRules.example)
  return example_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Duration >*
DurationRules::mutable_example() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.DurationRules.example)
  return &example_;
}
inline const PROTOBUF_NAMESPACE_ID::Duration& DurationRules::_internal_example(int index) const {
  return example_.Get(index);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& DurationRules::example(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.DurationRules.example)
  return _internal_example(index);
}
inline PROTOBUF_NAMESPACE_ID::Duration* DurationRules::_internal_add_example() {
  return example_.Add();
}
inline PROTOBUF_NAMESPACE_ID::Duration* DurationRules::add_example() {
  // @@protoc_insertion_point(field_add:buf.validate.DurationRules.example)
  return _internal_add_example();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Duration >&
DurationRules::example() const {
  // @@protoc_insertion_point(field_list:buf.validate.DurationRules.example)
  return example_;
}

inline bool DurationRules::has_less_than() const {
  return less_than_case() != LESS_THAN_NOT_SET;
}
inline void DurationRules::clear_has_less_than() {
  _oneof_case_[0] = LESS_THAN_NOT_SET;
}
inline bool DurationRules::has_greater_than() const {
  return greater_than_case() != GREATER_THAN_NOT_SET;
}
inline void DurationRules::clear_has_greater_than() {
  _oneof_case_[1] = GREATER_THAN_NOT_SET;
}
inline DurationRules::LessThanCase DurationRules::less_than_case() const {
  return DurationRules::LessThanCase(_oneof_case_[0]);
}
inline DurationRules::GreaterThanCase DurationRules::greater_than_case() const {
  return DurationRules::GreaterThanCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// TimestampRules

// optional .google.protobuf.Timestamp const = 2[json_name = "const", (.buf.validate.predefined) = {
inline bool TimestampRules::_internal_has_const_() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || const__ != nullptr);
  return value;
}
inline bool TimestampRules::has_const_() const {
  return _internal_has_const_();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TimestampRules::_internal_const_() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = const__;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TimestampRules::const_() const {
  // @@protoc_insertion_point(field_get:buf.validate.TimestampRules.const)
  return _internal_const_();
}
inline void TimestampRules::unsafe_arena_set_allocated_const_(
    PROTOBUF_NAMESPACE_ID::Timestamp* const_) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(const__);
  }
  const__ = const_;
  if (const_) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:buf.validate.TimestampRules.const)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimestampRules::release_const_() {
  auto temp = unsafe_arena_release_const_();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimestampRules::unsafe_arena_release_const_() {
  // @@protoc_insertion_point(field_release:buf.validate.TimestampRules.const)
  _has_bits_[0] &= ~0x00000001u;
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = const__;
  const__ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimestampRules::_internal_mutable_const_() {
  _has_bits_[0] |= 0x00000001u;
  if (const__ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    const__ = p;
  }
  return const__;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimestampRules::mutable_const_() {
  // @@protoc_insertion_point(field_mutable:buf.validate.TimestampRules.const)
  return _internal_mutable_const_();
}
inline void TimestampRules::set_allocated_const_(PROTOBUF_NAMESPACE_ID::Timestamp* const_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(const__);
  }
  if (const_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(const_)->GetArena();
    if (message_arena != submessage_arena) {
      const_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, const_, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  const__ = const_;
  // @@protoc_insertion_point(field_set_allocated:buf.validate.TimestampRules.const)
}

// .google.protobuf.Timestamp lt = 3[json_name = "lt", (.buf.validate.predefined) = {
inline bool TimestampRules::_internal_has_lt() const {
  return less_than_case() == kLt;
}
inline bool TimestampRules::has_lt() const {
  return _internal_has_lt();
}
inline void TimestampRules::set_has_lt() {
  _oneof_case_[0] = kLt;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimestampRules::release_lt() {
  // @@protoc_insertion_point(field_release:buf.validate.TimestampRules.lt)
  if (_internal_has_lt()) {
    clear_has_less_than();
      PROTOBUF_NAMESPACE_ID::Timestamp* temp = less_than_.lt_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    less_than_.lt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TimestampRules::_internal_lt() const {
  return _internal_has_lt()
      ? *less_than_.lt_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(&PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TimestampRules::lt() const {
  // @@protoc_insertion_point(field_get:buf.validate.TimestampRules.lt)
  return _internal_lt();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimestampRules::unsafe_arena_release_lt() {
  // @@protoc_insertion_point(field_unsafe_arena_release:buf.validate.TimestampRules.lt)
  if (_internal_has_lt()) {
    clear_has_less_than();
    PROTOBUF_NAMESPACE_ID::Timestamp* temp = less_than_.lt_;
    less_than_.lt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TimestampRules::unsafe_arena_set_allocated_lt(PROTOBUF_NAMESPACE_ID::Timestamp* lt) {
  clear_less_than();
  if (lt) {
    set_has_lt();
    less_than_.lt_ = lt;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:buf.validate.TimestampRules.lt)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimestampRules::_internal_mutable_lt() {
  if (!_internal_has_lt()) {
    clear_less_than();
    set_has_lt();
    less_than_.lt_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Timestamp >(GetArena());
  }
  return less_than_.lt_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimestampRules::mutable_lt() {
  // @@protoc_insertion_point(field_mutable:buf.validate.TimestampRules.lt)
  return _internal_mutable_lt();
}

// .google.protobuf.Timestamp lte = 4[json_name = "lte", (.buf.validate.predefined) = {
inline bool TimestampRules::_internal_has_lte() const {
  return less_than_case() == kLte;
}
inline bool TimestampRules::has_lte() const {
  return _internal_has_lte();
}
inline void TimestampRules::set_has_lte() {
  _oneof_case_[0] = kLte;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimestampRules::release_lte() {
  // @@protoc_insertion_point(field_release:buf.validate.TimestampRules.lte)
  if (_internal_has_lte()) {
    clear_has_less_than();
      PROTOBUF_NAMESPACE_ID::Timestamp* temp = less_than_.lte_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    less_than_.lte_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TimestampRules::_internal_lte() const {
  return _internal_has_lte()
      ? *less_than_.lte_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(&PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TimestampRules::lte() const {
  // @@protoc_insertion_point(field_get:buf.validate.TimestampRules.lte)
  return _internal_lte();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimestampRules::unsafe_arena_release_lte() {
  // @@protoc_insertion_point(field_unsafe_arena_release:buf.validate.TimestampRules.lte)
  if (_internal_has_lte()) {
    clear_has_less_than();
    PROTOBUF_NAMESPACE_ID::Timestamp* temp = less_than_.lte_;
    less_than_.lte_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TimestampRules::unsafe_arena_set_allocated_lte(PROTOBUF_NAMESPACE_ID::Timestamp* lte) {
  clear_less_than();
  if (lte) {
    set_has_lte();
    less_than_.lte_ = lte;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:buf.validate.TimestampRules.lte)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimestampRules::_internal_mutable_lte() {
  if (!_internal_has_lte()) {
    clear_less_than();
    set_has_lte();
    less_than_.lte_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Timestamp >(GetArena());
  }
  return less_than_.lte_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimestampRules::mutable_lte() {
  // @@protoc_insertion_point(field_mutable:buf.validate.TimestampRules.lte)
  return _internal_mutable_lte();
}

// bool lt_now = 7[json_name = "ltNow", (.buf.validate.predefined) = {
inline bool TimestampRules::_internal_has_lt_now() const {
  return less_than_case() == kLtNow;
}
inline bool TimestampRules::has_lt_now() const {
  return _internal_has_lt_now();
}
inline void TimestampRules::set_has_lt_now() {
  _oneof_case_[0] = kLtNow;
}
inline void TimestampRules::clear_lt_now() {
  if (_internal_has_lt_now()) {
    less_than_.lt_now_ = false;
    clear_has_less_than();
  }
}
inline bool TimestampRules::_internal_lt_now() const {
  if (_internal_has_lt_now()) {
    return less_than_.lt_now_;
  }
  return false;
}
inline void TimestampRules::_internal_set_lt_now(bool value) {
  if (!_internal_has_lt_now()) {
    clear_less_than();
    set_has_lt_now();
  }
  less_than_.lt_now_ = value;
}
inline bool TimestampRules::lt_now() const {
  // @@protoc_insertion_point(field_get:buf.validate.TimestampRules.lt_now)
  return _internal_lt_now();
}
inline void TimestampRules::set_lt_now(bool value) {
  _internal_set_lt_now(value);
  // @@protoc_insertion_point(field_set:buf.validate.TimestampRules.lt_now)
}

// .google.protobuf.Timestamp gt = 5[json_name = "gt", (.buf.validate.predefined) = {
inline bool TimestampRules::_internal_has_gt() const {
  return greater_than_case() == kGt;
}
inline bool TimestampRules::has_gt() const {
  return _internal_has_gt();
}
inline void TimestampRules::set_has_gt() {
  _oneof_case_[1] = kGt;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimestampRules::release_gt() {
  // @@protoc_insertion_point(field_release:buf.validate.TimestampRules.gt)
  if (_internal_has_gt()) {
    clear_has_greater_than();
      PROTOBUF_NAMESPACE_ID::Timestamp* temp = greater_than_.gt_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    greater_than_.gt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TimestampRules::_internal_gt() const {
  return _internal_has_gt()
      ? *greater_than_.gt_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(&PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TimestampRules::gt() const {
  // @@protoc_insertion_point(field_get:buf.validate.TimestampRules.gt)
  return _internal_gt();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimestampRules::unsafe_arena_release_gt() {
  // @@protoc_insertion_point(field_unsafe_arena_release:buf.validate.TimestampRules.gt)
  if (_internal_has_gt()) {
    clear_has_greater_than();
    PROTOBUF_NAMESPACE_ID::Timestamp* temp = greater_than_.gt_;
    greater_than_.gt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TimestampRules::unsafe_arena_set_allocated_gt(PROTOBUF_NAMESPACE_ID::Timestamp* gt) {
  clear_greater_than();
  if (gt) {
    set_has_gt();
    greater_than_.gt_ = gt;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:buf.validate.TimestampRules.gt)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimestampRules::_internal_mutable_gt() {
  if (!_internal_has_gt()) {
    clear_greater_than();
    set_has_gt();
    greater_than_.gt_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Timestamp >(GetArena());
  }
  return greater_than_.gt_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimestampRules::mutable_gt() {
  // @@protoc_insertion_point(field_mutable:buf.validate.TimestampRules.gt)
  return _internal_mutable_gt();
}

// .google.protobuf.Timestamp gte = 6[json_name = "gte", (.buf.validate.predefined) = {
inline bool TimestampRules::_internal_has_gte() const {
  return greater_than_case() == kGte;
}
inline bool TimestampRules::has_gte() const {
  return _internal_has_gte();
}
inline void TimestampRules::set_has_gte() {
  _oneof_case_[1] = kGte;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimestampRules::release_gte() {
  // @@protoc_insertion_point(field_release:buf.validate.TimestampRules.gte)
  if (_internal_has_gte()) {
    clear_has_greater_than();
      PROTOBUF_NAMESPACE_ID::Timestamp* temp = greater_than_.gte_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    greater_than_.gte_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TimestampRules::_internal_gte() const {
  return _internal_has_gte()
      ? *greater_than_.gte_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(&PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TimestampRules::gte() const {
  // @@protoc_insertion_point(field_get:buf.validate.TimestampRules.gte)
  return _internal_gte();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimestampRules::unsafe_arena_release_gte() {
  // @@protoc_insertion_point(field_unsafe_arena_release:buf.validate.TimestampRules.gte)
  if (_internal_has_gte()) {
    clear_has_greater_than();
    PROTOBUF_NAMESPACE_ID::Timestamp* temp = greater_than_.gte_;
    greater_than_.gte_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TimestampRules::unsafe_arena_set_allocated_gte(PROTOBUF_NAMESPACE_ID::Timestamp* gte) {
  clear_greater_than();
  if (gte) {
    set_has_gte();
    greater_than_.gte_ = gte;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:buf.validate.TimestampRules.gte)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimestampRules::_internal_mutable_gte() {
  if (!_internal_has_gte()) {
    clear_greater_than();
    set_has_gte();
    greater_than_.gte_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Timestamp >(GetArena());
  }
  return greater_than_.gte_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimestampRules::mutable_gte() {
  // @@protoc_insertion_point(field_mutable:buf.validate.TimestampRules.gte)
  return _internal_mutable_gte();
}

// bool gt_now = 8[json_name = "gtNow", (.buf.validate.predefined) = {
inline bool TimestampRules::_internal_has_gt_now() const {
  return greater_than_case() == kGtNow;
}
inline bool TimestampRules::has_gt_now() const {
  return _internal_has_gt_now();
}
inline void TimestampRules::set_has_gt_now() {
  _oneof_case_[1] = kGtNow;
}
inline void TimestampRules::clear_gt_now() {
  if (_internal_has_gt_now()) {
    greater_than_.gt_now_ = false;
    clear_has_greater_than();
  }
}
inline bool TimestampRules::_internal_gt_now() const {
  if (_internal_has_gt_now()) {
    return greater_than_.gt_now_;
  }
  return false;
}
inline void TimestampRules::_internal_set_gt_now(bool value) {
  if (!_internal_has_gt_now()) {
    clear_greater_than();
    set_has_gt_now();
  }
  greater_than_.gt_now_ = value;
}
inline bool TimestampRules::gt_now() const {
  // @@protoc_insertion_point(field_get:buf.validate.TimestampRules.gt_now)
  return _internal_gt_now();
}
inline void TimestampRules::set_gt_now(bool value) {
  _internal_set_gt_now(value);
  // @@protoc_insertion_point(field_set:buf.validate.TimestampRules.gt_now)
}

// optional .google.protobuf.Duration within = 9[json_name = "within", (.buf.validate.predefined) = {
inline bool TimestampRules::_internal_has_within() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || within_ != nullptr);
  return value;
}
inline bool TimestampRules::has_within() const {
  return _internal_has_within();
}
inline const PROTOBUF_NAMESPACE_ID::Duration& TimestampRules::_internal_within() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = within_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration*>(
      &PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& TimestampRules::within() const {
  // @@protoc_insertion_point(field_get:buf.validate.TimestampRules.within)
  return _internal_within();
}
inline void TimestampRules::unsafe_arena_set_allocated_within(
    PROTOBUF_NAMESPACE_ID::Duration* within) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(within_);
  }
  within_ = within;
  if (within) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:buf.validate.TimestampRules.within)
}
inline PROTOBUF_NAMESPACE_ID::Duration* TimestampRules::release_within() {
  auto temp = unsafe_arena_release_within();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* TimestampRules::unsafe_arena_release_within() {
  // @@protoc_insertion_point(field_release:buf.validate.TimestampRules.within)
  _has_bits_[0] &= ~0x00000002u;
  PROTOBUF_NAMESPACE_ID::Duration* temp = within_;
  within_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* TimestampRules::_internal_mutable_within() {
  _has_bits_[0] |= 0x00000002u;
  if (within_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArena());
    within_ = p;
  }
  return within_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* TimestampRules::mutable_within() {
  // @@protoc_insertion_point(field_mutable:buf.validate.TimestampRules.within)
  return _internal_mutable_within();
}
inline void TimestampRules::set_allocated_within(PROTOBUF_NAMESPACE_ID::Duration* within) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(within_);
  }
  if (within) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(within)->GetArena();
    if (message_arena != submessage_arena) {
      within = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, within, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  within_ = within;
  // @@protoc_insertion_point(field_set_allocated:buf.validate.TimestampRules.within)
}

// repeated .google.protobuf.Timestamp example = 10[json_name = "example", (.buf.validate.predefined) = {
inline int TimestampRules::_internal_example_size() const {
  return example_.size();
}
inline int TimestampRules::example_size() const {
  return _internal_example_size();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimestampRules::mutable_example(int index) {
  // @@protoc_insertion_point(field_mutable:buf.validate.TimestampRules.example)
  return example_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Timestamp >*
TimestampRules::mutable_example() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.TimestampRules.example)
  return &example_;
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TimestampRules::_internal_example(int index) const {
  return example_.Get(index);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TimestampRules::example(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.TimestampRules.example)
  return _internal_example(index);
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimestampRules::_internal_add_example() {
  return example_.Add();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimestampRules::add_example() {
  // @@protoc_insertion_point(field_add:buf.validate.TimestampRules.example)
  return _internal_add_example();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Timestamp >&
TimestampRules::example() const {
  // @@protoc_insertion_point(field_list:buf.validate.TimestampRules.example)
  return example_;
}

inline bool TimestampRules::has_less_than() const {
  return less_than_case() != LESS_THAN_NOT_SET;
}
inline void TimestampRules::clear_has_less_than() {
  _oneof_case_[0] = LESS_THAN_NOT_SET;
}
inline bool TimestampRules::has_greater_than() const {
  return greater_than_case() != GREATER_THAN_NOT_SET;
}
inline void TimestampRules::clear_has_greater_than() {
  _oneof_case_[1] = GREATER_THAN_NOT_SET;
}
inline TimestampRules::LessThanCase TimestampRules::less_than_case() const {
  return TimestampRules::LessThanCase(_oneof_case_[0]);
}
inline TimestampRules::GreaterThanCase TimestampRules::greater_than_case() const {
  return TimestampRules::GreaterThanCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// Violations

// repeated .buf.validate.Violation violations = 1[json_name = "violations"];
inline int Violations::_internal_violations_size() const {
  return violations_.size();
}
inline int Violations::violations_size() const {
  return _internal_violations_size();
}
inline void Violations::clear_violations() {
  violations_.Clear();
}
inline ::buf::validate::Violation* Violations::mutable_violations(int index) {
  // @@protoc_insertion_point(field_mutable:buf.validate.Violations.violations)
  return violations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::buf::validate::Violation >*
Violations::mutable_violations() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.Violations.violations)
  return &violations_;
}
inline const ::buf::validate::Violation& Violations::_internal_violations(int index) const {
  return violations_.Get(index);
}
inline const ::buf::validate::Violation& Violations::violations(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.Violations.violations)
  return _internal_violations(index);
}
inline ::buf::validate::Violation* Violations::_internal_add_violations() {
  return violations_.Add();
}
inline ::buf::validate::Violation* Violations::add_violations() {
  // @@protoc_insertion_point(field_add:buf.validate.Violations.violations)
  return _internal_add_violations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::buf::validate::Violation >&
Violations::violations() const {
  // @@protoc_insertion_point(field_list:buf.validate.Violations.violations)
  return violations_;
}

// -------------------------------------------------------------------

// Violation

// optional .buf.validate.FieldPath field = 5[json_name = "field"];
inline bool Violation::_internal_has_field() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || field_ != nullptr);
  return value;
}
inline bool Violation::has_field() const {
  return _internal_has_field();
}
inline void Violation::clear_field() {
  if (field_ != nullptr) field_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::buf::validate::FieldPath& Violation::_internal_field() const {
  const ::buf::validate::FieldPath* p = field_;
  return p != nullptr ? *p : *reinterpret_cast<const ::buf::validate::FieldPath*>(
      &::buf::validate::_FieldPath_default_instance_);
}
inline const ::buf::validate::FieldPath& Violation::field() const {
  // @@protoc_insertion_point(field_get:buf.validate.Violation.field)
  return _internal_field();
}
inline void Violation::unsafe_arena_set_allocated_field(
    ::buf::validate::FieldPath* field) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(field_);
  }
  field_ = field;
  if (field) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:buf.validate.Violation.field)
}
inline ::buf::validate::FieldPath* Violation::release_field() {
  auto temp = unsafe_arena_release_field();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::buf::validate::FieldPath* Violation::unsafe_arena_release_field() {
  // @@protoc_insertion_point(field_release:buf.validate.Violation.field)
  _has_bits_[0] &= ~0x00000004u;
  ::buf::validate::FieldPath* temp = field_;
  field_ = nullptr;
  return temp;
}
inline ::buf::validate::FieldPath* Violation::_internal_mutable_field() {
  _has_bits_[0] |= 0x00000004u;
  if (field_ == nullptr) {
    auto* p = CreateMaybeMessage<::buf::validate::FieldPath>(GetArena());
    field_ = p;
  }
  return field_;
}
inline ::buf::validate::FieldPath* Violation::mutable_field() {
  // @@protoc_insertion_point(field_mutable:buf.validate.Violation.field)
  return _internal_mutable_field();
}
inline void Violation::set_allocated_field(::buf::validate::FieldPath* field) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete field_;
  }
  if (field) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(field);
    if (message_arena != submessage_arena) {
      field = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, field, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  field_ = field;
  // @@protoc_insertion_point(field_set_allocated:buf.validate.Violation.field)
}

// optional .buf.validate.FieldPath rule = 6[json_name = "rule"];
inline bool Violation::_internal_has_rule() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || rule_ != nullptr);
  return value;
}
inline bool Violation::has_rule() const {
  return _internal_has_rule();
}
inline void Violation::clear_rule() {
  if (rule_ != nullptr) rule_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::buf::validate::FieldPath& Violation::_internal_rule() const {
  const ::buf::validate::FieldPath* p = rule_;
  return p != nullptr ? *p : *reinterpret_cast<const ::buf::validate::FieldPath*>(
      &::buf::validate::_FieldPath_default_instance_);
}
inline const ::buf::validate::FieldPath& Violation::rule() const {
  // @@protoc_insertion_point(field_get:buf.validate.Violation.rule)
  return _internal_rule();
}
inline void Violation::unsafe_arena_set_allocated_rule(
    ::buf::validate::FieldPath* rule) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rule_);
  }
  rule_ = rule;
  if (rule) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:buf.validate.Violation.rule)
}
inline ::buf::validate::FieldPath* Violation::release_rule() {
  auto temp = unsafe_arena_release_rule();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::buf::validate::FieldPath* Violation::unsafe_arena_release_rule() {
  // @@protoc_insertion_point(field_release:buf.validate.Violation.rule)
  _has_bits_[0] &= ~0x00000008u;
  ::buf::validate::FieldPath* temp = rule_;
  rule_ = nullptr;
  return temp;
}
inline ::buf::validate::FieldPath* Violation::_internal_mutable_rule() {
  _has_bits_[0] |= 0x00000008u;
  if (rule_ == nullptr) {
    auto* p = CreateMaybeMessage<::buf::validate::FieldPath>(GetArena());
    rule_ = p;
  }
  return rule_;
}
inline ::buf::validate::FieldPath* Violation::mutable_rule() {
  // @@protoc_insertion_point(field_mutable:buf.validate.Violation.rule)
  return _internal_mutable_rule();
}
inline void Violation::set_allocated_rule(::buf::validate::FieldPath* rule) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rule_;
  }
  if (rule) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rule);
    if (message_arena != submessage_arena) {
      rule = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rule, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  rule_ = rule;
  // @@protoc_insertion_point(field_set_allocated:buf.validate.Violation.rule)
}

// optional string rule_id = 2[json_name = "ruleId"];
inline bool Violation::_internal_has_rule_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Violation::has_rule_id() const {
  return _internal_has_rule_id();
}
inline void Violation::clear_rule_id() {
  rule_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Violation::rule_id() const {
  // @@protoc_insertion_point(field_get:buf.validate.Violation.rule_id)
  return _internal_rule_id();
}
inline void Violation::set_rule_id(const std::string& value) {
  _internal_set_rule_id(value);
  // @@protoc_insertion_point(field_set:buf.validate.Violation.rule_id)
}
inline std::string* Violation::mutable_rule_id() {
  // @@protoc_insertion_point(field_mutable:buf.validate.Violation.rule_id)
  return _internal_mutable_rule_id();
}
inline const std::string& Violation::_internal_rule_id() const {
  return rule_id_.Get();
}
inline void Violation::_internal_set_rule_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  rule_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Violation::set_rule_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  rule_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:buf.validate.Violation.rule_id)
}
inline void Violation::set_rule_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  rule_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:buf.validate.Violation.rule_id)
}
inline void Violation::set_rule_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  rule_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:buf.validate.Violation.rule_id)
}
inline std::string* Violation::_internal_mutable_rule_id() {
  _has_bits_[0] |= 0x00000001u;
  return rule_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Violation::release_rule_id() {
  // @@protoc_insertion_point(field_release:buf.validate.Violation.rule_id)
  if (!_internal_has_rule_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return rule_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Violation::set_allocated_rule_id(std::string* rule_id) {
  if (rule_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  rule_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rule_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:buf.validate.Violation.rule_id)
}
inline std::string* Violation::unsafe_arena_release_rule_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:buf.validate.Violation.rule_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return rule_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Violation::unsafe_arena_set_allocated_rule_id(
    std::string* rule_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (rule_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  rule_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      rule_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:buf.validate.Violation.rule_id)
}

// optional string message = 3[json_name = "message"];
inline bool Violation::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Violation::has_message() const {
  return _internal_has_message();
}
inline void Violation::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Violation::message() const {
  // @@protoc_insertion_point(field_get:buf.validate.Violation.message)
  return _internal_message();
}
inline void Violation::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:buf.validate.Violation.message)
}
inline std::string* Violation::mutable_message() {
  // @@protoc_insertion_point(field_mutable:buf.validate.Violation.message)
  return _internal_mutable_message();
}
inline const std::string& Violation::_internal_message() const {
  return message_.Get();
}
inline void Violation::_internal_set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Violation::set_message(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:buf.validate.Violation.message)
}
inline void Violation::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:buf.validate.Violation.message)
}
inline void Violation::set_message(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:buf.validate.Violation.message)
}
inline std::string* Violation::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000002u;
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Violation::release_message() {
  // @@protoc_insertion_point(field_release:buf.validate.Violation.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Violation::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:buf.validate.Violation.message)
}
inline std::string* Violation::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:buf.validate.Violation.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Violation::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:buf.validate.Violation.message)
}

// optional bool for_key = 4[json_name = "forKey"];
inline bool Violation::_internal_has_for_key() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Violation::has_for_key() const {
  return _internal_has_for_key();
}
inline void Violation::clear_for_key() {
  for_key_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Violation::_internal_for_key() const {
  return for_key_;
}
inline bool Violation::for_key() const {
  // @@protoc_insertion_point(field_get:buf.validate.Violation.for_key)
  return _internal_for_key();
}
inline void Violation::_internal_set_for_key(bool value) {
  _has_bits_[0] |= 0x00000010u;
  for_key_ = value;
}
inline void Violation::set_for_key(bool value) {
  _internal_set_for_key(value);
  // @@protoc_insertion_point(field_set:buf.validate.Violation.for_key)
}

// -------------------------------------------------------------------

// FieldPath

// repeated .buf.validate.FieldPathElement elements = 1[json_name = "elements"];
inline int FieldPath::_internal_elements_size() const {
  return elements_.size();
}
inline int FieldPath::elements_size() const {
  return _internal_elements_size();
}
inline void FieldPath::clear_elements() {
  elements_.Clear();
}
inline ::buf::validate::FieldPathElement* FieldPath::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:buf.validate.FieldPath.elements)
  return elements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::buf::validate::FieldPathElement >*
FieldPath::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:buf.validate.FieldPath.elements)
  return &elements_;
}
inline const ::buf::validate::FieldPathElement& FieldPath::_internal_elements(int index) const {
  return elements_.Get(index);
}
inline const ::buf::validate::FieldPathElement& FieldPath::elements(int index) const {
  // @@protoc_insertion_point(field_get:buf.validate.FieldPath.elements)
  return _internal_elements(index);
}
inline ::buf::validate::FieldPathElement* FieldPath::_internal_add_elements() {
  return elements_.Add();
}
inline ::buf::validate::FieldPathElement* FieldPath::add_elements() {
  // @@protoc_insertion_point(field_add:buf.validate.FieldPath.elements)
  return _internal_add_elements();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::buf::validate::FieldPathElement >&
FieldPath::elements() const {
  // @@protoc_insertion_point(field_list:buf.validate.FieldPath.elements)
  return elements_;
}

// -------------------------------------------------------------------

// FieldPathElement

// optional int32 field_number = 1[json_name = "fieldNumber"];
inline bool FieldPathElement::_internal_has_field_number() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FieldPathElement::has_field_number() const {
  return _internal_has_field_number();
}
inline void FieldPathElement::clear_field_number() {
  field_number_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FieldPathElement::_internal_field_number() const {
  return field_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FieldPathElement::field_number() const {
  // @@protoc_insertion_point(field_get:buf.validate.FieldPathElement.field_number)
  return _internal_field_number();
}
inline void FieldPathElement::_internal_set_field_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  field_number_ = value;
}
inline void FieldPathElement::set_field_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_field_number(value);
  // @@protoc_insertion_point(field_set:buf.validate.FieldPathElement.field_number)
}

// optional string field_name = 2[json_name = "fieldName"];
inline bool FieldPathElement::_internal_has_field_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FieldPathElement::has_field_name() const {
  return _internal_has_field_name();
}
inline void FieldPathElement::clear_field_name() {
  field_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FieldPathElement::field_name() const {
  // @@protoc_insertion_point(field_get:buf.validate.FieldPathElement.field_name)
  return _internal_field_name();
}
inline void FieldPathElement::set_field_name(const std::string& value) {
  _internal_set_field_name(value);
  // @@protoc_insertion_point(field_set:buf.validate.FieldPathElement.field_name)
}
inline std::string* FieldPathElement::mutable_field_name() {
  // @@protoc_insertion_point(field_mutable:buf.validate.FieldPathElement.field_name)
  return _internal_mutable_field_name();
}
inline const std::string& FieldPathElement::_internal_field_name() const {
  return field_name_.Get();
}
inline void FieldPathElement::_internal_set_field_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  field_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FieldPathElement::set_field_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  field_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:buf.validate.FieldPathElement.field_name)
}
inline void FieldPathElement::set_field_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  field_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:buf.validate.FieldPathElement.field_name)
}
inline void FieldPathElement::set_field_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  field_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:buf.validate.FieldPathElement.field_name)
}
inline std::string* FieldPathElement::_internal_mutable_field_name() {
  _has_bits_[0] |= 0x00000001u;
  return field_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FieldPathElement::release_field_name() {
  // @@protoc_insertion_point(field_release:buf.validate.FieldPathElement.field_name)
  if (!_internal_has_field_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return field_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FieldPathElement::set_allocated_field_name(std::string* field_name) {
  if (field_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  field_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), field_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:buf.validate.FieldPathElement.field_name)
}
inline std::string* FieldPathElement::unsafe_arena_release_field_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:buf.validate.FieldPathElement.field_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return field_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FieldPathElement::unsafe_arena_set_allocated_field_name(
    std::string* field_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (field_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  field_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      field_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:buf.validate.FieldPathElement.field_name)
}

// optional .google.protobuf.FieldDescriptorProto.Type field_type = 3[json_name = "fieldType"];
inline bool FieldPathElement::_internal_has_field_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FieldPathElement::has_field_type() const {
  return _internal_has_field_type();
}
inline void FieldPathElement::clear_field_type() {
  field_type_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline PROTOBUF_NAMESPACE_ID::FieldDescriptorProto_Type FieldPathElement::_internal_field_type() const {
  return static_cast< PROTOBUF_NAMESPACE_ID::FieldDescriptorProto_Type >(field_type_);
}
inline PROTOBUF_NAMESPACE_ID::FieldDescriptorProto_Type FieldPathElement::field_type() const {
  // @@protoc_insertion_point(field_get:buf.validate.FieldPathElement.field_type)
  return _internal_field_type();
}
inline void FieldPathElement::_internal_set_field_type(PROTOBUF_NAMESPACE_ID::FieldDescriptorProto_Type value) {
  assert(PROTOBUF_NAMESPACE_ID::FieldDescriptorProto_Type_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  field_type_ = value;
}
inline void FieldPathElement::set_field_type(PROTOBUF_NAMESPACE_ID::FieldDescriptorProto_Type value) {
  _internal_set_field_type(value);
  // @@protoc_insertion_point(field_set:buf.validate.FieldPathElement.field_type)
}

// optional .google.protobuf.FieldDescriptorProto.Type key_type = 4[json_name = "keyType"];
inline bool FieldPathElement::_internal_has_key_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FieldPathElement::has_key_type() const {
  return _internal_has_key_type();
}
inline void FieldPathElement::clear_key_type() {
  key_type_ = 1;
  _has_bits_[0] &= ~0x00000010u;
}
inline PROTOBUF_NAMESPACE_ID::FieldDescriptorProto_Type FieldPathElement::_internal_key_type() const {
  return static_cast< PROTOBUF_NAMESPACE_ID::FieldDescriptorProto_Type >(key_type_);
}
inline PROTOBUF_NAMESPACE_ID::FieldDescriptorProto_Type FieldPathElement::key_type() const {
  // @@protoc_insertion_point(field_get:buf.validate.FieldPathElement.key_type)
  return _internal_key_type();
}
inline void FieldPathElement::_internal_set_key_type(PROTOBUF_NAMESPACE_ID::FieldDescriptorProto_Type value) {
  assert(PROTOBUF_NAMESPACE_ID::FieldDescriptorProto_Type_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  key_type_ = value;
}
inline void FieldPathElement::set_key_type(PROTOBUF_NAMESPACE_ID::FieldDescriptorProto_Type value) {
  _internal_set_key_type(value);
  // @@protoc_insertion_point(field_set:buf.validate.FieldPathElement.key_type)
}

// optional .google.protobuf.FieldDescriptorProto.Type value_type = 5[json_name = "valueType"];
inline bool FieldPathElement::_internal_has_value_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FieldPathElement::has_value_type() const {
  return _internal_has_value_type();
}
inline void FieldPathElement::clear_value_type() {
  value_type_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline PROTOBUF_NAMESPACE_ID::FieldDescriptorProto_Type FieldPathElement::_internal_value_type() const {
  return static_cast< PROTOBUF_NAMESPACE_ID::FieldDescriptorProto_Type >(value_type_);
}
inline PROTOBUF_NAMESPACE_ID::FieldDescriptorProto_Type FieldPathElement::value_type() const {
  // @@protoc_insertion_point(field_get:buf.validate.FieldPathElement.value_type)
  return _internal_value_type();
}
inline void FieldPathElement::_internal_set_value_type(PROTOBUF_NAMESPACE_ID::FieldDescriptorProto_Type value) {
  assert(PROTOBUF_NAMESPACE_ID::FieldDescriptorProto_Type_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  value_type_ = value;
}
inline void FieldPathElement::set_value_type(PROTOBUF_NAMESPACE_ID::FieldDescriptorProto_Type value) {
  _internal_set_value_type(value);
  // @@protoc_insertion_point(field_set:buf.validate.FieldPathElement.value_type)
}

// uint64 index = 6[json_name = "index"];
inline bool FieldPathElement::_internal_has_index() const {
  return subscript_case() == kIndex;
}
inline bool FieldPathElement::has_index() const {
  return _internal_has_index();
}
inline void FieldPathElement::set_has_index() {
  _oneof_case_[0] = kIndex;
}
inline void FieldPathElement::clear_index() {
  if (_internal_has_index()) {
    subscript_.index_ = PROTOBUF_ULONGLONG(0);
    clear_has_subscript();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FieldPathElement::_internal_index() const {
  if (_internal_has_index()) {
    return subscript_.index_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void FieldPathElement::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_index()) {
    clear_subscript();
    set_has_index();
  }
  subscript_.index_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FieldPathElement::index() const {
  // @@protoc_insertion_point(field_get:buf.validate.FieldPathElement.index)
  return _internal_index();
}
inline void FieldPathElement::set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:buf.validate.FieldPathElement.index)
}

// bool bool_key = 7[json_name = "boolKey"];
inline bool FieldPathElement::_internal_has_bool_key() const {
  return subscript_case() == kBoolKey;
}
inline bool FieldPathElement::has_bool_key() const {
  return _internal_has_bool_key();
}
inline void FieldPathElement::set_has_bool_key() {
  _oneof_case_[0] = kBoolKey;
}
inline void FieldPathElement::clear_bool_key() {
  if (_internal_has_bool_key()) {
    subscript_.bool_key_ = false;
    clear_has_subscript();
  }
}
inline bool FieldPathElement::_internal_bool_key() const {
  if (_internal_has_bool_key()) {
    return subscript_.bool_key_;
  }
  return false;
}
inline void FieldPathElement::_internal_set_bool_key(bool value) {
  if (!_internal_has_bool_key()) {
    clear_subscript();
    set_has_bool_key();
  }
  subscript_.bool_key_ = value;
}
inline bool FieldPathElement::bool_key() const {
  // @@protoc_insertion_point(field_get:buf.validate.FieldPathElement.bool_key)
  return _internal_bool_key();
}
inline void FieldPathElement::set_bool_key(bool value) {
  _internal_set_bool_key(value);
  // @@protoc_insertion_point(field_set:buf.validate.FieldPathElement.bool_key)
}

// int64 int_key = 8[json_name = "intKey"];
inline bool FieldPathElement::_internal_has_int_key() const {
  return subscript_case() == kIntKey;
}
inline bool FieldPathElement::has_int_key() const {
  return _internal_has_int_key();
}
inline void FieldPathElement::set_has_int_key() {
  _oneof_case_[0] = kIntKey;
}
inline void FieldPathElement::clear_int_key() {
  if (_internal_has_int_key()) {
    subscript_.int_key_ = PROTOBUF_LONGLONG(0);
    clear_has_subscript();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FieldPathElement::_internal_int_key() const {
  if (_internal_has_int_key()) {
    return subscript_.int_key_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void FieldPathElement::_internal_set_int_key(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_int_key()) {
    clear_subscript();
    set_has_int_key();
  }
  subscript_.int_key_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FieldPathElement::int_key() const {
  // @@protoc_insertion_point(field_get:buf.validate.FieldPathElement.int_key)
  return _internal_int_key();
}
inline void FieldPathElement::set_int_key(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_int_key(value);
  // @@protoc_insertion_point(field_set:buf.validate.FieldPathElement.int_key)
}

// uint64 uint_key = 9[json_name = "uintKey"];
inline bool FieldPathElement::_internal_has_uint_key() const {
  return subscript_case() == kUintKey;
}
inline bool FieldPathElement::has_uint_key() const {
  return _internal_has_uint_key();
}
inline void FieldPathElement::set_has_uint_key() {
  _oneof_case_[0] = kUintKey;
}
inline void FieldPathElement::clear_uint_key() {
  if (_internal_has_uint_key()) {
    subscript_.uint_key_ = PROTOBUF_ULONGLONG(0);
    clear_has_subscript();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FieldPathElement::_internal_uint_key() const {
  if (_internal_has_uint_key()) {
    return subscript_.uint_key_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void FieldPathElement::_internal_set_uint_key(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_uint_key()) {
    clear_subscript();
    set_has_uint_key();
  }
  subscript_.uint_key_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FieldPathElement::uint_key() const {
  // @@protoc_insertion_point(field_get:buf.validate.FieldPathElement.uint_key)
  return _internal_uint_key();
}
inline void FieldPathElement::set_uint_key(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_uint_key(value);
  // @@protoc_insertion_point(field_set:buf.validate.FieldPathElement.uint_key)
}

// string string_key = 10[json_name = "stringKey"];
inline bool FieldPathElement::_internal_has_string_key() const {
  return subscript_case() == kStringKey;
}
inline bool FieldPathElement::has_string_key() const {
  return _internal_has_string_key();
}
inline void FieldPathElement::set_has_string_key() {
  _oneof_case_[0] = kStringKey;
}
inline void FieldPathElement::clear_string_key() {
  if (_internal_has_string_key()) {
    subscript_.string_key_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_subscript();
  }
}
inline const std::string& FieldPathElement::string_key() const {
  // @@protoc_insertion_point(field_get:buf.validate.FieldPathElement.string_key)
  return _internal_string_key();
}
inline void FieldPathElement::set_string_key(const std::string& value) {
  _internal_set_string_key(value);
  // @@protoc_insertion_point(field_set:buf.validate.FieldPathElement.string_key)
}
inline std::string* FieldPathElement::mutable_string_key() {
  // @@protoc_insertion_point(field_mutable:buf.validate.FieldPathElement.string_key)
  return _internal_mutable_string_key();
}
inline const std::string& FieldPathElement::_internal_string_key() const {
  if (_internal_has_string_key()) {
    return subscript_.string_key_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void FieldPathElement::_internal_set_string_key(const std::string& value) {
  if (!_internal_has_string_key()) {
    clear_subscript();
    set_has_string_key();
    subscript_.string_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  subscript_.string_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FieldPathElement::set_string_key(std::string&& value) {
  // @@protoc_insertion_point(field_set:buf.validate.FieldPathElement.string_key)
  if (!_internal_has_string_key()) {
    clear_subscript();
    set_has_string_key();
    subscript_.string_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  subscript_.string_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:buf.validate.FieldPathElement.string_key)
}
inline void FieldPathElement::set_string_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_string_key()) {
    clear_subscript();
    set_has_string_key();
    subscript_.string_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  subscript_.string_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:buf.validate.FieldPathElement.string_key)
}
inline void FieldPathElement::set_string_key(const char* value,
                             size_t size) {
  if (!_internal_has_string_key()) {
    clear_subscript();
    set_has_string_key();
    subscript_.string_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  subscript_.string_key_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:buf.validate.FieldPathElement.string_key)
}
inline std::string* FieldPathElement::_internal_mutable_string_key() {
  if (!_internal_has_string_key()) {
    clear_subscript();
    set_has_string_key();
    subscript_.string_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return subscript_.string_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FieldPathElement::release_string_key() {
  // @@protoc_insertion_point(field_release:buf.validate.FieldPathElement.string_key)
  if (_internal_has_string_key()) {
    clear_has_subscript();
    return subscript_.string_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void FieldPathElement::set_allocated_string_key(std::string* string_key) {
  if (has_subscript()) {
    clear_subscript();
  }
  if (string_key != nullptr) {
    set_has_string_key();
    subscript_.string_key_.UnsafeSetDefault(string_key);
  }
  // @@protoc_insertion_point(field_set_allocated:buf.validate.FieldPathElement.string_key)
}
inline std::string* FieldPathElement::unsafe_arena_release_string_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:buf.validate.FieldPathElement.string_key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (_internal_has_string_key()) {
    clear_has_subscript();
    return subscript_.string_key_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void FieldPathElement::unsafe_arena_set_allocated_string_key(std::string* string_key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (!_internal_has_string_key()) {
    subscript_.string_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_subscript();
  if (string_key) {
    set_has_string_key();
    subscript_.string_key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), string_key, GetArena());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:buf.validate.FieldPathElement.string_key)
}

inline bool FieldPathElement::has_subscript() const {
  return subscript_case() != SUBSCRIPT_NOT_SET;
}
inline void FieldPathElement::clear_has_subscript() {
  _oneof_case_[0] = SUBSCRIPT_NOT_SET;
}
inline FieldPathElement::SubscriptCase FieldPathElement::subscript_case() const {
  return FieldPathElement::SubscriptCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace validate
}  // namespace buf

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::buf::validate::Ignore> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::buf::validate::Ignore>() {
  return ::buf::validate::Ignore_descriptor();
}
template <> struct is_proto_enum< ::buf::validate::KnownRegex> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::buf::validate::KnownRegex>() {
  return ::buf::validate::KnownRegex_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_buf_2fvalidate_2fvalidate_2eproto

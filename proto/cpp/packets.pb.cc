// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packets.proto

#include "packets.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_packets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ErrorPacket_packets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginPacket_packets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessagePacket_packets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VersionPacket_packets_2eproto;
class VersionPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VersionPacket> _instance;
} _VersionPacket_default_instance_;
class LoginPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginPacket> _instance;
} _LoginPacket_default_instance_;
class MessagePacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessagePacket> _instance;
} _MessagePacket_default_instance_;
class ErrorPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ErrorPacket> _instance;
} _ErrorPacket_default_instance_;
class UniversalPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UniversalPacket> _instance;
  const ::VersionPacket* version_;
  const ::ErrorPacket* error_;
  const ::LoginPacket* login_;
  const ::MessagePacket* message_;
} _UniversalPacket_default_instance_;
static void InitDefaultsscc_info_ErrorPacket_packets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ErrorPacket_default_instance_;
    new (ptr) ::ErrorPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ErrorPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ErrorPacket_packets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ErrorPacket_packets_2eproto}, {}};

static void InitDefaultsscc_info_LoginPacket_packets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LoginPacket_default_instance_;
    new (ptr) ::LoginPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LoginPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginPacket_packets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoginPacket_packets_2eproto}, {}};

static void InitDefaultsscc_info_MessagePacket_packets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MessagePacket_default_instance_;
    new (ptr) ::MessagePacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MessagePacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessagePacket_packets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MessagePacket_packets_2eproto}, {}};

static void InitDefaultsscc_info_UniversalPacket_packets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UniversalPacket_default_instance_;
    new (ptr) ::UniversalPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UniversalPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_UniversalPacket_packets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_UniversalPacket_packets_2eproto}, {
      &scc_info_VersionPacket_packets_2eproto.base,
      &scc_info_ErrorPacket_packets_2eproto.base,
      &scc_info_LoginPacket_packets_2eproto.base,
      &scc_info_MessagePacket_packets_2eproto.base,}};

static void InitDefaultsscc_info_VersionPacket_packets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_VersionPacket_default_instance_;
    new (ptr) ::VersionPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VersionPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VersionPacket_packets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VersionPacket_packets_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_packets_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_packets_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_packets_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_packets_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VersionPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VersionPacket, major_ver_),
  PROTOBUF_FIELD_OFFSET(::VersionPacket, minor_ver_),
  PROTOBUF_FIELD_OFFSET(::VersionPacket, patch_ver_),
  PROTOBUF_FIELD_OFFSET(::VersionPacket, protocol_extension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LoginPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LoginPacket, user_identifier_),
  PROTOBUF_FIELD_OFFSET(::LoginPacket, user_password_),
  PROTOBUF_FIELD_OFFSET(::MessagePacket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::MessagePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MessagePacket, identifiers_),
  PROTOBUF_FIELD_OFFSET(::MessagePacket, channel_id_),
  PROTOBUF_FIELD_OFFSET(::MessagePacket, message_),
  ~0u,
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ErrorPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ErrorPacket, user_identifier_),
  PROTOBUF_FIELD_OFFSET(::ErrorPacket, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UniversalPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::UniversalPacket, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::UniversalPacketDefaultTypeInternal, version_),
  offsetof(::UniversalPacketDefaultTypeInternal, error_),
  offsetof(::UniversalPacketDefaultTypeInternal, login_),
  offsetof(::UniversalPacketDefaultTypeInternal, message_),
  PROTOBUF_FIELD_OFFSET(::UniversalPacket, payload_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::VersionPacket)},
  { 9, -1, sizeof(::LoginPacket)},
  { 16, 24, sizeof(::MessagePacket)},
  { 27, -1, sizeof(::ErrorPacket)},
  { 34, -1, sizeof(::UniversalPacket)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_VersionPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LoginPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MessagePacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ErrorPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UniversalPacket_default_instance_),
};

const char descriptor_table_protodef_packets_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rpackets.proto\032\033buf/validate/validate.p"
  "roto\"\265\001\n\rVersionPacket\022#\n\tmajor_ver\030\001 \001("
  "\rB\006\272H\003\310\001\001R\010majorVer\022#\n\tminor_ver\030\002 \001(\rB\006"
  "\272H\003\310\001\001R\010minorVer\022#\n\tpatch_ver\030\003 \001(\rB\006\272H\003"
  "\310\001\001R\010patchVer\0225\n\022protocol_extension\030\004 \001("
  "\rB\006\272H\003\310\001\001R\021protocolExtension\"u\n\013LoginPac"
  "ket\0224\n\017user_identifier\030\001 \001(\tB\013\272H\010\310\001\001r\003\230\001"
  "@R\016userIdentifier\0220\n\ruser_password\030\002 \001(\t"
  "B\013\272H\010\310\001\001r\003\230\001@R\014userPassword\"\253\001\n\rMessageP"
  "acket\0226\n\013identifiers\030\001 \003(\tB\024\272H\021\310\001\001\222\001\013\010\001\020"
  "\200\002\"\004r\002\030@R\013identifiers\022,\n\nchannel_id\030\002 \001("
  "\tB\010\272H\005r\003\230\001@H\000R\tchannelId\210\001\001\022%\n\007message\030\003"
  " \001(\tB\013\272H\010\310\001\001r\003\030\200\010R\007messageB\r\n\013_channel_i"
  "d\"f\n\013ErrorPacket\0224\n\017user_identifier\030\001 \001("
  "\tB\013\272H\010\310\001\001r\003\230\001@R\016userIdentifier\022!\n\005error\030"
  "\003 \001(\tB\013\272H\010\310\001\001r\003\030\200\010R\005error\"\307\001\n\017UniversalP"
  "acket\022*\n\007version\030\001 \001(\0132\016.VersionPacketH\000"
  "R\007version\022$\n\005error\030\002 \001(\0132\014.ErrorPacketH\000"
  "R\005error\022$\n\005login\030\003 \001(\0132\014.LoginPacketH\000R\005"
  "login\022*\n\007message\030\004 \001(\0132\016.MessagePacketH\000"
  "R\007messageB\020\n\007payload\022\005\272H\002\010\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_packets_2eproto_deps[1] = {
  &::descriptor_table_buf_2fvalidate_2fvalidate_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_packets_2eproto_sccs[5] = {
  &scc_info_ErrorPacket_packets_2eproto.base,
  &scc_info_LoginPacket_packets_2eproto.base,
  &scc_info_MessagePacket_packets_2eproto.base,
  &scc_info_UniversalPacket_packets_2eproto.base,
  &scc_info_VersionPacket_packets_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_packets_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_packets_2eproto = {
  false, false, descriptor_table_protodef_packets_2eproto, "packets.proto", 835,
  &descriptor_table_packets_2eproto_once, descriptor_table_packets_2eproto_sccs, descriptor_table_packets_2eproto_deps, 5, 1,
  schemas, file_default_instances, TableStruct_packets_2eproto::offsets,
  file_level_metadata_packets_2eproto, 5, file_level_enum_descriptors_packets_2eproto, file_level_service_descriptors_packets_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_packets_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_packets_2eproto)), true);

// ===================================================================

void VersionPacket::InitAsDefaultInstance() {
}
class VersionPacket::_Internal {
 public:
};

VersionPacket::VersionPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:VersionPacket)
}
VersionPacket::VersionPacket(const VersionPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&major_ver_, &from.major_ver_,
    static_cast<size_t>(reinterpret_cast<char*>(&protocol_extension_) -
    reinterpret_cast<char*>(&major_ver_)) + sizeof(protocol_extension_));
  // @@protoc_insertion_point(copy_constructor:VersionPacket)
}

void VersionPacket::SharedCtor() {
  ::memset(&major_ver_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&protocol_extension_) -
      reinterpret_cast<char*>(&major_ver_)) + sizeof(protocol_extension_));
}

VersionPacket::~VersionPacket() {
  // @@protoc_insertion_point(destructor:VersionPacket)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VersionPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VersionPacket::ArenaDtor(void* object) {
  VersionPacket* _this = reinterpret_cast< VersionPacket* >(object);
  (void)_this;
}
void VersionPacket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VersionPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VersionPacket& VersionPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VersionPacket_packets_2eproto.base);
  return *internal_default_instance();
}


void VersionPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:VersionPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&major_ver_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&protocol_extension_) -
      reinterpret_cast<char*>(&major_ver_)) + sizeof(protocol_extension_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VersionPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 major_ver = 1[json_name = "majorVer", (.buf.validate.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          major_ver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 minor_ver = 2[json_name = "minorVer", (.buf.validate.field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          minor_ver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 patch_ver = 3[json_name = "patchVer", (.buf.validate.field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          patch_ver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 protocol_extension = 4[json_name = "protocolExtension", (.buf.validate.field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          protocol_extension_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VersionPacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VersionPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 major_ver = 1[json_name = "majorVer", (.buf.validate.field) = {
  if (this->major_ver() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_major_ver(), target);
  }

  // uint32 minor_ver = 2[json_name = "minorVer", (.buf.validate.field) = {
  if (this->minor_ver() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_minor_ver(), target);
  }

  // uint32 patch_ver = 3[json_name = "patchVer", (.buf.validate.field) = {
  if (this->patch_ver() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_patch_ver(), target);
  }

  // uint32 protocol_extension = 4[json_name = "protocolExtension", (.buf.validate.field) = {
  if (this->protocol_extension() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_protocol_extension(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VersionPacket)
  return target;
}

size_t VersionPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VersionPacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 major_ver = 1[json_name = "majorVer", (.buf.validate.field) = {
  if (this->major_ver() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_major_ver());
  }

  // uint32 minor_ver = 2[json_name = "minorVer", (.buf.validate.field) = {
  if (this->minor_ver() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_minor_ver());
  }

  // uint32 patch_ver = 3[json_name = "patchVer", (.buf.validate.field) = {
  if (this->patch_ver() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_patch_ver());
  }

  // uint32 protocol_extension = 4[json_name = "protocolExtension", (.buf.validate.field) = {
  if (this->protocol_extension() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_protocol_extension());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VersionPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VersionPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const VersionPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VersionPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VersionPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VersionPacket)
    MergeFrom(*source);
  }
}

void VersionPacket::MergeFrom(const VersionPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VersionPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.major_ver() != 0) {
    _internal_set_major_ver(from._internal_major_ver());
  }
  if (from.minor_ver() != 0) {
    _internal_set_minor_ver(from._internal_minor_ver());
  }
  if (from.patch_ver() != 0) {
    _internal_set_patch_ver(from._internal_patch_ver());
  }
  if (from.protocol_extension() != 0) {
    _internal_set_protocol_extension(from._internal_protocol_extension());
  }
}

void VersionPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VersionPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VersionPacket::CopyFrom(const VersionPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VersionPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionPacket::IsInitialized() const {
  return true;
}

void VersionPacket::InternalSwap(VersionPacket* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VersionPacket, protocol_extension_)
      + sizeof(VersionPacket::protocol_extension_)
      - PROTOBUF_FIELD_OFFSET(VersionPacket, major_ver_)>(
          reinterpret_cast<char*>(&major_ver_),
          reinterpret_cast<char*>(&other->major_ver_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VersionPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoginPacket::InitAsDefaultInstance() {
}
class LoginPacket::_Internal {
 public:
};

LoginPacket::LoginPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:LoginPacket)
}
LoginPacket::LoginPacket(const LoginPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_identifier().empty()) {
    user_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_identifier(),
      GetArena());
  }
  user_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_password().empty()) {
    user_password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_password(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:LoginPacket)
}

void LoginPacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoginPacket_packets_2eproto.base);
  user_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LoginPacket::~LoginPacket() {
  // @@protoc_insertion_point(destructor:LoginPacket)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoginPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoginPacket::ArenaDtor(void* object) {
  LoginPacket* _this = reinterpret_cast< LoginPacket* >(object);
  (void)_this;
}
void LoginPacket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginPacket& LoginPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginPacket_packets_2eproto.base);
  return *internal_default_instance();
}


void LoginPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:LoginPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_identifier_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user_identifier = 1[json_name = "userIdentifier", (.buf.validate.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LoginPacket.user_identifier"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_password = 2[json_name = "userPassword", (.buf.validate.field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LoginPacket.user_password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginPacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LoginPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_identifier = 1[json_name = "userIdentifier", (.buf.validate.field) = {
  if (this->user_identifier().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_identifier().data(), static_cast<int>(this->_internal_user_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LoginPacket.user_identifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_identifier(), target);
  }

  // string user_password = 2[json_name = "userPassword", (.buf.validate.field) = {
  if (this->user_password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_password().data(), static_cast<int>(this->_internal_user_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LoginPacket.user_password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LoginPacket)
  return target;
}

size_t LoginPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LoginPacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_identifier = 1[json_name = "userIdentifier", (.buf.validate.field) = {
  if (this->user_identifier().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_identifier());
  }

  // string user_password = 2[json_name = "userPassword", (.buf.validate.field) = {
  if (this->user_password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_password());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LoginPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LoginPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LoginPacket)
    MergeFrom(*source);
  }
}

void LoginPacket::MergeFrom(const LoginPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LoginPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_identifier().size() > 0) {
    _internal_set_user_identifier(from._internal_user_identifier());
  }
  if (from.user_password().size() > 0) {
    _internal_set_user_password(from._internal_user_password());
  }
}

void LoginPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LoginPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginPacket::CopyFrom(const LoginPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LoginPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginPacket::IsInitialized() const {
  return true;
}

void LoginPacket::InternalSwap(LoginPacket* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  user_identifier_.Swap(&other->user_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_password_.Swap(&other->user_password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MessagePacket::InitAsDefaultInstance() {
}
class MessagePacket::_Internal {
 public:
  using HasBits = decltype(std::declval<MessagePacket>()._has_bits_);
  static void set_has_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MessagePacket::MessagePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  identifiers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MessagePacket)
}
MessagePacket::MessagePacket(const MessagePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      identifiers_(from.identifiers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  channel_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_channel_id()) {
    channel_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_channel_id(),
      GetArena());
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:MessagePacket)
}

void MessagePacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessagePacket_packets_2eproto.base);
  channel_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MessagePacket::~MessagePacket() {
  // @@protoc_insertion_point(destructor:MessagePacket)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MessagePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  channel_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MessagePacket::ArenaDtor(void* object) {
  MessagePacket* _this = reinterpret_cast< MessagePacket* >(object);
  (void)_this;
}
void MessagePacket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessagePacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessagePacket& MessagePacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessagePacket_packets_2eproto.base);
  return *internal_default_instance();
}


void MessagePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:MessagePacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  identifiers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    channel_id_.ClearNonDefaultToEmpty();
  }
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessagePacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string identifiers = 1[json_name = "identifiers", (.buf.validate.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_identifiers();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MessagePacket.identifiers"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string channel_id = 2[json_name = "channelId", (.buf.validate.field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_channel_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MessagePacket.channel_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 3[json_name = "message", (.buf.validate.field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MessagePacket.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessagePacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MessagePacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string identifiers = 1[json_name = "identifiers", (.buf.validate.field) = {
  for (int i = 0, n = this->_internal_identifiers_size(); i < n; i++) {
    const auto& s = this->_internal_identifiers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MessagePacket.identifiers");
    target = stream->WriteString(1, s, target);
  }

  // string channel_id = 2[json_name = "channelId", (.buf.validate.field) = {
  if (_internal_has_channel_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channel_id().data(), static_cast<int>(this->_internal_channel_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MessagePacket.channel_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_channel_id(), target);
  }

  // string message = 3[json_name = "message", (.buf.validate.field) = {
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MessagePacket.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MessagePacket)
  return target;
}

size_t MessagePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MessagePacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string identifiers = 1[json_name = "identifiers", (.buf.validate.field) = {
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(identifiers_.size());
  for (int i = 0, n = identifiers_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      identifiers_.Get(i));
  }

  // string channel_id = 2[json_name = "channelId", (.buf.validate.field) = {
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channel_id());
  }

  // string message = 3[json_name = "message", (.buf.validate.field) = {
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessagePacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MessagePacket)
  GOOGLE_DCHECK_NE(&from, this);
  const MessagePacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessagePacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MessagePacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MessagePacket)
    MergeFrom(*source);
  }
}

void MessagePacket::MergeFrom(const MessagePacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MessagePacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  identifiers_.MergeFrom(from.identifiers_);
  if (from._internal_has_channel_id()) {
    _internal_set_channel_id(from._internal_channel_id());
  }
  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
}

void MessagePacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MessagePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessagePacket::CopyFrom(const MessagePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MessagePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessagePacket::IsInitialized() const {
  return true;
}

void MessagePacket::InternalSwap(MessagePacket* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  identifiers_.InternalSwap(&other->identifiers_);
  channel_id_.Swap(&other->channel_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MessagePacket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ErrorPacket::InitAsDefaultInstance() {
}
class ErrorPacket::_Internal {
 public:
};

ErrorPacket::ErrorPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ErrorPacket)
}
ErrorPacket::ErrorPacket(const ErrorPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_identifier().empty()) {
    user_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_identifier(),
      GetArena());
  }
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error().empty()) {
    error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_error(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ErrorPacket)
}

void ErrorPacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ErrorPacket_packets_2eproto.base);
  user_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ErrorPacket::~ErrorPacket() {
  // @@protoc_insertion_point(destructor:ErrorPacket)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ErrorPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ErrorPacket::ArenaDtor(void* object) {
  ErrorPacket* _this = reinterpret_cast< ErrorPacket* >(object);
  (void)_this;
}
void ErrorPacket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ErrorPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ErrorPacket& ErrorPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ErrorPacket_packets_2eproto.base);
  return *internal_default_instance();
}


void ErrorPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:ErrorPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_identifier_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  error_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ErrorPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user_identifier = 1[json_name = "userIdentifier", (.buf.validate.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ErrorPacket.user_identifier"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error = 3[json_name = "error", (.buf.validate.field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ErrorPacket.error"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ErrorPacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ErrorPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_identifier = 1[json_name = "userIdentifier", (.buf.validate.field) = {
  if (this->user_identifier().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_identifier().data(), static_cast<int>(this->_internal_user_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ErrorPacket.user_identifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_identifier(), target);
  }

  // string error = 3[json_name = "error", (.buf.validate.field) = {
  if (this->error().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ErrorPacket.error");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ErrorPacket)
  return target;
}

size_t ErrorPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ErrorPacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_identifier = 1[json_name = "userIdentifier", (.buf.validate.field) = {
  if (this->user_identifier().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_identifier());
  }

  // string error = 3[json_name = "error", (.buf.validate.field) = {
  if (this->error().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ErrorPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ErrorPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const ErrorPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ErrorPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ErrorPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ErrorPacket)
    MergeFrom(*source);
  }
}

void ErrorPacket::MergeFrom(const ErrorPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ErrorPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_identifier().size() > 0) {
    _internal_set_user_identifier(from._internal_user_identifier());
  }
  if (from.error().size() > 0) {
    _internal_set_error(from._internal_error());
  }
}

void ErrorPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ErrorPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErrorPacket::CopyFrom(const ErrorPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ErrorPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorPacket::IsInitialized() const {
  return true;
}

void ErrorPacket::InternalSwap(ErrorPacket* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  user_identifier_.Swap(&other->user_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  error_.Swap(&other->error_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ErrorPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UniversalPacket::InitAsDefaultInstance() {
  ::_UniversalPacket_default_instance_.version_ = const_cast< ::VersionPacket*>(
      ::VersionPacket::internal_default_instance());
  ::_UniversalPacket_default_instance_.error_ = const_cast< ::ErrorPacket*>(
      ::ErrorPacket::internal_default_instance());
  ::_UniversalPacket_default_instance_.login_ = const_cast< ::LoginPacket*>(
      ::LoginPacket::internal_default_instance());
  ::_UniversalPacket_default_instance_.message_ = const_cast< ::MessagePacket*>(
      ::MessagePacket::internal_default_instance());
}
class UniversalPacket::_Internal {
 public:
  static const ::VersionPacket& version(const UniversalPacket* msg);
  static const ::ErrorPacket& error(const UniversalPacket* msg);
  static const ::LoginPacket& login(const UniversalPacket* msg);
  static const ::MessagePacket& message(const UniversalPacket* msg);
};

const ::VersionPacket&
UniversalPacket::_Internal::version(const UniversalPacket* msg) {
  return *msg->payload_.version_;
}
const ::ErrorPacket&
UniversalPacket::_Internal::error(const UniversalPacket* msg) {
  return *msg->payload_.error_;
}
const ::LoginPacket&
UniversalPacket::_Internal::login(const UniversalPacket* msg) {
  return *msg->payload_.login_;
}
const ::MessagePacket&
UniversalPacket::_Internal::message(const UniversalPacket* msg) {
  return *msg->payload_.message_;
}
void UniversalPacket::set_allocated_version(::VersionPacket* version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(version);
    if (message_arena != submessage_arena) {
      version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, version, submessage_arena);
    }
    set_has_version();
    payload_.version_ = version;
  }
  // @@protoc_insertion_point(field_set_allocated:UniversalPacket.version)
}
void UniversalPacket::set_allocated_error(::ErrorPacket* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    payload_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:UniversalPacket.error)
}
void UniversalPacket::set_allocated_login(::LoginPacket* login) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (login) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(login);
    if (message_arena != submessage_arena) {
      login = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login, submessage_arena);
    }
    set_has_login();
    payload_.login_ = login;
  }
  // @@protoc_insertion_point(field_set_allocated:UniversalPacket.login)
}
void UniversalPacket::set_allocated_message(::MessagePacket* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_payload();
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(message);
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    set_has_message();
    payload_.message_ = message;
  }
  // @@protoc_insertion_point(field_set_allocated:UniversalPacket.message)
}
UniversalPacket::UniversalPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:UniversalPacket)
}
UniversalPacket::UniversalPacket(const UniversalPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_payload();
  switch (from.payload_case()) {
    case kVersion: {
      _internal_mutable_version()->::VersionPacket::MergeFrom(from._internal_version());
      break;
    }
    case kError: {
      _internal_mutable_error()->::ErrorPacket::MergeFrom(from._internal_error());
      break;
    }
    case kLogin: {
      _internal_mutable_login()->::LoginPacket::MergeFrom(from._internal_login());
      break;
    }
    case kMessage: {
      _internal_mutable_message()->::MessagePacket::MergeFrom(from._internal_message());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:UniversalPacket)
}

void UniversalPacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UniversalPacket_packets_2eproto.base);
  clear_has_payload();
}

UniversalPacket::~UniversalPacket() {
  // @@protoc_insertion_point(destructor:UniversalPacket)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UniversalPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_payload()) {
    clear_payload();
  }
}

void UniversalPacket::ArenaDtor(void* object) {
  UniversalPacket* _this = reinterpret_cast< UniversalPacket* >(object);
  (void)_this;
}
void UniversalPacket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UniversalPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UniversalPacket& UniversalPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UniversalPacket_packets_2eproto.base);
  return *internal_default_instance();
}


void UniversalPacket::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:UniversalPacket)
  switch (payload_case()) {
    case kVersion: {
      if (GetArena() == nullptr) {
        delete payload_.version_;
      }
      break;
    }
    case kError: {
      if (GetArena() == nullptr) {
        delete payload_.error_;
      }
      break;
    }
    case kLogin: {
      if (GetArena() == nullptr) {
        delete payload_.login_;
      }
      break;
    }
    case kMessage: {
      if (GetArena() == nullptr) {
        delete payload_.message_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void UniversalPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:UniversalPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UniversalPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .VersionPacket version = 1[json_name = "version"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_version(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ErrorPacket error = 2[json_name = "error"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .LoginPacket login = 3[json_name = "login"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_login(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MessagePacket message = 4[json_name = "message"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UniversalPacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UniversalPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VersionPacket version = 1[json_name = "version"];
  if (_internal_has_version()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::version(this), target, stream);
  }

  // .ErrorPacket error = 2[json_name = "error"];
  if (_internal_has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::error(this), target, stream);
  }

  // .LoginPacket login = 3[json_name = "login"];
  if (_internal_has_login()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::login(this), target, stream);
  }

  // .MessagePacket message = 4[json_name = "message"];
  if (_internal_has_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::message(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UniversalPacket)
  return target;
}

size_t UniversalPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UniversalPacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (payload_case()) {
    // .VersionPacket version = 1[json_name = "version"];
    case kVersion: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.version_);
      break;
    }
    // .ErrorPacket error = 2[json_name = "error"];
    case kError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.error_);
      break;
    }
    // .LoginPacket login = 3[json_name = "login"];
    case kLogin: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.login_);
      break;
    }
    // .MessagePacket message = 4[json_name = "message"];
    case kMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.message_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UniversalPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UniversalPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const UniversalPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UniversalPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UniversalPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UniversalPacket)
    MergeFrom(*source);
  }
}

void UniversalPacket::MergeFrom(const UniversalPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UniversalPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.payload_case()) {
    case kVersion: {
      _internal_mutable_version()->::VersionPacket::MergeFrom(from._internal_version());
      break;
    }
    case kError: {
      _internal_mutable_error()->::ErrorPacket::MergeFrom(from._internal_error());
      break;
    }
    case kLogin: {
      _internal_mutable_login()->::LoginPacket::MergeFrom(from._internal_login());
      break;
    }
    case kMessage: {
      _internal_mutable_message()->::MessagePacket::MergeFrom(from._internal_message());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void UniversalPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UniversalPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UniversalPacket::CopyFrom(const UniversalPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UniversalPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UniversalPacket::IsInitialized() const {
  return true;
}

void UniversalPacket::InternalSwap(UniversalPacket* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata UniversalPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::VersionPacket* Arena::CreateMaybeMessage< ::VersionPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VersionPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::LoginPacket* Arena::CreateMaybeMessage< ::LoginPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LoginPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::MessagePacket* Arena::CreateMaybeMessage< ::MessagePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MessagePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::ErrorPacket* Arena::CreateMaybeMessage< ::ErrorPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ErrorPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::UniversalPacket* Arena::CreateMaybeMessage< ::UniversalPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UniversalPacket >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
